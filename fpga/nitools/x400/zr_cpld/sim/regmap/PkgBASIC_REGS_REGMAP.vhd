---------------------------------------------------------------------
--
-- Copyright 2021 Ettus Research, A National Instruments Brand
-- SPDX-License-Identifier: LGPL-3.0-or-later
--
-- Module: PkgBASIC_REGS_REGMAP.vhd
--
-- Purpose:
--   The constants in this file are autogenerated by XmlParse.
--
----------------------------------------------------------------------
library ieee;
  use ieee.std_logic_1164.all;
  use ieee.numeric_std.all;

package PkgBASIC_REGS_REGMAP is

--===============================================================================
-- A numerically ordered list of registers and their HDL source files
--===============================================================================

  -- SLAVE_SIGNATURE       : 0x0 (basic_regs.v)
  -- SLAVE_REVISION        : 0x4 (basic_regs.v)
  -- SLAVE_OLDEST_REVISION : 0x8 (basic_regs.v)
  -- SLAVE_SCRATCH         : 0xC (basic_regs.v)
  -- GIT_HASH_REGISTER     : 0x10 (basic_regs.v)

--===============================================================================
-- RegTypes
--===============================================================================

--===============================================================================
-- Register Group BASIC_REGS_REGISTERS
--===============================================================================

  -- Enumerated type BASIC_REGISTERS_VALUES
  constant kBASIC_REGISTERS_VALUESSize : integer := 3;
  constant kBOARD_ID_VALUE       : integer := 16#4002#;  -- BASIC_REGISTERS_VALUES:BOARD_ID_VALUE
  constant kOLDEST_CPLD_REVISION : integer := 16#20110611#;  -- BASIC_REGISTERS_VALUES:OLDEST_CPLD_REVISION
  constant kCPLD_REVISION        : integer := 16#21031009#;  -- BASIC_REGISTERS_VALUES:CPLD_REVISION

  -- SLAVE_SIGNATURE Register (from basic_regs.v)
  constant kSLAVE_SIGNATURE : integer := 16#0#; -- Register Offset
  constant kSLAVE_SIGNATURESize: integer := 32;  -- register width in bits
  constant kSLAVE_SIGNATUREMask : std_logic_vector(31 downto 0) := X"0000ffff";
  constant kBOARD_IDSize       : integer := 16;  --SLAVE_SIGNATURE:BOARD_ID
  constant kBOARD_IDMsb        : integer := 15;  --SLAVE_SIGNATURE:BOARD_ID
  constant kBOARD_ID           : integer :=  0;  --SLAVE_SIGNATURE:BOARD_ID
  --function kSLAVE_SIGNATURERec return XReg2_t; -- Register Record function commented out due to programmable attributes

  -- SLAVE_REVISION Register (from basic_regs.v)
  constant kSLAVE_REVISION : integer := 16#4#; -- Register Offset
  constant kSLAVE_REVISIONSize: integer := 32;  -- register width in bits
  constant kSLAVE_REVISIONMask : std_logic_vector(31 downto 0) := X"ffffffff";
  constant kREVISION_REGSize       : integer := 32;  --SLAVE_REVISION:REVISION_REG
  constant kREVISION_REGMsb        : integer := 31;  --SLAVE_REVISION:REVISION_REG
  constant kREVISION_REG           : integer :=  0;  --SLAVE_REVISION:REVISION_REG
  --function kSLAVE_REVISIONRec return XReg2_t; -- Register Record function commented out due to programmable attributes

  -- SLAVE_OLDEST_REVISION Register (from basic_regs.v)
  constant kSLAVE_OLDEST_REVISION : integer := 16#8#; -- Register Offset
  constant kSLAVE_OLDEST_REVISIONSize: integer := 32;  -- register width in bits
  constant kSLAVE_OLDEST_REVISIONMask : std_logic_vector(31 downto 0) := X"ffffffff";
  constant kOLDEST_REVISION_REGSize       : integer := 32;  --SLAVE_OLDEST_REVISION:OLDEST_REVISION_REG
  constant kOLDEST_REVISION_REGMsb        : integer := 31;  --SLAVE_OLDEST_REVISION:OLDEST_REVISION_REG
  constant kOLDEST_REVISION_REG           : integer :=  0;  --SLAVE_OLDEST_REVISION:OLDEST_REVISION_REG
  --function kSLAVE_OLDEST_REVISIONRec return XReg2_t; -- Register Record function commented out due to programmable attributes

  -- SLAVE_SCRATCH Register (from basic_regs.v)
  constant kSLAVE_SCRATCH : integer := 16#C#; -- Register Offset
  constant kSLAVE_SCRATCHSize: integer := 32;  -- register width in bits
  constant kSLAVE_SCRATCHMask : std_logic_vector(31 downto 0) := X"ffffffff";
  constant kSCRATCH_REGSize       : integer := 32;  --SLAVE_SCRATCH:SCRATCH_REG
  constant kSCRATCH_REGMsb        : integer := 31;  --SLAVE_SCRATCH:SCRATCH_REG
  constant kSCRATCH_REG           : integer :=  0;  --SLAVE_SCRATCH:SCRATCH_REG
  --function kSLAVE_SCRATCHRec return XReg2_t; -- Register Record function commented out due to programmable attributes

  -- GIT_HASH_REGISTER Register (from basic_regs.v)
  constant kGIT_HASH_REGISTER : integer := 16#10#; -- Register Offset
  constant kGIT_HASH_REGISTERSize: integer := 32;  -- register width in bits
  constant kGIT_HASH_REGISTERMask : std_logic_vector(31 downto 0) := X"ffffffff";
  constant kGIT_HASHSize       : integer := 28;  --GIT_HASH_REGISTER:GIT_HASH
  constant kGIT_HASHMsb        : integer := 27;  --GIT_HASH_REGISTER:GIT_HASH
  constant kGIT_HASH           : integer :=  0;  --GIT_HASH_REGISTER:GIT_HASH
  constant kGIT_CLEANSize       : integer :=  4;  --GIT_HASH_REGISTER:GIT_CLEAN
  constant kGIT_CLEANMsb        : integer := 31;  --GIT_HASH_REGISTER:GIT_CLEAN
  constant kGIT_CLEAN           : integer := 28;  --GIT_HASH_REGISTER:GIT_CLEAN
  --function kGIT_HASH_REGISTERRec return XReg2_t; -- Register Record function commented out due to programmable attributes

end package;

package body PkgBASIC_REGS_REGMAP is

  -- function kSLAVE_SIGNATURERec not implemented because SLAVE_SIGNATURE has programmable attributes
  ---- Return the record of register kSLAVE_SIGNATURE
  --function kSLAVE_SIGNATURERec return XReg2_t is
  --  variable Rec : XReg2_t;
  --begin
  --  Rec := kXRegDefault;
  --  Rec.version := 1;
  --  Rec.offset := XAddrResize(X"0");
  --  Rec.size := 32;
  --  Rec.readable := true;
  --  Rec.writable := false;
  --  Rec.wmask := XRegResize(X"0000ffff");
  --  Rec.rmask := XRegResize(X"0000ffff");
  --  Rec.strobemask := XRegResize(X"00000000");
  --  Rec.clearablemask := XRegResize(X"00000000");
  --  -- no initial values specified
  --  -- Single-bit bitfields are not listed here because the default for msblookup* is msb=lsb.
  --  Rec.msblookupw(kBOARD_ID) := kBOARD_IDMsb;
  --  Rec.msblookupr(kBOARD_ID) := kBOARD_IDMsb;
  --  Rec.isreg := true;
  --  --synopsys translate_off
  --  Rec.name := rs("SLAVE_SIGNATURE");
  --  --synopsys translate_on
  --  return Rec;
  --end function kSLAVE_SIGNATURERec;

  -- function kSLAVE_REVISIONRec not implemented because SLAVE_REVISION has programmable attributes
  ---- Return the record of register kSLAVE_REVISION
  --function kSLAVE_REVISIONRec return XReg2_t is
  --  variable Rec : XReg2_t;
  --begin
  --  Rec := kXRegDefault;
  --  Rec.version := 1;
  --  Rec.offset := XAddrResize(X"4");
  --  Rec.size := 32;
  --  Rec.readable := true;
  --  Rec.writable := false;
  --  Rec.wmask := XRegResize(X"ffffffff");
  --  Rec.rmask := XRegResize(X"ffffffff");
  --  Rec.strobemask := XRegResize(X"00000000");
  --  Rec.clearablemask := XRegResize(X"00000000");
  --  -- no initial values specified
  --  -- Single-bit bitfields are not listed here because the default for msblookup* is msb=lsb.
  --  Rec.msblookupw(kREVISION_REG) := kREVISION_REGMsb;
  --  Rec.msblookupr(kREVISION_REG) := kREVISION_REGMsb;
  --  Rec.isreg := true;
  --  --synopsys translate_off
  --  Rec.name := rs("SLAVE_REVISION");
  --  --synopsys translate_on
  --  return Rec;
  --end function kSLAVE_REVISIONRec;

  -- function kSLAVE_OLDEST_REVISIONRec not implemented because SLAVE_OLDEST_REVISION has programmable attributes
  ---- Return the record of register kSLAVE_OLDEST_REVISION
  --function kSLAVE_OLDEST_REVISIONRec return XReg2_t is
  --  variable Rec : XReg2_t;
  --begin
  --  Rec := kXRegDefault;
  --  Rec.version := 1;
  --  Rec.offset := XAddrResize(X"8");
  --  Rec.size := 32;
  --  Rec.readable := true;
  --  Rec.writable := false;
  --  Rec.wmask := XRegResize(X"ffffffff");
  --  Rec.rmask := XRegResize(X"ffffffff");
  --  Rec.strobemask := XRegResize(X"00000000");
  --  Rec.clearablemask := XRegResize(X"00000000");
  --  -- no initial values specified
  --  -- Single-bit bitfields are not listed here because the default for msblookup* is msb=lsb.
  --  Rec.msblookupw(kOLDEST_REVISION_REG) := kOLDEST_REVISION_REGMsb;
  --  Rec.msblookupr(kOLDEST_REVISION_REG) := kOLDEST_REVISION_REGMsb;
  --  Rec.isreg := true;
  --  --synopsys translate_off
  --  Rec.name := rs("SLAVE_OLDEST_REVISION");
  --  --synopsys translate_on
  --  return Rec;
  --end function kSLAVE_OLDEST_REVISIONRec;

  -- function kSLAVE_SCRATCHRec not implemented because SLAVE_SCRATCH has programmable attributes
  ---- Return the record of register kSLAVE_SCRATCH
  --function kSLAVE_SCRATCHRec return XReg2_t is
  --  variable Rec : XReg2_t;
  --begin
  --  Rec := kXRegDefault;
  --  Rec.version := 1;
  --  Rec.offset := XAddrResize(X"C");
  --  Rec.size := 32;
  --  Rec.readable := true;
  --  Rec.writable := true;
  --  Rec.wmask := XRegResize(X"ffffffff");
  --  Rec.rmask := XRegResize(X"ffffffff");
  --  Rec.strobemask := XRegResize(X"00000000");
  --  Rec.clearablemask := XRegResize(X"00000000");
  --  Rec.initialvalue := XRegResize(X"00000000");
  --  -- Single-bit bitfields are not listed here because the default for msblookup* is msb=lsb.
  --  Rec.msblookupw(kSCRATCH_REG) := kSCRATCH_REGMsb;
  --  Rec.msblookupr(kSCRATCH_REG) := kSCRATCH_REGMsb;
  --  Rec.isreg := true;
  --  --synopsys translate_off
  --  Rec.name := rs("SLAVE_SCRATCH");
  --  --synopsys translate_on
  --  return Rec;
  --end function kSLAVE_SCRATCHRec;

  -- function kGIT_HASH_REGISTERRec not implemented because GIT_HASH_REGISTER has programmable attributes
  ---- Return the record of register kGIT_HASH_REGISTER
  --function kGIT_HASH_REGISTERRec return XReg2_t is
  --  variable Rec : XReg2_t;
  --begin
  --  Rec := kXRegDefault;
  --  Rec.version := 1;
  --  Rec.offset := XAddrResize(X"10");
  --  Rec.size := 32;
  --  Rec.readable := true;
  --  Rec.writable := false;
  --  Rec.wmask := XRegResize(X"ffffffff");
  --  Rec.rmask := XRegResize(X"ffffffff");
  --  Rec.strobemask := XRegResize(X"00000000");
  --  Rec.clearablemask := XRegResize(X"00000000");
  --  -- no initial values specified
  --  -- Single-bit bitfields are not listed here because the default for msblookup* is msb=lsb.
  --  Rec.msblookupw(kGIT_HASH) := kGIT_HASHMsb;
  --  Rec.msblookupw(kGIT_CLEAN) := kGIT_CLEANMsb;
  --  Rec.msblookupr(kGIT_HASH) := kGIT_HASHMsb;
  --  Rec.msblookupr(kGIT_CLEAN) := kGIT_CLEANMsb;
  --  Rec.isreg := true;
  --  --synopsys translate_off
  --  Rec.name := rs("GIT_HASH_REGISTER");
  --  --synopsys translate_on
  --  return Rec;
  --end function kGIT_HASH_REGISTERRec;

end package body;
