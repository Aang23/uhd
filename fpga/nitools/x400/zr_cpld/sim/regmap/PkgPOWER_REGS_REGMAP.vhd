---------------------------------------------------------------------
--
-- Copyright 2021 Ettus Research, A National Instruments Brand
-- SPDX-License-Identifier: LGPL-3.0-or-later
--
-- Module: PkgPOWER_REGS_REGMAP.vhd
--
-- Purpose:
--   The constants in this file are autogenerated by XmlParse.
--
----------------------------------------------------------------------
library ieee;
  use ieee.std_logic_1164.all;
  use ieee.numeric_std.all;

package PkgPOWER_REGS_REGMAP is

--===============================================================================
-- A numerically ordered list of registers and their HDL source files
--===============================================================================

  -- RF_POWER_CONTROL : 0x0 (power_regs.v)
  -- RF_POWER_STATUS  : 0x4 (power_regs.v)
  -- PRC_CONTROL      : 0x8 (power_regs.v)

--===============================================================================
-- RegTypes
--===============================================================================

--===============================================================================
-- Register Group POWER_REGS_REGISTERS
--===============================================================================

  -- RF_POWER_CONTROL Register (from power_regs.v)
  constant kRF_POWER_CONTROL : integer := 16#0#; -- Register Offset
  constant kRF_POWER_CONTROLSize: integer := 32;  -- register width in bits
  constant kRF_POWER_CONTROLMask : std_logic_vector(31 downto 0) := X"00000007";
  constant kENABLE_TX_7V0Size       : integer := 1;  --RF_POWER_CONTROL:ENABLE_TX_7V0
  constant kENABLE_TX_7V0Msb        : integer := 0;  --RF_POWER_CONTROL:ENABLE_TX_7V0
  constant kENABLE_TX_7V0           : integer := 0;  --RF_POWER_CONTROL:ENABLE_TX_7V0
  constant kENABLE_RX_7V0Size       : integer := 1;  --RF_POWER_CONTROL:ENABLE_RX_7V0
  constant kENABLE_RX_7V0Msb        : integer := 1;  --RF_POWER_CONTROL:ENABLE_RX_7V0
  constant kENABLE_RX_7V0           : integer := 1;  --RF_POWER_CONTROL:ENABLE_RX_7V0
  constant kENABLE_3v3Size       : integer := 1;  --RF_POWER_CONTROL:ENABLE_3v3
  constant kENABLE_3v3Msb        : integer := 2;  --RF_POWER_CONTROL:ENABLE_3v3
  constant kENABLE_3v3           : integer := 2;  --RF_POWER_CONTROL:ENABLE_3v3
  --function kRF_POWER_CONTROLRec return XReg2_t; -- Register Record function commented out due to programmable attributes

  -- RF_POWER_STATUS Register (from power_regs.v)
  constant kRF_POWER_STATUS : integer := 16#4#; -- Register Offset
  constant kRF_POWER_STATUSSize: integer := 32;  -- register width in bits
  constant kRF_POWER_STATUSMask : std_logic_vector(31 downto 0) := X"00000003";
  constant kP7V_A_STATUSSize       : integer := 1;  --RF_POWER_STATUS:P7V_A_STATUS
  constant kP7V_A_STATUSMsb        : integer := 0;  --RF_POWER_STATUS:P7V_A_STATUS
  constant kP7V_A_STATUS           : integer := 0;  --RF_POWER_STATUS:P7V_A_STATUS
  constant kP7V_B_STATUSSize       : integer := 1;  --RF_POWER_STATUS:P7V_B_STATUS
  constant kP7V_B_STATUSMsb        : integer := 1;  --RF_POWER_STATUS:P7V_B_STATUS
  constant kP7V_B_STATUS           : integer := 1;  --RF_POWER_STATUS:P7V_B_STATUS
  --function kRF_POWER_STATUSRec return XReg2_t; -- Register Record function commented out due to programmable attributes

  -- PRC_CONTROL Register (from power_regs.v)
  constant kPRC_CONTROL : integer := 16#8#; -- Register Offset
  constant kPRC_CONTROLSize: integer := 32;  -- register width in bits
  constant kPRC_CONTROLMask : std_logic_vector(31 downto 0) := X"00000001";
  constant kPLL_REF_CLOCK_ENABLESize       : integer := 1;  --PRC_CONTROL:PLL_REF_CLOCK_ENABLE
  constant kPLL_REF_CLOCK_ENABLEMsb        : integer := 0;  --PRC_CONTROL:PLL_REF_CLOCK_ENABLE
  constant kPLL_REF_CLOCK_ENABLE           : integer := 0;  --PRC_CONTROL:PLL_REF_CLOCK_ENABLE
  --function kPRC_CONTROLRec return XReg2_t; -- Register Record function commented out due to programmable attributes

end package;

package body PkgPOWER_REGS_REGMAP is

  -- function kRF_POWER_CONTROLRec not implemented because RF_POWER_CONTROL has programmable attributes
  ---- Return the record of register kRF_POWER_CONTROL
  --function kRF_POWER_CONTROLRec return XReg2_t is
  --  variable Rec : XReg2_t;
  --begin
  --  Rec := kXRegDefault;
  --  Rec.version := 1;
  --  Rec.offset := XAddrResize(X"0");
  --  Rec.size := 32;
  --  Rec.readable := true;
  --  Rec.writable := true;
  --  Rec.wmask := XRegResize(X"00000007");
  --  Rec.rmask := XRegResize(X"00000007");
  --  Rec.strobemask := XRegResize(X"00000000");
  --  Rec.clearablemask := XRegResize(X"00000000");
  --  Rec.initialvalue := XRegResize(X"00000000");
  --  -- Single-bit bitfields are not listed here because the default for msblookup* is msb=lsb.
  --  Rec.isreg := true;
  --  --synopsys translate_off
  --  Rec.name := rs("RF_POWER_CONTROL");
  --  --synopsys translate_on
  --  return Rec;
  --end function kRF_POWER_CONTROLRec;

  -- function kRF_POWER_STATUSRec not implemented because RF_POWER_STATUS has programmable attributes
  ---- Return the record of register kRF_POWER_STATUS
  --function kRF_POWER_STATUSRec return XReg2_t is
  --  variable Rec : XReg2_t;
  --begin
  --  Rec := kXRegDefault;
  --  Rec.version := 1;
  --  Rec.offset := XAddrResize(X"4");
  --  Rec.size := 32;
  --  Rec.readable := true;
  --  Rec.writable := false;
  --  Rec.wmask := XRegResize(X"00000003");
  --  Rec.rmask := XRegResize(X"00000003");
  --  Rec.strobemask := XRegResize(X"00000000");
  --  Rec.clearablemask := XRegResize(X"00000000");
  --  -- no initial values specified
  --  -- Single-bit bitfields are not listed here because the default for msblookup* is msb=lsb.
  --  Rec.isreg := true;
  --  --synopsys translate_off
  --  Rec.name := rs("RF_POWER_STATUS");
  --  --synopsys translate_on
  --  return Rec;
  --end function kRF_POWER_STATUSRec;

  -- function kPRC_CONTROLRec not implemented because PRC_CONTROL has programmable attributes
  ---- Return the record of register kPRC_CONTROL
  --function kPRC_CONTROLRec return XReg2_t is
  --  variable Rec : XReg2_t;
  --begin
  --  Rec := kXRegDefault;
  --  Rec.version := 1;
  --  Rec.offset := XAddrResize(X"8");
  --  Rec.size := 32;
  --  Rec.readable := true;
  --  Rec.writable := true;
  --  Rec.wmask := XRegResize(X"00000001");
  --  Rec.rmask := XRegResize(X"00000001");
  --  Rec.strobemask := XRegResize(X"00000000");
  --  Rec.clearablemask := XRegResize(X"00000000");
  --  Rec.initialvalue := XRegResize(X"00000000");
  --  -- Single-bit bitfields are not listed here because the default for msblookup* is msb=lsb.
  --  Rec.isreg := true;
  --  --synopsys translate_off
  --  Rec.name := rs("PRC_CONTROL");
  --  --synopsys translate_on
  --  return Rec;
  --end function kPRC_CONTROLRec;

end package body;
