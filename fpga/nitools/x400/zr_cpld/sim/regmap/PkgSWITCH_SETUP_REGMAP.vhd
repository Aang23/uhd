---------------------------------------------------------------------
--
-- Copyright 2021 Ettus Research, A National Instruments Brand
-- SPDX-License-Identifier: LGPL-3.0-or-later
--
-- Module: PkgSWITCH_SETUP_REGMAP.vhd
--
-- Purpose:
--   The constants in this file are autogenerated by XmlParse.
--
----------------------------------------------------------------------
library ieee;
  use ieee.std_logic_1164.all;
  use ieee.numeric_std.all;

package PkgSWITCH_SETUP_REGMAP is

--===============================================================================
-- A numerically ordered list of registers and their HDL source files
--===============================================================================

  -- TX0_PATH_CONTROL : 0x0 (switch_control.v)
  -- TX1_PATH_CONTROL : 0x400 (switch_control.v)
  -- RX0_PATH_CONTROL : 0x800 (switch_control.v)
  -- RX1_PATH_CONTROL : 0xC00 (switch_control.v)

--===============================================================================
-- RegTypes
--===============================================================================

  -- RX_PATH_CONTROL Type (from switch_control.v)
  constant kRX_PATH_CONTROLSize: integer := 32;
  constant kRX_PATH_CONTROLMask : std_logic_vector(31 downto 0) := X"00757d77";
  constant kRX_SWITCH_1Size       : integer := 2;  --RX_PATH_CONTROL:RX_SWITCH_1
  constant kRX_SWITCH_1Msb        : integer := 1;  --RX_PATH_CONTROL:RX_SWITCH_1
  constant kRX_SWITCH_1           : integer := 0;  --RX_PATH_CONTROL:RX_SWITCH_1
  constant kRX_SWITCH_2Size       : integer := 1;  --RX_PATH_CONTROL:RX_SWITCH_2
  constant kRX_SWITCH_2Msb        : integer := 2;  --RX_PATH_CONTROL:RX_SWITCH_2
  constant kRX_SWITCH_2           : integer := 2;  --RX_PATH_CONTROL:RX_SWITCH_2
  constant kRX_SWITCH_3Size       : integer := 3;  --RX_PATH_CONTROL:RX_SWITCH_3
  constant kRX_SWITCH_3Msb        : integer := 6;  --RX_PATH_CONTROL:RX_SWITCH_3
  constant kRX_SWITCH_3           : integer := 4;  --RX_PATH_CONTROL:RX_SWITCH_3
  constant kRX_SWITCH_4Size       : integer := 1;  --RX_PATH_CONTROL:RX_SWITCH_4
  constant kRX_SWITCH_4Msb        : integer := 8;  --RX_PATH_CONTROL:RX_SWITCH_4
  constant kRX_SWITCH_4           : integer := 8;  --RX_PATH_CONTROL:RX_SWITCH_4
  constant kRX_SWITCH_5Size       : integer :=  2;  --RX_PATH_CONTROL:RX_SWITCH_5
  constant kRX_SWITCH_5Msb        : integer := 11;  --RX_PATH_CONTROL:RX_SWITCH_5
  constant kRX_SWITCH_5           : integer := 10;  --RX_PATH_CONTROL:RX_SWITCH_5
  constant kRX_SWITCH_6Size       : integer :=  2;  --RX_PATH_CONTROL:RX_SWITCH_6
  constant kRX_SWITCH_6Msb        : integer := 13;  --RX_PATH_CONTROL:RX_SWITCH_6
  constant kRX_SWITCH_6           : integer := 12;  --RX_PATH_CONTROL:RX_SWITCH_6
  constant kRX_SWITCH_7_8Size       : integer :=  1;  --RX_PATH_CONTROL:RX_SWITCH_7_8
  constant kRX_SWITCH_7_8Msb        : integer := 14;  --RX_PATH_CONTROL:RX_SWITCH_7_8
  constant kRX_SWITCH_7_8           : integer := 14;  --RX_PATH_CONTROL:RX_SWITCH_7_8
  constant kRX_SWITCH_9Size       : integer :=  1;  --RX_PATH_CONTROL:RX_SWITCH_9
  constant kRX_SWITCH_9Msb        : integer := 16;  --RX_PATH_CONTROL:RX_SWITCH_9
  constant kRX_SWITCH_9           : integer := 16;  --RX_PATH_CONTROL:RX_SWITCH_9
  constant kRX_SWITCH_10Size       : integer :=  1;  --RX_PATH_CONTROL:RX_SWITCH_10
  constant kRX_SWITCH_10Msb        : integer := 18;  --RX_PATH_CONTROL:RX_SWITCH_10
  constant kRX_SWITCH_10           : integer := 18;  --RX_PATH_CONTROL:RX_SWITCH_10
  constant kRX_SWITCH_11Size       : integer :=  3;  --RX_PATH_CONTROL:RX_SWITCH_11
  constant kRX_SWITCH_11Msb        : integer := 22;  --RX_PATH_CONTROL:RX_SWITCH_11
  constant kRX_SWITCH_11           : integer := 20;  --RX_PATH_CONTROL:RX_SWITCH_11

  -- TX_PATH_CONTROL Type (from switch_control.v)
  constant kTX_PATH_CONTROLSize: integer := 32;
  constant kTX_PATH_CONTROLMask : std_logic_vector(31 downto 0) := X"053f7ffd";
  constant kTX_SWITCH_1_2Size       : integer := 1;  --TX_PATH_CONTROL:TX_SWITCH_1_2
  constant kTX_SWITCH_1_2Msb        : integer := 0;  --TX_PATH_CONTROL:TX_SWITCH_1_2
  constant kTX_SWITCH_1_2           : integer := 0;  --TX_PATH_CONTROL:TX_SWITCH_1_2
  constant kTX_SWITCH_3Size       : integer := 2;  --TX_PATH_CONTROL:TX_SWITCH_3
  constant kTX_SWITCH_3Msb        : integer := 3;  --TX_PATH_CONTROL:TX_SWITCH_3
  constant kTX_SWITCH_3           : integer := 2;  --TX_PATH_CONTROL:TX_SWITCH_3
  constant kTX_SWITCH_4Size       : integer := 2;  --TX_PATH_CONTROL:TX_SWITCH_4
  constant kTX_SWITCH_4Msb        : integer := 5;  --TX_PATH_CONTROL:TX_SWITCH_4
  constant kTX_SWITCH_4           : integer := 4;  --TX_PATH_CONTROL:TX_SWITCH_4
  constant kTX_SWITCH_5Size       : integer := 2;  --TX_PATH_CONTROL:TX_SWITCH_5
  constant kTX_SWITCH_5Msb        : integer := 7;  --TX_PATH_CONTROL:TX_SWITCH_5
  constant kTX_SWITCH_5           : integer := 6;  --TX_PATH_CONTROL:TX_SWITCH_5
  constant kTX_SWITCH_6Size       : integer := 2;  --TX_PATH_CONTROL:TX_SWITCH_6
  constant kTX_SWITCH_6Msb        : integer := 9;  --TX_PATH_CONTROL:TX_SWITCH_6
  constant kTX_SWITCH_6           : integer := 8;  --TX_PATH_CONTROL:TX_SWITCH_6
  constant kTX_SWITCH_7Size       : integer :=  2;  --TX_PATH_CONTROL:TX_SWITCH_7
  constant kTX_SWITCH_7Msb        : integer := 11;  --TX_PATH_CONTROL:TX_SWITCH_7
  constant kTX_SWITCH_7           : integer := 10;  --TX_PATH_CONTROL:TX_SWITCH_7
  constant kTX_SWITCH_8Size       : integer :=  3;  --TX_PATH_CONTROL:TX_SWITCH_8
  constant kTX_SWITCH_8Msb        : integer := 14;  --TX_PATH_CONTROL:TX_SWITCH_8
  constant kTX_SWITCH_8           : integer := 12;  --TX_PATH_CONTROL:TX_SWITCH_8
  constant kTX_SWITCH_9Size       : integer :=  2;  --TX_PATH_CONTROL:TX_SWITCH_9
  constant kTX_SWITCH_9Msb        : integer := 17;  --TX_PATH_CONTROL:TX_SWITCH_9
  constant kTX_SWITCH_9           : integer := 16;  --TX_PATH_CONTROL:TX_SWITCH_9
  constant kTX_SWITCH_10Size       : integer :=  2;  --TX_PATH_CONTROL:TX_SWITCH_10
  constant kTX_SWITCH_10Msb        : integer := 19;  --TX_PATH_CONTROL:TX_SWITCH_10
  constant kTX_SWITCH_10           : integer := 18;  --TX_PATH_CONTROL:TX_SWITCH_10
  constant kTX_SWITCH_11Size       : integer :=  2;  --TX_PATH_CONTROL:TX_SWITCH_11
  constant kTX_SWITCH_11Msb        : integer := 21;  --TX_PATH_CONTROL:TX_SWITCH_11
  constant kTX_SWITCH_11           : integer := 20;  --TX_PATH_CONTROL:TX_SWITCH_11
  constant kTX_SWITCH_13Size       : integer :=  1;  --TX_PATH_CONTROL:TX_SWITCH_13
  constant kTX_SWITCH_13Msb        : integer := 24;  --TX_PATH_CONTROL:TX_SWITCH_13
  constant kTX_SWITCH_13           : integer := 24;  --TX_PATH_CONTROL:TX_SWITCH_13
  constant kTX_SWITCH_14Size       : integer :=  1;  --TX_PATH_CONTROL:TX_SWITCH_14
  constant kTX_SWITCH_14Msb        : integer := 26;  --TX_PATH_CONTROL:TX_SWITCH_14
  constant kTX_SWITCH_14           : integer := 26;  --TX_PATH_CONTROL:TX_SWITCH_14

--===============================================================================
-- Register Group SWITCH_SETUP_REGISTERS
--===============================================================================

  -- TX0_PATH_CONTROL Register (from switch_control.v)
  function kTX0_PATH_CONTROL (i:integer) return integer; -- Register Offset function
  constant kTX0_PATH_CONTROLCount : integer := 256; -- Number of elements in array
  constant kTX0_PATH_CONTROLSize: integer := 32; -- Register bit width (not array size)
  --function kTX0_PATH_CONTROLRec (i:integer) return XReg2_t; -- Register Record function commented out due to programmable attributes

  -- TX1_PATH_CONTROL Register (from switch_control.v)
  function kTX1_PATH_CONTROL (i:integer) return integer; -- Register Offset function
  constant kTX1_PATH_CONTROLCount : integer := 256; -- Number of elements in array
  constant kTX1_PATH_CONTROLSize: integer := 32; -- Register bit width (not array size)
  --function kTX1_PATH_CONTROLRec (i:integer) return XReg2_t; -- Register Record function commented out due to programmable attributes

  -- RX0_PATH_CONTROL Register (from switch_control.v)
  function kRX0_PATH_CONTROL (i:integer) return integer; -- Register Offset function
  constant kRX0_PATH_CONTROLCount : integer := 256; -- Number of elements in array
  constant kRX0_PATH_CONTROLSize: integer := 32; -- Register bit width (not array size)
  --function kRX0_PATH_CONTROLRec (i:integer) return XReg2_t; -- Register Record function commented out due to programmable attributes

  -- RX1_PATH_CONTROL Register (from switch_control.v)
  function kRX1_PATH_CONTROL (i:integer) return integer; -- Register Offset function
  constant kRX1_PATH_CONTROLCount : integer := 256; -- Number of elements in array
  constant kRX1_PATH_CONTROLSize: integer := 32; -- Register bit width (not array size)
  --function kRX1_PATH_CONTROLRec (i:integer) return XReg2_t; -- Register Record function commented out due to programmable attributes

end package;

package body PkgSWITCH_SETUP_REGMAP is

  -- Return the offset of an element of register array kTX0_PATH_CONTROL
  function kTX0_PATH_CONTROL (i:integer) return integer is
  begin
    --synopsys translate_off
    assert i>=0 and i<=255 report "kTX0_PATH_CONTROL i=" & integer'image(i) & " is out of range" severity error;
    --synopsys translate_on
    return (i * 4) + 16#0#;
  end function kTX0_PATH_CONTROL;

  -- function kTX0_PATH_CONTROLRec not implemented because TX0_PATH_CONTROL has programmable attributes
  ---- Return the record of an element of register array kTX0_PATH_CONTROL
  --function kTX0_PATH_CONTROLRec (i:integer) return XReg2_t is
  --  variable Rec : XReg2_t;
  --begin
  --  --synopsys translate_off
  --  assert i>=0 and i<=255 report "kTX0_PATH_CONTROLRec i=" & integer'image(i) & " is out of range" severity error;
  --  --synopsys translate_on
  --  Rec := kXRegDefault;
  --  Rec.version := 1;
  --  Rec.offset := (i * 4) + XAddrResize(X"0");
  --  Rec.size := 32;
  --  Rec.readable := true;
  --  Rec.writable := true;
  --  Rec.wmask := XRegResize(X"053f7ffd");
  --  Rec.rmask := XRegResize(X"053f7ffd");
  --  Rec.strobemask := XRegResize(X"00000000");
  --  Rec.clearablemask := XRegResize(X"00000000");
  --  Rec.initialvalue := XRegResize(X"00000000");
  --  -- Single-bit bitfields are not listed here because the default for msblookup* is msb=lsb.
  --  Rec.msblookupw(kTX_SWITCH_3) := kTX_SWITCH_3Msb;
  --  Rec.msblookupw(kTX_SWITCH_4) := kTX_SWITCH_4Msb;
  --  Rec.msblookupw(kTX_SWITCH_5) := kTX_SWITCH_5Msb;
  --  Rec.msblookupw(kTX_SWITCH_6) := kTX_SWITCH_6Msb;
  --  Rec.msblookupw(kTX_SWITCH_7) := kTX_SWITCH_7Msb;
  --  Rec.msblookupw(kTX_SWITCH_8) := kTX_SWITCH_8Msb;
  --  Rec.msblookupw(kTX_SWITCH_9) := kTX_SWITCH_9Msb;
  --  Rec.msblookupw(kTX_SWITCH_10) := kTX_SWITCH_10Msb;
  --  Rec.msblookupw(kTX_SWITCH_11) := kTX_SWITCH_11Msb;
  --  Rec.msblookupr(kTX_SWITCH_3) := kTX_SWITCH_3Msb;
  --  Rec.msblookupr(kTX_SWITCH_4) := kTX_SWITCH_4Msb;
  --  Rec.msblookupr(kTX_SWITCH_5) := kTX_SWITCH_5Msb;
  --  Rec.msblookupr(kTX_SWITCH_6) := kTX_SWITCH_6Msb;
  --  Rec.msblookupr(kTX_SWITCH_7) := kTX_SWITCH_7Msb;
  --  Rec.msblookupr(kTX_SWITCH_8) := kTX_SWITCH_8Msb;
  --  Rec.msblookupr(kTX_SWITCH_9) := kTX_SWITCH_9Msb;
  --  Rec.msblookupr(kTX_SWITCH_10) := kTX_SWITCH_10Msb;
  --  Rec.msblookupr(kTX_SWITCH_11) := kTX_SWITCH_11Msb;
  --  Rec.isreg := true;
  --  --synopsys translate_off
  --  Rec.name := rs("TX0_PATH_CONTROL");
  --  --synopsys translate_on
  --  return Rec;
  --end function kTX0_PATH_CONTROLRec;

  -- Return the offset of an element of register array kTX1_PATH_CONTROL
  function kTX1_PATH_CONTROL (i:integer) return integer is
  begin
    --synopsys translate_off
    assert i>=0 and i<=255 report "kTX1_PATH_CONTROL i=" & integer'image(i) & " is out of range" severity error;
    --synopsys translate_on
    return (i * 4) + 16#400#;
  end function kTX1_PATH_CONTROL;

  -- function kTX1_PATH_CONTROLRec not implemented because TX1_PATH_CONTROL has programmable attributes
  ---- Return the record of an element of register array kTX1_PATH_CONTROL
  --function kTX1_PATH_CONTROLRec (i:integer) return XReg2_t is
  --  variable Rec : XReg2_t;
  --begin
  --  --synopsys translate_off
  --  assert i>=0 and i<=255 report "kTX1_PATH_CONTROLRec i=" & integer'image(i) & " is out of range" severity error;
  --  --synopsys translate_on
  --  Rec := kXRegDefault;
  --  Rec.version := 1;
  --  Rec.offset := (i * 4) + XAddrResize(X"400");
  --  Rec.size := 32;
  --  Rec.readable := true;
  --  Rec.writable := true;
  --  Rec.wmask := XRegResize(X"053f7ffd");
  --  Rec.rmask := XRegResize(X"053f7ffd");
  --  Rec.strobemask := XRegResize(X"00000000");
  --  Rec.clearablemask := XRegResize(X"00000000");
  --  Rec.initialvalue := XRegResize(X"00000000");
  --  -- Single-bit bitfields are not listed here because the default for msblookup* is msb=lsb.
  --  Rec.msblookupw(kTX_SWITCH_3) := kTX_SWITCH_3Msb;
  --  Rec.msblookupw(kTX_SWITCH_4) := kTX_SWITCH_4Msb;
  --  Rec.msblookupw(kTX_SWITCH_5) := kTX_SWITCH_5Msb;
  --  Rec.msblookupw(kTX_SWITCH_6) := kTX_SWITCH_6Msb;
  --  Rec.msblookupw(kTX_SWITCH_7) := kTX_SWITCH_7Msb;
  --  Rec.msblookupw(kTX_SWITCH_8) := kTX_SWITCH_8Msb;
  --  Rec.msblookupw(kTX_SWITCH_9) := kTX_SWITCH_9Msb;
  --  Rec.msblookupw(kTX_SWITCH_10) := kTX_SWITCH_10Msb;
  --  Rec.msblookupw(kTX_SWITCH_11) := kTX_SWITCH_11Msb;
  --  Rec.msblookupr(kTX_SWITCH_3) := kTX_SWITCH_3Msb;
  --  Rec.msblookupr(kTX_SWITCH_4) := kTX_SWITCH_4Msb;
  --  Rec.msblookupr(kTX_SWITCH_5) := kTX_SWITCH_5Msb;
  --  Rec.msblookupr(kTX_SWITCH_6) := kTX_SWITCH_6Msb;
  --  Rec.msblookupr(kTX_SWITCH_7) := kTX_SWITCH_7Msb;
  --  Rec.msblookupr(kTX_SWITCH_8) := kTX_SWITCH_8Msb;
  --  Rec.msblookupr(kTX_SWITCH_9) := kTX_SWITCH_9Msb;
  --  Rec.msblookupr(kTX_SWITCH_10) := kTX_SWITCH_10Msb;
  --  Rec.msblookupr(kTX_SWITCH_11) := kTX_SWITCH_11Msb;
  --  Rec.isreg := true;
  --  --synopsys translate_off
  --  Rec.name := rs("TX1_PATH_CONTROL");
  --  --synopsys translate_on
  --  return Rec;
  --end function kTX1_PATH_CONTROLRec;

  -- Return the offset of an element of register array kRX0_PATH_CONTROL
  function kRX0_PATH_CONTROL (i:integer) return integer is
  begin
    --synopsys translate_off
    assert i>=0 and i<=255 report "kRX0_PATH_CONTROL i=" & integer'image(i) & " is out of range" severity error;
    --synopsys translate_on
    return (i * 4) + 16#800#;
  end function kRX0_PATH_CONTROL;

  -- function kRX0_PATH_CONTROLRec not implemented because RX0_PATH_CONTROL has programmable attributes
  ---- Return the record of an element of register array kRX0_PATH_CONTROL
  --function kRX0_PATH_CONTROLRec (i:integer) return XReg2_t is
  --  variable Rec : XReg2_t;
  --begin
  --  --synopsys translate_off
  --  assert i>=0 and i<=255 report "kRX0_PATH_CONTROLRec i=" & integer'image(i) & " is out of range" severity error;
  --  --synopsys translate_on
  --  Rec := kXRegDefault;
  --  Rec.version := 1;
  --  Rec.offset := (i * 4) + XAddrResize(X"800");
  --  Rec.size := 32;
  --  Rec.readable := true;
  --  Rec.writable := true;
  --  Rec.wmask := XRegResize(X"00757d77");
  --  Rec.rmask := XRegResize(X"00757d77");
  --  Rec.strobemask := XRegResize(X"00000000");
  --  Rec.clearablemask := XRegResize(X"00000000");
  --  Rec.initialvalue := XRegResize(X"00000000");
  --  -- Single-bit bitfields are not listed here because the default for msblookup* is msb=lsb.
  --  Rec.msblookupw(kRX_SWITCH_1) := kRX_SWITCH_1Msb;
  --  Rec.msblookupw(kRX_SWITCH_3) := kRX_SWITCH_3Msb;
  --  Rec.msblookupw(kRX_SWITCH_5) := kRX_SWITCH_5Msb;
  --  Rec.msblookupw(kRX_SWITCH_6) := kRX_SWITCH_6Msb;
  --  Rec.msblookupw(kRX_SWITCH_11) := kRX_SWITCH_11Msb;
  --  Rec.msblookupr(kRX_SWITCH_1) := kRX_SWITCH_1Msb;
  --  Rec.msblookupr(kRX_SWITCH_3) := kRX_SWITCH_3Msb;
  --  Rec.msblookupr(kRX_SWITCH_5) := kRX_SWITCH_5Msb;
  --  Rec.msblookupr(kRX_SWITCH_6) := kRX_SWITCH_6Msb;
  --  Rec.msblookupr(kRX_SWITCH_11) := kRX_SWITCH_11Msb;
  --  Rec.isreg := true;
  --  --synopsys translate_off
  --  Rec.name := rs("RX0_PATH_CONTROL");
  --  --synopsys translate_on
  --  return Rec;
  --end function kRX0_PATH_CONTROLRec;

  -- Return the offset of an element of register array kRX1_PATH_CONTROL
  function kRX1_PATH_CONTROL (i:integer) return integer is
  begin
    --synopsys translate_off
    assert i>=0 and i<=255 report "kRX1_PATH_CONTROL i=" & integer'image(i) & " is out of range" severity error;
    --synopsys translate_on
    return (i * 4) + 16#C00#;
  end function kRX1_PATH_CONTROL;

  -- function kRX1_PATH_CONTROLRec not implemented because RX1_PATH_CONTROL has programmable attributes
  ---- Return the record of an element of register array kRX1_PATH_CONTROL
  --function kRX1_PATH_CONTROLRec (i:integer) return XReg2_t is
  --  variable Rec : XReg2_t;
  --begin
  --  --synopsys translate_off
  --  assert i>=0 and i<=255 report "kRX1_PATH_CONTROLRec i=" & integer'image(i) & " is out of range" severity error;
  --  --synopsys translate_on
  --  Rec := kXRegDefault;
  --  Rec.version := 1;
  --  Rec.offset := (i * 4) + XAddrResize(X"C00");
  --  Rec.size := 32;
  --  Rec.readable := true;
  --  Rec.writable := true;
  --  Rec.wmask := XRegResize(X"00757d77");
  --  Rec.rmask := XRegResize(X"00757d77");
  --  Rec.strobemask := XRegResize(X"00000000");
  --  Rec.clearablemask := XRegResize(X"00000000");
  --  Rec.initialvalue := XRegResize(X"00000000");
  --  -- Single-bit bitfields are not listed here because the default for msblookup* is msb=lsb.
  --  Rec.msblookupw(kRX_SWITCH_1) := kRX_SWITCH_1Msb;
  --  Rec.msblookupw(kRX_SWITCH_3) := kRX_SWITCH_3Msb;
  --  Rec.msblookupw(kRX_SWITCH_5) := kRX_SWITCH_5Msb;
  --  Rec.msblookupw(kRX_SWITCH_6) := kRX_SWITCH_6Msb;
  --  Rec.msblookupw(kRX_SWITCH_11) := kRX_SWITCH_11Msb;
  --  Rec.msblookupr(kRX_SWITCH_1) := kRX_SWITCH_1Msb;
  --  Rec.msblookupr(kRX_SWITCH_3) := kRX_SWITCH_3Msb;
  --  Rec.msblookupr(kRX_SWITCH_5) := kRX_SWITCH_5Msb;
  --  Rec.msblookupr(kRX_SWITCH_6) := kRX_SWITCH_6Msb;
  --  Rec.msblookupr(kRX_SWITCH_11) := kRX_SWITCH_11Msb;
  --  Rec.isreg := true;
  --  --synopsys translate_off
  --  Rec.name := rs("RX1_PATH_CONTROL");
  --  --synopsys translate_on
  --  return Rec;
  --end function kRX1_PATH_CONTROLRec;

end package body;
