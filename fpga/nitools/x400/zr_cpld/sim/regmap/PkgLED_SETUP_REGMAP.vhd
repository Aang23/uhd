---------------------------------------------------------------------
--
-- Copyright 2021 Ettus Research, A National Instruments Brand
-- SPDX-License-Identifier: LGPL-3.0-or-later
--
-- Module: PkgLED_SETUP_REGMAP.vhd
--
-- Purpose:
--   The constants in this file are autogenerated by XmlParse.
--
----------------------------------------------------------------------
library ieee;
  use ieee.std_logic_1164.all;
  use ieee.numeric_std.all;

package PkgLED_SETUP_REGMAP is

--===============================================================================
-- A numerically ordered list of registers and their HDL source files
--===============================================================================

  -- LED_CONTROL : 0x0 (led_control.v)

--===============================================================================
-- RegTypes
--===============================================================================

  -- LED_CONTROL_TYPE Type (from led_control.v)
  constant kLED_CONTROL_TYPESize: integer := 32;
  constant kLED_CONTROL_TYPEMask : std_logic_vector(31 downto 0) := X"00070007";
  constant kCH0_RX2_LED_ENSize       : integer := 1;  --LED_CONTROL_TYPE:CH0_RX2_LED_EN
  constant kCH0_RX2_LED_ENMsb        : integer := 0;  --LED_CONTROL_TYPE:CH0_RX2_LED_EN
  constant kCH0_RX2_LED_EN           : integer := 0;  --LED_CONTROL_TYPE:CH0_RX2_LED_EN
  constant kCH0_TRX1_LED_ENSize       : integer := 2;  --LED_CONTROL_TYPE:CH0_TRX1_LED_EN
  constant kCH0_TRX1_LED_ENMsb        : integer := 2;  --LED_CONTROL_TYPE:CH0_TRX1_LED_EN
  constant kCH0_TRX1_LED_EN           : integer := 1;  --LED_CONTROL_TYPE:CH0_TRX1_LED_EN
  constant kCH1_RX2_LED_ENSize       : integer :=  1;  --LED_CONTROL_TYPE:CH1_RX2_LED_EN
  constant kCH1_RX2_LED_ENMsb        : integer := 16;  --LED_CONTROL_TYPE:CH1_RX2_LED_EN
  constant kCH1_RX2_LED_EN           : integer := 16;  --LED_CONTROL_TYPE:CH1_RX2_LED_EN
  constant kCH1_TRX1_LED_ENSize       : integer :=  2;  --LED_CONTROL_TYPE:CH1_TRX1_LED_EN
  constant kCH1_TRX1_LED_ENMsb        : integer := 18;  --LED_CONTROL_TYPE:CH1_TRX1_LED_EN
  constant kCH1_TRX1_LED_EN           : integer := 17;  --LED_CONTROL_TYPE:CH1_TRX1_LED_EN

--===============================================================================
-- Register Group LED_SETUP_REGISTERS
--===============================================================================

  -- LED_CONTROL Register (from led_control.v)
  function kLED_CONTROL (i:integer) return integer; -- Register Offset function
  constant kLED_CONTROLCount : integer := 256; -- Number of elements in array
  constant kLED_CONTROLSize: integer := 32; -- Register bit width (not array size)
  --function kLED_CONTROLRec (i:integer) return XReg2_t; -- Register Record function commented out due to programmable attributes

end package;

package body PkgLED_SETUP_REGMAP is

  -- Return the offset of an element of register array kLED_CONTROL
  function kLED_CONTROL (i:integer) return integer is
  begin
    --synopsys translate_off
    assert i>=0 and i<=255 report "kLED_CONTROL i=" & integer'image(i) & " is out of range" severity error;
    --synopsys translate_on
    return (i * 4) + 16#0#;
  end function kLED_CONTROL;

  -- function kLED_CONTROLRec not implemented because LED_CONTROL has programmable attributes
  ---- Return the record of an element of register array kLED_CONTROL
  --function kLED_CONTROLRec (i:integer) return XReg2_t is
  --  variable Rec : XReg2_t;
  --begin
  --  --synopsys translate_off
  --  assert i>=0 and i<=255 report "kLED_CONTROLRec i=" & integer'image(i) & " is out of range" severity error;
  --  --synopsys translate_on
  --  Rec := kXRegDefault;
  --  Rec.version := 1;
  --  Rec.offset := (i * 4) + XAddrResize(X"0");
  --  Rec.size := 32;
  --  Rec.readable := true;
  --  Rec.writable := true;
  --  Rec.wmask := XRegResize(X"00070007");
  --  Rec.rmask := XRegResize(X"00070007");
  --  Rec.strobemask := XRegResize(X"00000000");
  --  Rec.clearablemask := XRegResize(X"00000000");
  --  Rec.initialvalue := XRegResize(X"00000000");
  --  -- Single-bit bitfields are not listed here because the default for msblookup* is msb=lsb.
  --  Rec.msblookupw(kCH0_TRX1_LED_EN) := kCH0_TRX1_LED_ENMsb;
  --  Rec.msblookupw(kCH1_TRX1_LED_EN) := kCH1_TRX1_LED_ENMsb;
  --  Rec.msblookupr(kCH0_TRX1_LED_EN) := kCH0_TRX1_LED_ENMsb;
  --  Rec.msblookupr(kCH1_TRX1_LED_EN) := kCH1_TRX1_LED_ENMsb;
  --  Rec.isreg := true;
  --  --synopsys translate_off
  --  Rec.name := rs("LED_CONTROL");
  --  --synopsys translate_on
  --  return Rec;
  --end function kLED_CONTROLRec;

end package body;
