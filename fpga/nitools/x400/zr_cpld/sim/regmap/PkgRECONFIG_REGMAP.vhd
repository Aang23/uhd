---------------------------------------------------------------------
--
-- Copyright 2021 Ettus Research, A National Instruments Brand
-- SPDX-License-Identifier: LGPL-3.0-or-later
--
-- Module: PkgRECONFIG_REGMAP.vhd
--
-- Purpose:
--   The constants in this file are autogenerated by XmlParse.
--
----------------------------------------------------------------------
library ieee;
  use ieee.std_logic_1164.all;
  use ieee.numeric_std.all;

package PkgRECONFIG_REGMAP is

--===============================================================================
-- A numerically ordered list of registers and their HDL source files
--===============================================================================

  -- FLASH_STATUS_REG          : 0x0 (reconfig_engine.v)
  -- FLASH_CONTROL_REG         : 0x4 (reconfig_engine.v)
  -- FLASH_ADDR_REG            : 0x8 (reconfig_engine.v)
  -- FLASH_WRITE_DATA_REG      : 0xC (reconfig_engine.v)
  -- FLASH_READ_DATA_REG       : 0x10 (reconfig_engine.v)
  -- FLASH_CFM0_START_ADDR_REG : 0x14 (reconfig_engine.v)
  -- FLASH_CFM0_END_ADDR_REG   : 0x18 (reconfig_engine.v)

--===============================================================================
-- RegTypes
--===============================================================================

--===============================================================================
-- Register Group RECONFIG_REGS
--===============================================================================

  -- Enumerated type FLASH_PRIMARY_IMAGE_ADDR_ENUM
  constant kFLASH_PRIMARY_IMAGE_ADDR_ENUMSize : integer := 3;
  constant kFLASH_PRIMARY_IMAGE_START_ADDR_MEM_INIT : integer := 4096;  -- FLASH_PRIMARY_IMAGE_ADDR_ENUM:FLASH_PRIMARY_IMAGE_START_ADDR_MEM_INIT
  constant kFLASH_PRIMARY_IMAGE_START_ADDR          : integer := 39936;  -- FLASH_PRIMARY_IMAGE_ADDR_ENUM:FLASH_PRIMARY_IMAGE_START_ADDR
  constant kFLASH_PRIMARY_IMAGE_END_ADDR            : integer := 75775;  -- FLASH_PRIMARY_IMAGE_ADDR_ENUM:FLASH_PRIMARY_IMAGE_END_ADDR

  -- FLASH_STATUS_REG Register (from reconfig_engine.v)
  constant kFLASH_STATUS_REG : integer := 16#0#; -- Register Offset
  constant kFLASH_STATUS_REGSize: integer := 32;  -- register width in bits
  constant kFLASH_STATUS_REGMask : std_logic_vector(31 downto 0) := X"00013331";
  constant kFLASH_WP_ENABLEDSize       : integer := 1;  --FLASH_STATUS_REG:FLASH_WP_ENABLED
  constant kFLASH_WP_ENABLEDMsb        : integer := 0;  --FLASH_STATUS_REG:FLASH_WP_ENABLED
  constant kFLASH_WP_ENABLED           : integer := 0;  --FLASH_STATUS_REG:FLASH_WP_ENABLED
  constant kFLASH_READ_IDLESize       : integer := 1;  --FLASH_STATUS_REG:FLASH_READ_IDLE
  constant kFLASH_READ_IDLEMsb        : integer := 4;  --FLASH_STATUS_REG:FLASH_READ_IDLE
  constant kFLASH_READ_IDLE           : integer := 4;  --FLASH_STATUS_REG:FLASH_READ_IDLE
  constant kFLASH_READ_ERRSize       : integer := 1;  --FLASH_STATUS_REG:FLASH_READ_ERR
  constant kFLASH_READ_ERRMsb        : integer := 5;  --FLASH_STATUS_REG:FLASH_READ_ERR
  constant kFLASH_READ_ERR           : integer := 5;  --FLASH_STATUS_REG:FLASH_READ_ERR
  constant kFLASH_ERASE_IDLESize       : integer := 1;  --FLASH_STATUS_REG:FLASH_ERASE_IDLE
  constant kFLASH_ERASE_IDLEMsb        : integer := 8;  --FLASH_STATUS_REG:FLASH_ERASE_IDLE
  constant kFLASH_ERASE_IDLE           : integer := 8;  --FLASH_STATUS_REG:FLASH_ERASE_IDLE
  constant kFLASH_ERASE_ERRSize       : integer := 1;  --FLASH_STATUS_REG:FLASH_ERASE_ERR
  constant kFLASH_ERASE_ERRMsb        : integer := 9;  --FLASH_STATUS_REG:FLASH_ERASE_ERR
  constant kFLASH_ERASE_ERR           : integer := 9;  --FLASH_STATUS_REG:FLASH_ERASE_ERR
  constant kFLASH_WRITE_IDLESize       : integer :=  1;  --FLASH_STATUS_REG:FLASH_WRITE_IDLE
  constant kFLASH_WRITE_IDLEMsb        : integer := 12;  --FLASH_STATUS_REG:FLASH_WRITE_IDLE
  constant kFLASH_WRITE_IDLE           : integer := 12;  --FLASH_STATUS_REG:FLASH_WRITE_IDLE
  constant kFLASH_WRITE_ERRSize       : integer :=  1;  --FLASH_STATUS_REG:FLASH_WRITE_ERR
  constant kFLASH_WRITE_ERRMsb        : integer := 13;  --FLASH_STATUS_REG:FLASH_WRITE_ERR
  constant kFLASH_WRITE_ERR           : integer := 13;  --FLASH_STATUS_REG:FLASH_WRITE_ERR
  constant kFLASH_MEM_INIT_ENABLEDSize       : integer :=  1;  --FLASH_STATUS_REG:FLASH_MEM_INIT_ENABLED
  constant kFLASH_MEM_INIT_ENABLEDMsb        : integer := 16;  --FLASH_STATUS_REG:FLASH_MEM_INIT_ENABLED
  constant kFLASH_MEM_INIT_ENABLED           : integer := 16;  --FLASH_STATUS_REG:FLASH_MEM_INIT_ENABLED
  --function kFLASH_STATUS_REGRec return XReg2_t; -- Register Record function commented out due to programmable attributes

  -- FLASH_CONTROL_REG Register (from reconfig_engine.v)
  constant kFLASH_CONTROL_REG : integer := 16#4#; -- Register Offset
  constant kFLASH_CONTROL_REGSize: integer := 32;  -- register width in bits
  constant kFLASH_CONTROL_REGMask : std_logic_vector(31 downto 0) := X"000007ff";
  constant kFLASH_ENABLE_WP_STBSize       : integer := 1;  --FLASH_CONTROL_REG:FLASH_ENABLE_WP_STB
  constant kFLASH_ENABLE_WP_STBMsb        : integer := 0;  --FLASH_CONTROL_REG:FLASH_ENABLE_WP_STB
  constant kFLASH_ENABLE_WP_STB           : integer := 0;  --FLASH_CONTROL_REG:FLASH_ENABLE_WP_STB
  constant kFLASH_DISABLE_WP_STBSize       : integer := 1;  --FLASH_CONTROL_REG:FLASH_DISABLE_WP_STB
  constant kFLASH_DISABLE_WP_STBMsb        : integer := 1;  --FLASH_CONTROL_REG:FLASH_DISABLE_WP_STB
  constant kFLASH_DISABLE_WP_STB           : integer := 1;  --FLASH_CONTROL_REG:FLASH_DISABLE_WP_STB
  constant kFLASH_READ_STBSize       : integer := 1;  --FLASH_CONTROL_REG:FLASH_READ_STB
  constant kFLASH_READ_STBMsb        : integer := 2;  --FLASH_CONTROL_REG:FLASH_READ_STB
  constant kFLASH_READ_STB           : integer := 2;  --FLASH_CONTROL_REG:FLASH_READ_STB
  constant kFLASH_WRITE_STBSize       : integer := 1;  --FLASH_CONTROL_REG:FLASH_WRITE_STB
  constant kFLASH_WRITE_STBMsb        : integer := 3;  --FLASH_CONTROL_REG:FLASH_WRITE_STB
  constant kFLASH_WRITE_STB           : integer := 3;  --FLASH_CONTROL_REG:FLASH_WRITE_STB
  constant kFLASH_ERASE_STBSize       : integer := 1;  --FLASH_CONTROL_REG:FLASH_ERASE_STB
  constant kFLASH_ERASE_STBMsb        : integer := 4;  --FLASH_CONTROL_REG:FLASH_ERASE_STB
  constant kFLASH_ERASE_STB           : integer := 4;  --FLASH_CONTROL_REG:FLASH_ERASE_STB
  constant kFLASH_ERASE_SECTORSize       : integer := 3;  --FLASH_CONTROL_REG:FLASH_ERASE_SECTOR
  constant kFLASH_ERASE_SECTORMsb        : integer := 7;  --FLASH_CONTROL_REG:FLASH_ERASE_SECTOR
  constant kFLASH_ERASE_SECTOR           : integer := 5;  --FLASH_CONTROL_REG:FLASH_ERASE_SECTOR
  constant kCLEAR_FLASH_READ_ERROR_STBSize       : integer := 1;  --FLASH_CONTROL_REG:CLEAR_FLASH_READ_ERROR_STB
  constant kCLEAR_FLASH_READ_ERROR_STBMsb        : integer := 8;  --FLASH_CONTROL_REG:CLEAR_FLASH_READ_ERROR_STB
  constant kCLEAR_FLASH_READ_ERROR_STB           : integer := 8;  --FLASH_CONTROL_REG:CLEAR_FLASH_READ_ERROR_STB
  constant kCLEAR_FLASH_WRITE_ERROR_STBSize       : integer := 1;  --FLASH_CONTROL_REG:CLEAR_FLASH_WRITE_ERROR_STB
  constant kCLEAR_FLASH_WRITE_ERROR_STBMsb        : integer := 9;  --FLASH_CONTROL_REG:CLEAR_FLASH_WRITE_ERROR_STB
  constant kCLEAR_FLASH_WRITE_ERROR_STB           : integer := 9;  --FLASH_CONTROL_REG:CLEAR_FLASH_WRITE_ERROR_STB
  constant kCLEAR_FLASH_ERASE_ERROR_STBSize       : integer :=  1;  --FLASH_CONTROL_REG:CLEAR_FLASH_ERASE_ERROR_STB
  constant kCLEAR_FLASH_ERASE_ERROR_STBMsb        : integer := 10;  --FLASH_CONTROL_REG:CLEAR_FLASH_ERASE_ERROR_STB
  constant kCLEAR_FLASH_ERASE_ERROR_STB           : integer := 10;  --FLASH_CONTROL_REG:CLEAR_FLASH_ERASE_ERROR_STB
  --function kFLASH_CONTROL_REGRec return XReg2_t; -- Register Record function commented out due to programmable attributes

  -- FLASH_ADDR_REG Register (from reconfig_engine.v)
  constant kFLASH_ADDR_REG : integer := 16#8#; -- Register Offset
  constant kFLASH_ADDR_REGSize: integer := 32;  -- register width in bits
  constant kFLASH_ADDR_REGMask : std_logic_vector(31 downto 0) := X"0001ffff";
  constant kFLASH_ADDRSize       : integer := 17;  --FLASH_ADDR_REG:FLASH_ADDR
  constant kFLASH_ADDRMsb        : integer := 16;  --FLASH_ADDR_REG:FLASH_ADDR
  constant kFLASH_ADDR           : integer :=  0;  --FLASH_ADDR_REG:FLASH_ADDR
  --function kFLASH_ADDR_REGRec return XReg2_t; -- Register Record function commented out due to programmable attributes

  -- FLASH_WRITE_DATA_REG Register (from reconfig_engine.v)
  constant kFLASH_WRITE_DATA_REG : integer := 16#C#; -- Register Offset
  constant kFLASH_WRITE_DATA_REGSize: integer := 32;  -- register width in bits
  constant kFLASH_WRITE_DATA_REGMask : std_logic_vector(31 downto 0) := X"ffffffff";
  constant kFLASH_WRITE_DATASize       : integer := 32;  --FLASH_WRITE_DATA_REG:FLASH_WRITE_DATA
  constant kFLASH_WRITE_DATAMsb        : integer := 31;  --FLASH_WRITE_DATA_REG:FLASH_WRITE_DATA
  constant kFLASH_WRITE_DATA           : integer :=  0;  --FLASH_WRITE_DATA_REG:FLASH_WRITE_DATA
  --function kFLASH_WRITE_DATA_REGRec return XReg2_t; -- Register Record function commented out due to programmable attributes

  -- FLASH_READ_DATA_REG Register (from reconfig_engine.v)
  constant kFLASH_READ_DATA_REG : integer := 16#10#; -- Register Offset
  constant kFLASH_READ_DATA_REGSize: integer := 32;  -- register width in bits
  constant kFLASH_READ_DATA_REGMask : std_logic_vector(31 downto 0) := X"ffffffff";
  constant kFLASH_READ_DATASize       : integer := 32;  --FLASH_READ_DATA_REG:FLASH_READ_DATA
  constant kFLASH_READ_DATAMsb        : integer := 31;  --FLASH_READ_DATA_REG:FLASH_READ_DATA
  constant kFLASH_READ_DATA           : integer :=  0;  --FLASH_READ_DATA_REG:FLASH_READ_DATA
  --function kFLASH_READ_DATA_REGRec return XReg2_t; -- Register Record function commented out due to programmable attributes

  -- FLASH_CFM0_START_ADDR_REG Register (from reconfig_engine.v)
  constant kFLASH_CFM0_START_ADDR_REG : integer := 16#14#; -- Register Offset
  constant kFLASH_CFM0_START_ADDR_REGSize: integer := 32;  -- register width in bits
  constant kFLASH_CFM0_START_ADDR_REGMask : std_logic_vector(31 downto 0) := X"ffffffff";
  constant kFLASH_CFM0_START_ADDRSize       : integer := 32;  --FLASH_CFM0_START_ADDR_REG:FLASH_CFM0_START_ADDR
  constant kFLASH_CFM0_START_ADDRMsb        : integer := 31;  --FLASH_CFM0_START_ADDR_REG:FLASH_CFM0_START_ADDR
  constant kFLASH_CFM0_START_ADDR           : integer :=  0;  --FLASH_CFM0_START_ADDR_REG:FLASH_CFM0_START_ADDR
  --function kFLASH_CFM0_START_ADDR_REGRec return XReg2_t; -- Register Record function commented out due to programmable attributes

  -- FLASH_CFM0_END_ADDR_REG Register (from reconfig_engine.v)
  constant kFLASH_CFM0_END_ADDR_REG : integer := 16#18#; -- Register Offset
  constant kFLASH_CFM0_END_ADDR_REGSize: integer := 32;  -- register width in bits
  constant kFLASH_CFM0_END_ADDR_REGMask : std_logic_vector(31 downto 0) := X"ffffffff";
  constant kFLASH_CFM0_END_ADDRSize       : integer := 32;  --FLASH_CFM0_END_ADDR_REG:FLASH_CFM0_END_ADDR
  constant kFLASH_CFM0_END_ADDRMsb        : integer := 31;  --FLASH_CFM0_END_ADDR_REG:FLASH_CFM0_END_ADDR
  constant kFLASH_CFM0_END_ADDR           : integer :=  0;  --FLASH_CFM0_END_ADDR_REG:FLASH_CFM0_END_ADDR
  --function kFLASH_CFM0_END_ADDR_REGRec return XReg2_t; -- Register Record function commented out due to programmable attributes

end package;

package body PkgRECONFIG_REGMAP is

  -- function kFLASH_STATUS_REGRec not implemented because FLASH_STATUS_REG has programmable attributes
  ---- Return the record of register kFLASH_STATUS_REG
  --function kFLASH_STATUS_REGRec return XReg2_t is
  --  variable Rec : XReg2_t;
  --begin
  --  Rec := kXRegDefault;
  --  Rec.version := 1;
  --  Rec.offset := XAddrResize(X"0");
  --  Rec.size := 32;
  --  Rec.readable := true;
  --  Rec.writable := false;
  --  Rec.wmask := XRegResize(X"00013331");
  --  Rec.rmask := XRegResize(X"00013331");
  --  Rec.strobemask := XRegResize(X"00000000");
  --  Rec.clearablemask := XRegResize(X"00000000");
  --  -- no initial values specified
  --  -- Single-bit bitfields are not listed here because the default for msblookup* is msb=lsb.
  --  Rec.isreg := true;
  --  --synopsys translate_off
  --  Rec.name := rs("FLASH_STATUS_REG");
  --  --synopsys translate_on
  --  return Rec;
  --end function kFLASH_STATUS_REGRec;

  -- function kFLASH_CONTROL_REGRec not implemented because FLASH_CONTROL_REG has programmable attributes
  ---- Return the record of register kFLASH_CONTROL_REG
  --function kFLASH_CONTROL_REGRec return XReg2_t is
  --  variable Rec : XReg2_t;
  --begin
  --  Rec := kXRegDefault;
  --  Rec.version := 1;
  --  Rec.offset := XAddrResize(X"4");
  --  Rec.size := 32;
  --  Rec.readable := false;
  --  Rec.writable := true;
  --  Rec.wmask := XRegResize(X"000007ff");
  --  Rec.rmask := XRegResize(X"00000000");
  --  Rec.strobemask := XRegResize(X"000007ff");
  --  Rec.clearablemask := XRegResize(X"00000000");
  --  -- no initial values specified
  --  -- Single-bit bitfields are not listed here because the default for msblookup* is msb=lsb.
  --  Rec.msblookupw(kFLASH_ERASE_SECTOR) := kFLASH_ERASE_SECTORMsb;
  --  Rec.isreg := true;
  --  --synopsys translate_off
  --  Rec.name := rs("FLASH_CONTROL_REG");
  --  --synopsys translate_on
  --  return Rec;
  --end function kFLASH_CONTROL_REGRec;

  -- function kFLASH_ADDR_REGRec not implemented because FLASH_ADDR_REG has programmable attributes
  ---- Return the record of register kFLASH_ADDR_REG
  --function kFLASH_ADDR_REGRec return XReg2_t is
  --  variable Rec : XReg2_t;
  --begin
  --  Rec := kXRegDefault;
  --  Rec.version := 1;
  --  Rec.offset := XAddrResize(X"8");
  --  Rec.size := 32;
  --  Rec.readable := true;
  --  Rec.writable := true;
  --  Rec.wmask := XRegResize(X"0001ffff");
  --  Rec.rmask := XRegResize(X"0001ffff");
  --  Rec.strobemask := XRegResize(X"00000000");
  --  Rec.clearablemask := XRegResize(X"00000000");
  --  -- no initial values specified
  --  -- Single-bit bitfields are not listed here because the default for msblookup* is msb=lsb.
  --  Rec.msblookupw(kFLASH_ADDR) := kFLASH_ADDRMsb;
  --  Rec.msblookupr(kFLASH_ADDR) := kFLASH_ADDRMsb;
  --  Rec.isreg := true;
  --  --synopsys translate_off
  --  Rec.name := rs("FLASH_ADDR_REG");
  --  --synopsys translate_on
  --  return Rec;
  --end function kFLASH_ADDR_REGRec;

  -- function kFLASH_WRITE_DATA_REGRec not implemented because FLASH_WRITE_DATA_REG has programmable attributes
  ---- Return the record of register kFLASH_WRITE_DATA_REG
  --function kFLASH_WRITE_DATA_REGRec return XReg2_t is
  --  variable Rec : XReg2_t;
  --begin
  --  Rec := kXRegDefault;
  --  Rec.version := 1;
  --  Rec.offset := XAddrResize(X"C");
  --  Rec.size := 32;
  --  Rec.readable := false;
  --  Rec.writable := true;
  --  Rec.wmask := XRegResize(X"ffffffff");
  --  Rec.rmask := XRegResize(X"00000000");
  --  Rec.strobemask := XRegResize(X"00000000");
  --  Rec.clearablemask := XRegResize(X"00000000");
  --  -- no initial values specified
  --  -- Single-bit bitfields are not listed here because the default for msblookup* is msb=lsb.
  --  Rec.msblookupw(kFLASH_WRITE_DATA) := kFLASH_WRITE_DATAMsb;
  --  Rec.isreg := true;
  --  --synopsys translate_off
  --  Rec.name := rs("FLASH_WRITE_DATA_REG");
  --  --synopsys translate_on
  --  return Rec;
  --end function kFLASH_WRITE_DATA_REGRec;

  -- function kFLASH_READ_DATA_REGRec not implemented because FLASH_READ_DATA_REG has programmable attributes
  ---- Return the record of register kFLASH_READ_DATA_REG
  --function kFLASH_READ_DATA_REGRec return XReg2_t is
  --  variable Rec : XReg2_t;
  --begin
  --  Rec := kXRegDefault;
  --  Rec.version := 1;
  --  Rec.offset := XAddrResize(X"10");
  --  Rec.size := 32;
  --  Rec.readable := true;
  --  Rec.writable := false;
  --  Rec.wmask := XRegResize(X"ffffffff");
  --  Rec.rmask := XRegResize(X"ffffffff");
  --  Rec.strobemask := XRegResize(X"00000000");
  --  Rec.clearablemask := XRegResize(X"00000000");
  --  -- no initial values specified
  --  -- Single-bit bitfields are not listed here because the default for msblookup* is msb=lsb.
  --  Rec.msblookupw(kFLASH_READ_DATA) := kFLASH_READ_DATAMsb;
  --  Rec.msblookupr(kFLASH_READ_DATA) := kFLASH_READ_DATAMsb;
  --  Rec.isreg := true;
  --  --synopsys translate_off
  --  Rec.name := rs("FLASH_READ_DATA_REG");
  --  --synopsys translate_on
  --  return Rec;
  --end function kFLASH_READ_DATA_REGRec;

  -- function kFLASH_CFM0_START_ADDR_REGRec not implemented because FLASH_CFM0_START_ADDR_REG has programmable attributes
  ---- Return the record of register kFLASH_CFM0_START_ADDR_REG
  --function kFLASH_CFM0_START_ADDR_REGRec return XReg2_t is
  --  variable Rec : XReg2_t;
  --begin
  --  Rec := kXRegDefault;
  --  Rec.version := 1;
  --  Rec.offset := XAddrResize(X"14");
  --  Rec.size := 32;
  --  Rec.readable := true;
  --  Rec.writable := false;
  --  Rec.wmask := XRegResize(X"ffffffff");
  --  Rec.rmask := XRegResize(X"ffffffff");
  --  Rec.strobemask := XRegResize(X"00000000");
  --  Rec.clearablemask := XRegResize(X"00000000");
  --  -- no initial values specified
  --  -- Single-bit bitfields are not listed here because the default for msblookup* is msb=lsb.
  --  Rec.msblookupw(kFLASH_CFM0_START_ADDR) := kFLASH_CFM0_START_ADDRMsb;
  --  Rec.msblookupr(kFLASH_CFM0_START_ADDR) := kFLASH_CFM0_START_ADDRMsb;
  --  Rec.isreg := true;
  --  --synopsys translate_off
  --  Rec.name := rs("FLASH_CFM0_START_ADDR_REG");
  --  --synopsys translate_on
  --  return Rec;
  --end function kFLASH_CFM0_START_ADDR_REGRec;

  -- function kFLASH_CFM0_END_ADDR_REGRec not implemented because FLASH_CFM0_END_ADDR_REG has programmable attributes
  ---- Return the record of register kFLASH_CFM0_END_ADDR_REG
  --function kFLASH_CFM0_END_ADDR_REGRec return XReg2_t is
  --  variable Rec : XReg2_t;
  --begin
  --  Rec := kXRegDefault;
  --  Rec.version := 1;
  --  Rec.offset := XAddrResize(X"18");
  --  Rec.size := 32;
  --  Rec.readable := true;
  --  Rec.writable := false;
  --  Rec.wmask := XRegResize(X"ffffffff");
  --  Rec.rmask := XRegResize(X"ffffffff");
  --  Rec.strobemask := XRegResize(X"00000000");
  --  Rec.clearablemask := XRegResize(X"00000000");
  --  -- no initial values specified
  --  -- Single-bit bitfields are not listed here because the default for msblookup* is msb=lsb.
  --  Rec.msblookupw(kFLASH_CFM0_END_ADDR) := kFLASH_CFM0_END_ADDRMsb;
  --  Rec.msblookupr(kFLASH_CFM0_END_ADDR) := kFLASH_CFM0_END_ADDRMsb;
  --  Rec.isreg := true;
  --  --synopsys translate_off
  --  Rec.name := rs("FLASH_CFM0_END_ADDR_REG");
  --  --synopsys translate_on
  --  return Rec;
  --end function kFLASH_CFM0_END_ADDR_REGRec;

end package body;
