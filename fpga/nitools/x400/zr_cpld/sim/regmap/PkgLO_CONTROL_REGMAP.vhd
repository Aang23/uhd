---------------------------------------------------------------------
--
-- Copyright 2021 Ettus Research, A National Instruments Brand
-- SPDX-License-Identifier: LGPL-3.0-or-later
--
-- Module: PkgLO_CONTROL_REGMAP.vhd
--
-- Purpose:
--   The constants in this file are autogenerated by XmlParse.
--
----------------------------------------------------------------------
library ieee;
  use ieee.std_logic_1164.all;
  use ieee.numeric_std.all;

package PkgLO_CONTROL_REGMAP is

--===============================================================================
-- A numerically ordered list of registers and their HDL source files
--===============================================================================

  -- LO_SPI_SETUP/LO_SPI_STATUS : 0x0 (lo_control.v, lo_control.v)
  -- LO_PULSE_SYNC              : 0x4 (lo_control.v)

--===============================================================================
-- RegTypes
--===============================================================================

--===============================================================================
-- Register Group LO_SPI_REGISTERS
--===============================================================================

  -- Enumerated type LO_CHIP_SELECT
  constant kLO_CHIP_SELECTSize : integer := 8;
  constant kTX0_LO1 : integer := 0;  -- LO_CHIP_SELECT:TX0_LO1
  constant kTX0_LO2 : integer := 1;  -- LO_CHIP_SELECT:TX0_LO2
  constant kTX1_LO1 : integer := 2;  -- LO_CHIP_SELECT:TX1_LO1
  constant kTX1_LO2 : integer := 3;  -- LO_CHIP_SELECT:TX1_LO2
  constant kRX0_LO1 : integer := 4;  -- LO_CHIP_SELECT:RX0_LO1
  constant kRX0_LO2 : integer := 5;  -- LO_CHIP_SELECT:RX0_LO2
  constant kRX1_LO1 : integer := 6;  -- LO_CHIP_SELECT:RX1_LO1
  constant kRX1_LO2 : integer := 7;  -- LO_CHIP_SELECT:RX1_LO2

  -- LO_SPI_SETUP Register (from lo_control.v)
  constant kLO_SPI_SETUP : integer := 16#0#; -- Register Offset
  constant kLO_SPI_SETUPSize: integer := 32;  -- register width in bits
  constant kLO_SPI_SETUPMask : std_logic_vector(31 downto 0) := X"17ffffff";
  constant kLO_SPI_WT_DATASize       : integer := 16;  --LO_SPI_SETUP:LO_SPI_WT_DATA
  constant kLO_SPI_WT_DATAMsb        : integer := 15;  --LO_SPI_SETUP:LO_SPI_WT_DATA
  constant kLO_SPI_WT_DATA           : integer :=  0;  --LO_SPI_SETUP:LO_SPI_WT_DATA
  constant kLO_SPI_WT_ADDRSize       : integer :=  7;  --LO_SPI_SETUP:LO_SPI_WT_ADDR
  constant kLO_SPI_WT_ADDRMsb        : integer := 22;  --LO_SPI_SETUP:LO_SPI_WT_ADDR
  constant kLO_SPI_WT_ADDR           : integer := 16;  --LO_SPI_SETUP:LO_SPI_WT_ADDR
  constant kLO_SPI_RDSize       : integer :=  1;  --LO_SPI_SETUP:LO_SPI_RD
  constant kLO_SPI_RDMsb        : integer := 23;  --LO_SPI_SETUP:LO_SPI_RD
  constant kLO_SPI_RD           : integer := 23;  --LO_SPI_SETUP:LO_SPI_RD
  constant kLO_SELECTSize       : integer :=  3;  --LO_SPI_SETUP:LO_SELECT
  constant kLO_SELECTMsb        : integer := 26;  --LO_SPI_SETUP:LO_SELECT
  constant kLO_SELECT           : integer := 24;  --LO_SPI_SETUP:LO_SELECT
  constant kLO_SPI_START_TRANSACTIONSize       : integer :=  1;  --LO_SPI_SETUP:LO_SPI_START_TRANSACTION
  constant kLO_SPI_START_TRANSACTIONMsb        : integer := 28;  --LO_SPI_SETUP:LO_SPI_START_TRANSACTION
  constant kLO_SPI_START_TRANSACTION           : integer := 28;  --LO_SPI_SETUP:LO_SPI_START_TRANSACTION
  --function kLO_SPI_SETUPRec return XReg2_t; -- Register Record function commented out due to programmable attributes

  -- LO_SPI_STATUS Register (from lo_control.v)
  constant kLO_SPI_STATUS : integer := 16#0#; -- Register Offset
  constant kLO_SPI_STATUSSize: integer := 32;  -- register width in bits
  constant kLO_SPI_STATUSMask : std_logic_vector(31 downto 0) := X"c77fffff";
  constant kLO_SPI_RD_DATASize       : integer := 16;  --LO_SPI_STATUS:LO_SPI_RD_DATA
  constant kLO_SPI_RD_DATAMsb        : integer := 15;  --LO_SPI_STATUS:LO_SPI_RD_DATA
  constant kLO_SPI_RD_DATA           : integer :=  0;  --LO_SPI_STATUS:LO_SPI_RD_DATA
  constant kLO_SPI_RD_ADDRSize       : integer :=  7;  --LO_SPI_STATUS:LO_SPI_RD_ADDR
  constant kLO_SPI_RD_ADDRMsb        : integer := 22;  --LO_SPI_STATUS:LO_SPI_RD_ADDR
  constant kLO_SPI_RD_ADDR           : integer := 16;  --LO_SPI_STATUS:LO_SPI_RD_ADDR
  constant kLO_SELECT_STATUSSize       : integer :=  3;  --LO_SPI_STATUS:LO_SELECT_STATUS
  constant kLO_SELECT_STATUSMsb        : integer := 26;  --LO_SPI_STATUS:LO_SELECT_STATUS
  constant kLO_SELECT_STATUS           : integer := 24;  --LO_SPI_STATUS:LO_SELECT_STATUS
  constant kLO_SPI_READYSize       : integer :=  1;  --LO_SPI_STATUS:LO_SPI_READY
  constant kLO_SPI_READYMsb        : integer := 30;  --LO_SPI_STATUS:LO_SPI_READY
  constant kLO_SPI_READY           : integer := 30;  --LO_SPI_STATUS:LO_SPI_READY
  constant kLO_SPI_DATA_VALIDSize       : integer :=  1;  --LO_SPI_STATUS:LO_SPI_DATA_VALID
  constant kLO_SPI_DATA_VALIDMsb        : integer := 31;  --LO_SPI_STATUS:LO_SPI_DATA_VALID
  constant kLO_SPI_DATA_VALID           : integer := 31;  --LO_SPI_STATUS:LO_SPI_DATA_VALID
  --function kLO_SPI_STATUSRec return XReg2_t; -- Register Record function commented out due to programmable attributes

--===============================================================================
-- Register Group LO_SYNC_REGS
--===============================================================================

  -- LO_PULSE_SYNC Register (from lo_control.v)
  constant kLO_PULSE_SYNC : integer := 16#4#; -- Register Offset
  constant kLO_PULSE_SYNCSize: integer := 32;  -- register width in bits
  constant kLO_PULSE_SYNCMask : std_logic_vector(31 downto 0) := X"000001ff";
  constant kPULSE_TX0_LO1_SYNCSize       : integer := 1;  --LO_PULSE_SYNC:PULSE_TX0_LO1_SYNC
  constant kPULSE_TX0_LO1_SYNCMsb        : integer := 0;  --LO_PULSE_SYNC:PULSE_TX0_LO1_SYNC
  constant kPULSE_TX0_LO1_SYNC           : integer := 0;  --LO_PULSE_SYNC:PULSE_TX0_LO1_SYNC
  constant kPULSE_TX0_LO2_SYNCSize       : integer := 1;  --LO_PULSE_SYNC:PULSE_TX0_LO2_SYNC
  constant kPULSE_TX0_LO2_SYNCMsb        : integer := 1;  --LO_PULSE_SYNC:PULSE_TX0_LO2_SYNC
  constant kPULSE_TX0_LO2_SYNC           : integer := 1;  --LO_PULSE_SYNC:PULSE_TX0_LO2_SYNC
  constant kPULSE_TX1_LO1_SYNCSize       : integer := 1;  --LO_PULSE_SYNC:PULSE_TX1_LO1_SYNC
  constant kPULSE_TX1_LO1_SYNCMsb        : integer := 2;  --LO_PULSE_SYNC:PULSE_TX1_LO1_SYNC
  constant kPULSE_TX1_LO1_SYNC           : integer := 2;  --LO_PULSE_SYNC:PULSE_TX1_LO1_SYNC
  constant kPULSE_TX1_LO2_SYNCSize       : integer := 1;  --LO_PULSE_SYNC:PULSE_TX1_LO2_SYNC
  constant kPULSE_TX1_LO2_SYNCMsb        : integer := 3;  --LO_PULSE_SYNC:PULSE_TX1_LO2_SYNC
  constant kPULSE_TX1_LO2_SYNC           : integer := 3;  --LO_PULSE_SYNC:PULSE_TX1_LO2_SYNC
  constant kPULSE_RX0_LO1_SYNCSize       : integer := 1;  --LO_PULSE_SYNC:PULSE_RX0_LO1_SYNC
  constant kPULSE_RX0_LO1_SYNCMsb        : integer := 4;  --LO_PULSE_SYNC:PULSE_RX0_LO1_SYNC
  constant kPULSE_RX0_LO1_SYNC           : integer := 4;  --LO_PULSE_SYNC:PULSE_RX0_LO1_SYNC
  constant kPULSE_RX0_LO2_SYNCSize       : integer := 1;  --LO_PULSE_SYNC:PULSE_RX0_LO2_SYNC
  constant kPULSE_RX0_LO2_SYNCMsb        : integer := 5;  --LO_PULSE_SYNC:PULSE_RX0_LO2_SYNC
  constant kPULSE_RX0_LO2_SYNC           : integer := 5;  --LO_PULSE_SYNC:PULSE_RX0_LO2_SYNC
  constant kPULSE_RX1_LO1_SYNCSize       : integer := 1;  --LO_PULSE_SYNC:PULSE_RX1_LO1_SYNC
  constant kPULSE_RX1_LO1_SYNCMsb        : integer := 6;  --LO_PULSE_SYNC:PULSE_RX1_LO1_SYNC
  constant kPULSE_RX1_LO1_SYNC           : integer := 6;  --LO_PULSE_SYNC:PULSE_RX1_LO1_SYNC
  constant kPULSE_RX1_LO2_SYNCSize       : integer := 1;  --LO_PULSE_SYNC:PULSE_RX1_LO2_SYNC
  constant kPULSE_RX1_LO2_SYNCMsb        : integer := 7;  --LO_PULSE_SYNC:PULSE_RX1_LO2_SYNC
  constant kPULSE_RX1_LO2_SYNC           : integer := 7;  --LO_PULSE_SYNC:PULSE_RX1_LO2_SYNC
  constant kBYPASS_SYNC_REGISTERSize       : integer := 1;  --LO_PULSE_SYNC:BYPASS_SYNC_REGISTER
  constant kBYPASS_SYNC_REGISTERMsb        : integer := 8;  --LO_PULSE_SYNC:BYPASS_SYNC_REGISTER
  constant kBYPASS_SYNC_REGISTER           : integer := 8;  --LO_PULSE_SYNC:BYPASS_SYNC_REGISTER
  --function kLO_PULSE_SYNCRec return XReg2_t; -- Register Record function commented out due to programmable attributes

end package;

package body PkgLO_CONTROL_REGMAP is

  -- function kLO_SPI_SETUPRec not implemented because LO_SPI_SETUP has programmable attributes
  ---- Return the record of register kLO_SPI_SETUP
  --function kLO_SPI_SETUPRec return XReg2_t is
  --  variable Rec : XReg2_t;
  --begin
  --  Rec := kXRegDefault;
  --  Rec.version := 1;
  --  Rec.offset := XAddrResize(X"0");
  --  Rec.size := 32;
  --  Rec.readable := false;
  --  Rec.writable := true;
  --  Rec.wmask := XRegResize(X"17ffffff");
  --  Rec.rmask := XRegResize(X"00000000");
  --  Rec.strobemask := XRegResize(X"17000000");
  --  Rec.clearablemask := XRegResize(X"00000000");
  --  Rec.initialvalue := XRegResize(X"00000000");
  --  -- Single-bit bitfields are not listed here because the default for msblookup* is msb=lsb.
  --  Rec.msblookupw(kLO_SPI_WT_DATA) := kLO_SPI_WT_DATAMsb;
  --  Rec.msblookupw(kLO_SPI_WT_ADDR) := kLO_SPI_WT_ADDRMsb;
  --  Rec.msblookupw(kLO_SELECT) := kLO_SELECTMsb;
  --  Rec.isreg := true;
  --  --synopsys translate_off
  --  Rec.name := rs("LO_SPI_SETUP");
  --  --synopsys translate_on
  --  return Rec;
  --end function kLO_SPI_SETUPRec;

  -- function kLO_SPI_STATUSRec not implemented because LO_SPI_STATUS has programmable attributes
  ---- Return the record of register kLO_SPI_STATUS
  --function kLO_SPI_STATUSRec return XReg2_t is
  --  variable Rec : XReg2_t;
  --begin
  --  Rec := kXRegDefault;
  --  Rec.version := 1;
  --  Rec.offset := XAddrResize(X"0");
  --  Rec.size := 32;
  --  Rec.readable := true;
  --  Rec.writable := false;
  --  Rec.wmask := XRegResize(X"c77fffff");
  --  Rec.rmask := XRegResize(X"c77fffff");
  --  Rec.strobemask := XRegResize(X"00000000");
  --  Rec.clearablemask := XRegResize(X"00000000");
  --  Rec.initialvalue := XRegResize(X"00000000");
  --  -- Single-bit bitfields are not listed here because the default for msblookup* is msb=lsb.
  --  Rec.msblookupw(kLO_SPI_RD_DATA) := kLO_SPI_RD_DATAMsb;
  --  Rec.msblookupw(kLO_SPI_RD_ADDR) := kLO_SPI_RD_ADDRMsb;
  --  Rec.msblookupw(kLO_SELECT_STATUS) := kLO_SELECT_STATUSMsb;
  --  Rec.msblookupr(kLO_SPI_RD_DATA) := kLO_SPI_RD_DATAMsb;
  --  Rec.msblookupr(kLO_SPI_RD_ADDR) := kLO_SPI_RD_ADDRMsb;
  --  Rec.msblookupr(kLO_SELECT_STATUS) := kLO_SELECT_STATUSMsb;
  --  Rec.isreg := true;
  --  --synopsys translate_off
  --  Rec.name := rs("LO_SPI_STATUS");
  --  --synopsys translate_on
  --  return Rec;
  --end function kLO_SPI_STATUSRec;

  -- function kLO_PULSE_SYNCRec not implemented because LO_PULSE_SYNC has programmable attributes
  ---- Return the record of register kLO_PULSE_SYNC
  --function kLO_PULSE_SYNCRec return XReg2_t is
  --  variable Rec : XReg2_t;
  --begin
  --  Rec := kXRegDefault;
  --  Rec.version := 1;
  --  Rec.offset := XAddrResize(X"4");
  --  Rec.size := 32;
  --  Rec.readable := false;
  --  Rec.writable := true;
  --  Rec.wmask := XRegResize(X"000001ff");
  --  Rec.rmask := XRegResize(X"00000000");
  --  Rec.strobemask := XRegResize(X"000000ff");
  --  Rec.clearablemask := XRegResize(X"00000000");
  --  Rec.initialvalue := XRegResize(X"00000000");
  --  -- Single-bit bitfields are not listed here because the default for msblookup* is msb=lsb.
  --  Rec.isreg := true;
  --  --synopsys translate_off
  --  Rec.name := rs("LO_PULSE_SYNC");
  --  --synopsys translate_on
  --  return Rec;
  --end function kLO_PULSE_SYNCRec;

end package body;
