---------------------------------------------------------------------
--
-- Copyright 2021 Ettus Research, A National Instruments Brand
-- SPDX-License-Identifier: LGPL-3.0-or-later
--
-- Module: PkgPS_POWER_REGMAP.vhd
--
-- Purpose:
--   The constants in this file are autogenerated by XmlParse.
--
----------------------------------------------------------------------
library ieee;
  use ieee.std_logic_1164.all;
  use ieee.numeric_std.all;

package PkgPS_POWER_REGMAP is

--===============================================================================
-- A numerically ordered list of registers and their HDL source files
--===============================================================================

  -- IPASS_POWER_REG : 0x0 (ps_power_regs.v)
  -- OSC_POWER_REG   : 0x4 (ps_power_regs.v)

--===============================================================================
-- RegTypes
--===============================================================================

--===============================================================================
-- Register Group PS_POWER_REGS
--===============================================================================

  -- IPASS_POWER_REG Register (from ps_power_regs.v)
  constant kIPASS_POWER_REG : integer := 16#0#; -- Register Offset
  constant kIPASS_POWER_REGSize: integer := 32;  -- register width in bits
  constant kIPASS_POWER_REGMask : std_logic_vector(31 downto 0) := X"c0000001";
  constant kIPASS_DISABLE_POWER_BITSize       : integer := 1;  --IPASS_POWER_REG:IPASS_DISABLE_POWER_BIT
  constant kIPASS_DISABLE_POWER_BITMsb        : integer := 0;  --IPASS_POWER_REG:IPASS_DISABLE_POWER_BIT
  constant kIPASS_DISABLE_POWER_BIT           : integer := 0;  --IPASS_POWER_REG:IPASS_DISABLE_POWER_BIT
  constant kIPASS_CLEAR_POWER_FAULT0Size       : integer :=  1;  --IPASS_POWER_REG:IPASS_CLEAR_POWER_FAULT0
  constant kIPASS_CLEAR_POWER_FAULT0Msb        : integer := 30;  --IPASS_POWER_REG:IPASS_CLEAR_POWER_FAULT0
  constant kIPASS_CLEAR_POWER_FAULT0           : integer := 30;  --IPASS_POWER_REG:IPASS_CLEAR_POWER_FAULT0
  constant kIPASS_POWER_FAULT0Size       : integer :=  1;  --IPASS_POWER_REG:IPASS_POWER_FAULT0
  constant kIPASS_POWER_FAULT0Msb        : integer := 30;  --IPASS_POWER_REG:IPASS_POWER_FAULT0
  constant kIPASS_POWER_FAULT0           : integer := 30;  --IPASS_POWER_REG:IPASS_POWER_FAULT0
  constant kIPASS_CLEAR_POWER_FAULT1Size       : integer :=  1;  --IPASS_POWER_REG:IPASS_CLEAR_POWER_FAULT1
  constant kIPASS_CLEAR_POWER_FAULT1Msb        : integer := 31;  --IPASS_POWER_REG:IPASS_CLEAR_POWER_FAULT1
  constant kIPASS_CLEAR_POWER_FAULT1           : integer := 31;  --IPASS_POWER_REG:IPASS_CLEAR_POWER_FAULT1
  constant kIPASS_POWER_FAULT1Size       : integer :=  1;  --IPASS_POWER_REG:IPASS_POWER_FAULT1
  constant kIPASS_POWER_FAULT1Msb        : integer := 31;  --IPASS_POWER_REG:IPASS_POWER_FAULT1
  constant kIPASS_POWER_FAULT1           : integer := 31;  --IPASS_POWER_REG:IPASS_POWER_FAULT1
  --function kIPASS_POWER_REGRec return XReg2_t; -- Register Record function commented out due to programmable attributes

  -- OSC_POWER_REG Register (from ps_power_regs.v)
  constant kOSC_POWER_REG : integer := 16#4#; -- Register Offset
  constant kOSC_POWER_REGSize: integer := 32;  -- register width in bits
  constant kOSC_POWER_REGMask : std_logic_vector(31 downto 0) := X"00000003";
  constant kOSC_100Size       : integer := 1;  --OSC_POWER_REG:OSC_100
  constant kOSC_100Msb        : integer := 0;  --OSC_POWER_REG:OSC_100
  constant kOSC_100           : integer := 0;  --OSC_POWER_REG:OSC_100
  constant kOSC_122_88Size       : integer := 1;  --OSC_POWER_REG:OSC_122_88
  constant kOSC_122_88Msb        : integer := 1;  --OSC_POWER_REG:OSC_122_88
  constant kOSC_122_88           : integer := 1;  --OSC_POWER_REG:OSC_122_88
  --function kOSC_POWER_REGRec return XReg2_t; -- Register Record function commented out due to programmable attributes

end package;

package body PkgPS_POWER_REGMAP is

  -- function kIPASS_POWER_REGRec not implemented because IPASS_POWER_REG has programmable attributes
  ---- Return the record of register kIPASS_POWER_REG
  --function kIPASS_POWER_REGRec return XReg2_t is
  --  variable Rec : XReg2_t;
  --begin
  --  Rec := kXRegDefault;
  --  Rec.version := 1;
  --  Rec.offset := XAddrResize(X"0");
  --  Rec.size := 32;
  --  Rec.readable := true;
  --  Rec.writable := true;
  --  Rec.wmask := XRegResize(X"c0000001");
  --  Rec.rmask := XRegResize(X"c0000001");
  --  Rec.strobemask := XRegResize(X"00000000");
  --  Rec.clearablemask := XRegResize(X"00000000");
  --  -- no initial values specified
  --  -- Single-bit bitfields are not listed here because the default for msblookup* is msb=lsb.
  --  Rec.isreg := true;
  --  --synopsys translate_off
  --  Rec.name := rs("IPASS_POWER_REG");
  --  --synopsys translate_on
  --  return Rec;
  --end function kIPASS_POWER_REGRec;

  -- function kOSC_POWER_REGRec not implemented because OSC_POWER_REG has programmable attributes
  ---- Return the record of register kOSC_POWER_REG
  --function kOSC_POWER_REGRec return XReg2_t is
  --  variable Rec : XReg2_t;
  --begin
  --  Rec := kXRegDefault;
  --  Rec.version := 1;
  --  Rec.offset := XAddrResize(X"4");
  --  Rec.size := 32;
  --  Rec.readable := true;
  --  Rec.writable := true;
  --  Rec.wmask := XRegResize(X"00000003");
  --  Rec.rmask := XRegResize(X"00000003");
  --  Rec.strobemask := XRegResize(X"00000000");
  --  Rec.clearablemask := XRegResize(X"00000000");
  --  -- no initial values specified
  --  -- Single-bit bitfields are not listed here because the default for msblookup* is msb=lsb.
  --  Rec.isreg := true;
  --  --synopsys translate_off
  --  Rec.name := rs("OSC_POWER_REG");
  --  --synopsys translate_on
  --  return Rec;
  --end function kOSC_POWER_REGRec;

end package body;
