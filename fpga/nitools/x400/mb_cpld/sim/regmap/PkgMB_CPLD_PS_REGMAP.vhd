---------------------------------------------------------------------
--
-- Copyright 2021 Ettus Research, A National Instruments Brand
-- SPDX-License-Identifier: LGPL-3.0-or-later
--
-- Module: PkgMB_CPLD_PS_REGMAP.vhd
--
-- Purpose:
--   The constants in this file are autogenerated by XmlParse.
--
----------------------------------------------------------------------
library ieee;
  use ieee.std_logic_1164.all;
  use ieee.numeric_std.all;

package PkgMB_CPLD_PS_REGMAP is

--===============================================================================
-- A numerically ordered list of registers and their HDL source files
--===============================================================================

  -- PS_REGISTERS    : 0x0 (mb_cpld.v)
  -- RECONFIG        : 0x40 (mb_cpld.v)
  -- POWER_REGISTERS : 0x60 (mb_cpld.v)

--===============================================================================
-- RegTypes
--===============================================================================

--===============================================================================
-- Register Group MB_CPLD_PS_WINDOWS
--===============================================================================

  -- PS_REGISTERS Window (from mb_cpld.v)
  constant kPS_REGISTERS : integer := 16#0#; -- Window Offset
  constant kPS_REGISTERSSize: integer := 16#40#;  -- size in bytes
  --function kPS_REGISTERSRec return XReg2_t; -- Window Record function commented out due to programmable attributes

  -- RECONFIG Window (from mb_cpld.v)
  constant kRECONFIG : integer := 16#40#; -- Window Offset
  constant kRECONFIGSize: integer := 16#20#;  -- size in bytes
  --function kRECONFIGRec return XReg2_t; -- Window Record function commented out due to programmable attributes

  -- POWER_REGISTERS Window (from mb_cpld.v)
  constant kPOWER_REGISTERS : integer := 16#60#; -- Window Offset
  constant kPOWER_REGISTERSSize: integer := 16#20#;  -- size in bytes
  --function kPOWER_REGISTERSRec return XReg2_t; -- Window Record function commented out due to programmable attributes

--===============================================================================
-- Register Group PS_SPI_ENDPOINTS
--===============================================================================

  -- Enumerated type SPI_ENDPOINT
  constant kSPI_ENDPOINTSize : integer := 8;
  constant kPS_CS_MB_CPLD        : integer := 0;  -- SPI_ENDPOINT:PS_CS_MB_CPLD
  constant kPS_CS_LMK32          : integer := 1;  -- SPI_ENDPOINT:PS_CS_LMK32
  constant kPS_CS_TPM            : integer := 2;  -- SPI_ENDPOINT:PS_CS_TPM
  constant kPS_CS_PHASE_DAC      : integer := 3;  -- SPI_ENDPOINT:PS_CS_PHASE_DAC
  constant kPS_CS_DB0_CAL_EEPROM : integer := 4;  -- SPI_ENDPOINT:PS_CS_DB0_CAL_EEPROM
  constant kPS_CS_DB1_CAL_EEPROM : integer := 5;  -- SPI_ENDPOINT:PS_CS_DB1_CAL_EEPROM
  constant kPS_CS_CLK_AUX_DB     : integer := 6;  -- SPI_ENDPOINT:PS_CS_CLK_AUX_DB
  constant kPS_CS_IDLE           : integer := 7;  -- SPI_ENDPOINT:PS_CS_IDLE

end package;

package body PkgMB_CPLD_PS_REGMAP is

  -- function kPS_REGISTERSRec not implemented because PS_REGISTERS has programmable attributes
  ---- Return the record of window kPS_REGISTERS
  --function kPS_REGISTERSRec return XReg2_t is
  --  variable Rec : XReg2_t;
  --begin
  --  Rec := kXRegDefault;
  --  Rec.version := 1;
  --  Rec.offset := XAddrResize(X"0");
  --  Rec.size := kPS_REGISTERSSize;
  --  Rec.readable := true;
  --  Rec.writable := true;
  --  Rec.wmask := XRegResize(X"00");
  --  Rec.rmask := XRegResize(X"00");
  --  Rec.strobemask := XRegResize(X"00");
  --  Rec.clearablemask := XRegResize(X"00");
  --  Rec.iswin := true;
  --  --synopsys translate_off
  --  Rec.name := rs("PS_REGISTERS");
  --  --synopsys translate_on
  --  return Rec;
  --end function kPS_REGISTERSRec;

  -- function kRECONFIGRec not implemented because RECONFIG has programmable attributes
  ---- Return the record of window kRECONFIG
  --function kRECONFIGRec return XReg2_t is
  --  variable Rec : XReg2_t;
  --begin
  --  Rec := kXRegDefault;
  --  Rec.version := 1;
  --  Rec.offset := XAddrResize(X"40");
  --  Rec.size := kRECONFIGSize;
  --  Rec.readable := true;
  --  Rec.writable := true;
  --  Rec.wmask := XRegResize(X"00");
  --  Rec.rmask := XRegResize(X"00");
  --  Rec.strobemask := XRegResize(X"00");
  --  Rec.clearablemask := XRegResize(X"00");
  --  Rec.iswin := true;
  --  --synopsys translate_off
  --  Rec.name := rs("RECONFIG");
  --  --synopsys translate_on
  --  return Rec;
  --end function kRECONFIGRec;

  -- function kPOWER_REGISTERSRec not implemented because POWER_REGISTERS has programmable attributes
  ---- Return the record of window kPOWER_REGISTERS
  --function kPOWER_REGISTERSRec return XReg2_t is
  --  variable Rec : XReg2_t;
  --begin
  --  Rec := kXRegDefault;
  --  Rec.version := 1;
  --  Rec.offset := XAddrResize(X"60");
  --  Rec.size := kPOWER_REGISTERSSize;
  --  Rec.readable := true;
  --  Rec.writable := true;
  --  Rec.wmask := XRegResize(X"00");
  --  Rec.rmask := XRegResize(X"00");
  --  Rec.strobemask := XRegResize(X"00");
  --  Rec.clearablemask := XRegResize(X"00");
  --  Rec.iswin := true;
  --  --synopsys translate_off
  --  Rec.name := rs("POWER_REGISTERS");
  --  --synopsys translate_on
  --  return Rec;
  --end function kPOWER_REGISTERSRec;

end package body;
