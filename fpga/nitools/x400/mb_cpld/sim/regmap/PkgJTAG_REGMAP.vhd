---------------------------------------------------------------------
--
-- Copyright 2021 Ettus Research, A National Instruments Brand
-- SPDX-License-Identifier: LGPL-3.0-or-later
--
-- Module: PkgJTAG_REGMAP.vhd
--
-- Purpose:
--   The constants in this file are autogenerated by XmlParse.
--
----------------------------------------------------------------------
library ieee;
  use ieee.std_logic_1164.all;
  use ieee.numeric_std.all;

package PkgJTAG_REGMAP is

--===============================================================================
-- A numerically ordered list of registers and their HDL source files
--===============================================================================

  -- TX_DATA  : 0x0 (ctrlport_to_jtag.v)
  -- STB_DATA : 0x4 (ctrlport_to_jtag.v)
  -- CONTROL  : 0x8 (ctrlport_to_jtag.v)
  -- RX_DATA  : 0xC (ctrlport_to_jtag.v)

--===============================================================================
-- RegTypes
--===============================================================================

--===============================================================================
-- Register Group JTAG_REGS
--===============================================================================

  -- TX_DATA Register (from ctrlport_to_jtag.v)
  constant kTX_DATA : integer := 16#0#; -- Register Offset
  constant kTX_DATASize: integer := 32;  -- register width in bits
  constant kTX_DATAMask : std_logic_vector(31 downto 0) := X"00000000";
  --function kTX_DATARec return XReg2_t; -- Register Record function commented out due to programmable attributes

  -- STB_DATA Register (from ctrlport_to_jtag.v)
  constant kSTB_DATA : integer := 16#4#; -- Register Offset
  constant kSTB_DATASize: integer := 32;  -- register width in bits
  constant kSTB_DATAMask : std_logic_vector(31 downto 0) := X"00000000";
  --function kSTB_DATARec return XReg2_t; -- Register Record function commented out due to programmable attributes

  -- CONTROL Register (from ctrlport_to_jtag.v)
  constant kCONTROL : integer := 16#8#; -- Register Offset
  constant kCONTROLSize: integer := 32;  -- register width in bits
  constant kCONTROLMask : std_logic_vector(31 downto 0) := X"80001fff";
  constant kprescalarSize       : integer := 8;  --CONTROL:prescalar
  constant kprescalarMsb        : integer := 7;  --CONTROL:prescalar
  constant kprescalar           : integer := 0;  --CONTROL:prescalar
  constant klengthSize       : integer :=  5;  --CONTROL:length
  constant klengthMsb        : integer := 12;  --CONTROL:length
  constant klength           : integer :=  8;  --CONTROL:length
  constant kresetSize       : integer :=  1;  --CONTROL:reset
  constant kresetMsb        : integer := 31;  --CONTROL:reset
  constant kreset           : integer := 31;  --CONTROL:reset
  constant kreadySize       : integer :=  1;  --CONTROL:ready
  constant kreadyMsb        : integer := 31;  --CONTROL:ready
  constant kready           : integer := 31;  --CONTROL:ready
  --function kCONTROLRec return XReg2_t; -- Register Record function commented out due to programmable attributes

  -- RX_DATA Register (from ctrlport_to_jtag.v)
  constant kRX_DATA : integer := 16#C#; -- Register Offset
  constant kRX_DATASize: integer := 32;  -- register width in bits
  constant kRX_DATAMask : std_logic_vector(31 downto 0) := X"00000000";
  --function kRX_DATARec return XReg2_t; -- Register Record function commented out due to programmable attributes

end package;

package body PkgJTAG_REGMAP is

  -- function kTX_DATARec not implemented because TX_DATA has programmable attributes
  ---- Return the record of register kTX_DATA
  --function kTX_DATARec return XReg2_t is
  --  variable Rec : XReg2_t;
  --begin
  --  Rec := kXRegDefault;
  --  Rec.version := 1;
  --  Rec.offset := XAddrResize(X"0");
  --  Rec.size := 32;
  --  Rec.readable := false;
  --  Rec.writable := true;
  --  Rec.wmask := XRegResize(X"ffffffff");
  --  Rec.rmask := XRegResize(X"00000000");
  --  Rec.strobemask := XRegResize(X"00000000");
  --  Rec.clearablemask := XRegResize(X"00000000");
  --  -- no initial values specified
  --  -- no bitfields specified
  --  Rec.isreg := true;
  --  --synopsys translate_off
  --  Rec.name := rs("TX_DATA");
  --  --synopsys translate_on
  --  return Rec;
  --end function kTX_DATARec;

  -- function kSTB_DATARec not implemented because STB_DATA has programmable attributes
  ---- Return the record of register kSTB_DATA
  --function kSTB_DATARec return XReg2_t is
  --  variable Rec : XReg2_t;
  --begin
  --  Rec := kXRegDefault;
  --  Rec.version := 1;
  --  Rec.offset := XAddrResize(X"4");
  --  Rec.size := 32;
  --  Rec.readable := false;
  --  Rec.writable := true;
  --  Rec.wmask := XRegResize(X"ffffffff");
  --  Rec.rmask := XRegResize(X"00000000");
  --  Rec.strobemask := XRegResize(X"00000000");
  --  Rec.clearablemask := XRegResize(X"00000000");
  --  -- no initial values specified
  --  -- no bitfields specified
  --  Rec.isreg := true;
  --  --synopsys translate_off
  --  Rec.name := rs("STB_DATA");
  --  --synopsys translate_on
  --  return Rec;
  --end function kSTB_DATARec;

  -- function kCONTROLRec not implemented because CONTROL has programmable attributes
  ---- Return the record of register kCONTROL
  --function kCONTROLRec return XReg2_t is
  --  variable Rec : XReg2_t;
  --begin
  --  Rec := kXRegDefault;
  --  Rec.version := 1;
  --  Rec.offset := XAddrResize(X"8");
  --  Rec.size := 32;
  --  Rec.readable := true;
  --  Rec.writable := true;
  --  Rec.wmask := XRegResize(X"80001fff");
  --  Rec.rmask := XRegResize(X"80001fff");
  --  Rec.strobemask := XRegResize(X"00000000");
  --  Rec.clearablemask := XRegResize(X"00000000");
  --  Rec.initialvalue := XRegResize(X"00000001");
  --  -- Single-bit bitfields are not listed here because the default for msblookup* is msb=lsb.
  --  Rec.msblookupw(kprescalar) := kprescalarMsb;
  --  Rec.msblookupw(klength) := klengthMsb;
  --  Rec.msblookupr(kprescalar) := kprescalarMsb;
  --  Rec.msblookupr(klength) := klengthMsb;
  --  Rec.isreg := true;
  --  --synopsys translate_off
  --  Rec.name := rs("CONTROL");
  --  --synopsys translate_on
  --  return Rec;
  --end function kCONTROLRec;

  -- function kRX_DATARec not implemented because RX_DATA has programmable attributes
  ---- Return the record of register kRX_DATA
  --function kRX_DATARec return XReg2_t is
  --  variable Rec : XReg2_t;
  --begin
  --  Rec := kXRegDefault;
  --  Rec.version := 1;
  --  Rec.offset := XAddrResize(X"C");
  --  Rec.size := 32;
  --  Rec.readable := true;
  --  Rec.writable := false;
  --  Rec.wmask := XRegResize(X"00000000");
  --  Rec.rmask := XRegResize(X"ffffffff");
  --  Rec.strobemask := XRegResize(X"00000000");
  --  Rec.clearablemask := XRegResize(X"00000000");
  --  -- no initial values specified
  --  -- no bitfields specified
  --  Rec.isreg := true;
  --  --synopsys translate_off
  --  Rec.name := rs("RX_DATA");
  --  --synopsys translate_on
  --  return Rec;
  --end function kRX_DATARec;

end package body;
