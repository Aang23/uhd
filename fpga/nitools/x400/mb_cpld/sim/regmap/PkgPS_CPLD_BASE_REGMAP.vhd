---------------------------------------------------------------------
--
-- Copyright 2021 Ettus Research, A National Instruments Brand
-- SPDX-License-Identifier: LGPL-3.0-or-later
--
-- Module: PkgPS_CPLD_BASE_REGMAP.vhd
--
-- Purpose:
--   The constants in this file are autogenerated by XmlParse.
--
----------------------------------------------------------------------
library ieee;
  use ieee.std_logic_1164.all;
  use ieee.numeric_std.all;

package PkgPS_CPLD_BASE_REGMAP is

--===============================================================================
-- A numerically ordered list of registers and their HDL source files
--===============================================================================

  -- SIGNATURE_REGISTER                  : 0x0 (ps_cpld_regs.v)
  -- REVISION_REGISTER                   : 0x4 (ps_cpld_regs.v)
  -- OLDEST_COMPATIBLE_REVISION_REGISTER : 0x8 (ps_cpld_regs.v)
  -- SCRATCH_REGISTER                    : 0xC (ps_cpld_regs.v)
  -- GIT_HASH_REGISTER                   : 0x10 (ps_cpld_regs.v)
  -- PL_DB_REGISTER                      : 0x20 (ps_cpld_regs.v)
  -- DIO_DIRECTION_REGISTER              : 0x30 (ps_cpld_regs.v)
  -- SERIAL_NUM_LOW_REG                  : 0x34 (ps_cpld_regs.v)
  -- SERIAL_NUM_HIGH_REG                 : 0x38 (ps_cpld_regs.v)
  -- CMI_CONTROL_STATUS                  : 0x3C (ps_cpld_regs.v)

--===============================================================================
-- RegTypes
--===============================================================================

--===============================================================================
-- Register Group DIO_REGS
--===============================================================================

  -- DIO_DIRECTION_REGISTER Register (from ps_cpld_regs.v)
  constant kDIO_DIRECTION_REGISTER : integer := 16#30#; -- Register Offset
  constant kDIO_DIRECTION_REGISTERSize: integer := 32;  -- register width in bits
  constant kDIO_DIRECTION_REGISTERMask : std_logic_vector(31 downto 0) := X"0fff0fff";
  constant kDIO_DIRECTION_ASize       : integer := 12;  --DIO_DIRECTION_REGISTER:DIO_DIRECTION_A
  constant kDIO_DIRECTION_AMsb        : integer := 11;  --DIO_DIRECTION_REGISTER:DIO_DIRECTION_A
  constant kDIO_DIRECTION_A           : integer :=  0;  --DIO_DIRECTION_REGISTER:DIO_DIRECTION_A
  constant kDIO_DIRECTION_BSize       : integer := 12;  --DIO_DIRECTION_REGISTER:DIO_DIRECTION_B
  constant kDIO_DIRECTION_BMsb        : integer := 27;  --DIO_DIRECTION_REGISTER:DIO_DIRECTION_B
  constant kDIO_DIRECTION_B           : integer := 16;  --DIO_DIRECTION_REGISTER:DIO_DIRECTION_B
  --function kDIO_DIRECTION_REGISTERRec return XReg2_t; -- Register Record function commented out due to programmable attributes

--===============================================================================
-- Register Group PS_CMI_REGS
--===============================================================================

  -- SERIAL_NUM_LOW_REG Register (from ps_cpld_regs.v)
  constant kSERIAL_NUM_LOW_REG : integer := 16#34#; -- Register Offset
  constant kSERIAL_NUM_LOW_REGSize: integer := 32;  -- register width in bits
  constant kSERIAL_NUM_LOW_REGMask : std_logic_vector(31 downto 0) := X"00000000";
  --function kSERIAL_NUM_LOW_REGRec return XReg2_t; -- Register Record function commented out due to programmable attributes

  -- SERIAL_NUM_HIGH_REG Register (from ps_cpld_regs.v)
  constant kSERIAL_NUM_HIGH_REG : integer := 16#38#; -- Register Offset
  constant kSERIAL_NUM_HIGH_REGSize: integer := 8;  -- register width in bits
  constant kSERIAL_NUM_HIGH_REGMask : std_logic_vector(7 downto 0) := X"00";
  --function kSERIAL_NUM_HIGH_REGRec return XReg2_t; -- Register Record function commented out due to programmable attributes

  -- CMI_CONTROL_STATUS Register (from ps_cpld_regs.v)
  constant kCMI_CONTROL_STATUS : integer := 16#3C#; -- Register Offset
  constant kCMI_CONTROL_STATUSSize: integer := 32;  -- register width in bits
  constant kCMI_CONTROL_STATUSMask : std_logic_vector(31 downto 0) := X"80000001";
  constant kCMI_READYSize       : integer := 1;  --CMI_CONTROL_STATUS:CMI_READY
  constant kCMI_READYMsb        : integer := 0;  --CMI_CONTROL_STATUS:CMI_READY
  constant kCMI_READY           : integer := 0;  --CMI_CONTROL_STATUS:CMI_READY
  constant kOTHER_SIDE_DETECTEDSize       : integer :=  1;  --CMI_CONTROL_STATUS:OTHER_SIDE_DETECTED
  constant kOTHER_SIDE_DETECTEDMsb        : integer := 31;  --CMI_CONTROL_STATUS:OTHER_SIDE_DETECTED
  constant kOTHER_SIDE_DETECTED           : integer := 31;  --CMI_CONTROL_STATUS:OTHER_SIDE_DETECTED
  --function kCMI_CONTROL_STATUSRec return XReg2_t; -- Register Record function commented out due to programmable attributes

--===============================================================================
-- Register Group PS_CONTROL_REGS
--===============================================================================

  -- PL_DB_REGISTER Register (from ps_cpld_regs.v)
  constant kPL_DB_REGISTER : integer := 16#20#; -- Register Offset
  constant kPL_DB_REGISTERSize: integer := 32;  -- register width in bits
  constant kPL_DB_REGISTERMask : std_logic_vector(31 downto 0) := X"00337737";
  constant kDB0_CLOCK_ENABLEDSize       : integer := 1;  --PL_DB_REGISTER:DB0_CLOCK_ENABLED
  constant kDB0_CLOCK_ENABLEDMsb        : integer := 0;  --PL_DB_REGISTER:DB0_CLOCK_ENABLED
  constant kDB0_CLOCK_ENABLED           : integer := 0;  --PL_DB_REGISTER:DB0_CLOCK_ENABLED
  constant kDB1_CLOCK_ENABLEDSize       : integer := 1;  --PL_DB_REGISTER:DB1_CLOCK_ENABLED
  constant kDB1_CLOCK_ENABLEDMsb        : integer := 1;  --PL_DB_REGISTER:DB1_CLOCK_ENABLED
  constant kDB1_CLOCK_ENABLED           : integer := 1;  --PL_DB_REGISTER:DB1_CLOCK_ENABLED
  constant kPLL_REF_CLOCK_ENABLEDSize       : integer := 1;  --PL_DB_REGISTER:PLL_REF_CLOCK_ENABLED
  constant kPLL_REF_CLOCK_ENABLEDMsb        : integer := 2;  --PL_DB_REGISTER:PLL_REF_CLOCK_ENABLED
  constant kPLL_REF_CLOCK_ENABLED           : integer := 2;  --PL_DB_REGISTER:PLL_REF_CLOCK_ENABLED
  constant kDB0_RESET_ASSERTEDSize       : integer := 1;  --PL_DB_REGISTER:DB0_RESET_ASSERTED
  constant kDB0_RESET_ASSERTEDMsb        : integer := 4;  --PL_DB_REGISTER:DB0_RESET_ASSERTED
  constant kDB0_RESET_ASSERTED           : integer := 4;  --PL_DB_REGISTER:DB0_RESET_ASSERTED
  constant kDB1_RESET_ASSERTEDSize       : integer := 1;  --PL_DB_REGISTER:DB1_RESET_ASSERTED
  constant kDB1_RESET_ASSERTEDMsb        : integer := 5;  --PL_DB_REGISTER:DB1_RESET_ASSERTED
  constant kDB1_RESET_ASSERTED           : integer := 5;  --PL_DB_REGISTER:DB1_RESET_ASSERTED
  constant kENABLE_CLOCK_DB0Size       : integer := 1;  --PL_DB_REGISTER:ENABLE_CLOCK_DB0
  constant kENABLE_CLOCK_DB0Msb        : integer := 8;  --PL_DB_REGISTER:ENABLE_CLOCK_DB0
  constant kENABLE_CLOCK_DB0           : integer := 8;  --PL_DB_REGISTER:ENABLE_CLOCK_DB0
  constant kENABLE_CLOCK_DB1Size       : integer := 1;  --PL_DB_REGISTER:ENABLE_CLOCK_DB1
  constant kENABLE_CLOCK_DB1Msb        : integer := 9;  --PL_DB_REGISTER:ENABLE_CLOCK_DB1
  constant kENABLE_CLOCK_DB1           : integer := 9;  --PL_DB_REGISTER:ENABLE_CLOCK_DB1
  constant kENABLE_PLL_REF_CLOCKSize       : integer :=  1;  --PL_DB_REGISTER:ENABLE_PLL_REF_CLOCK
  constant kENABLE_PLL_REF_CLOCKMsb        : integer := 10;  --PL_DB_REGISTER:ENABLE_PLL_REF_CLOCK
  constant kENABLE_PLL_REF_CLOCK           : integer := 10;  --PL_DB_REGISTER:ENABLE_PLL_REF_CLOCK
  constant kDISABLE_CLOCK_DB0Size       : integer :=  1;  --PL_DB_REGISTER:DISABLE_CLOCK_DB0
  constant kDISABLE_CLOCK_DB0Msb        : integer := 12;  --PL_DB_REGISTER:DISABLE_CLOCK_DB0
  constant kDISABLE_CLOCK_DB0           : integer := 12;  --PL_DB_REGISTER:DISABLE_CLOCK_DB0
  constant kDISABLE_CLOCK_DB1Size       : integer :=  1;  --PL_DB_REGISTER:DISABLE_CLOCK_DB1
  constant kDISABLE_CLOCK_DB1Msb        : integer := 13;  --PL_DB_REGISTER:DISABLE_CLOCK_DB1
  constant kDISABLE_CLOCK_DB1           : integer := 13;  --PL_DB_REGISTER:DISABLE_CLOCK_DB1
  constant kDISABLE_PLL_REF_CLOCKSize       : integer :=  1;  --PL_DB_REGISTER:DISABLE_PLL_REF_CLOCK
  constant kDISABLE_PLL_REF_CLOCKMsb        : integer := 14;  --PL_DB_REGISTER:DISABLE_PLL_REF_CLOCK
  constant kDISABLE_PLL_REF_CLOCK           : integer := 14;  --PL_DB_REGISTER:DISABLE_PLL_REF_CLOCK
  constant kRELEASE_RESET_DB0Size       : integer :=  1;  --PL_DB_REGISTER:RELEASE_RESET_DB0
  constant kRELEASE_RESET_DB0Msb        : integer := 16;  --PL_DB_REGISTER:RELEASE_RESET_DB0
  constant kRELEASE_RESET_DB0           : integer := 16;  --PL_DB_REGISTER:RELEASE_RESET_DB0
  constant kRELEASE_RESET_DB1Size       : integer :=  1;  --PL_DB_REGISTER:RELEASE_RESET_DB1
  constant kRELEASE_RESET_DB1Msb        : integer := 17;  --PL_DB_REGISTER:RELEASE_RESET_DB1
  constant kRELEASE_RESET_DB1           : integer := 17;  --PL_DB_REGISTER:RELEASE_RESET_DB1
  constant kASSERT_RESET_DB0Size       : integer :=  1;  --PL_DB_REGISTER:ASSERT_RESET_DB0
  constant kASSERT_RESET_DB0Msb        : integer := 20;  --PL_DB_REGISTER:ASSERT_RESET_DB0
  constant kASSERT_RESET_DB0           : integer := 20;  --PL_DB_REGISTER:ASSERT_RESET_DB0
  constant kASSERT_RESET_DB1Size       : integer :=  1;  --PL_DB_REGISTER:ASSERT_RESET_DB1
  constant kASSERT_RESET_DB1Msb        : integer := 21;  --PL_DB_REGISTER:ASSERT_RESET_DB1
  constant kASSERT_RESET_DB1           : integer := 21;  --PL_DB_REGISTER:ASSERT_RESET_DB1
  --function kPL_DB_REGISTERRec return XReg2_t; -- Register Record function commented out due to programmable attributes

--===============================================================================
-- Register Group PS_CPLD_BASE_REGS
--===============================================================================

  -- SIGNATURE_REGISTER Register (from ps_cpld_regs.v)
  constant kSIGNATURE_REGISTER : integer := 16#0#; -- Register Offset
  constant kSIGNATURE_REGISTERSize: integer := 32;  -- register width in bits
  constant kSIGNATURE_REGISTERMask : std_logic_vector(31 downto 0) := X"ffffffff";
  constant kPRODUCT_SIGNATURESize       : integer := 32;  --SIGNATURE_REGISTER:PRODUCT_SIGNATURE
  constant kPRODUCT_SIGNATUREMsb        : integer := 31;  --SIGNATURE_REGISTER:PRODUCT_SIGNATURE
  constant kPRODUCT_SIGNATURE           : integer :=  0;  --SIGNATURE_REGISTER:PRODUCT_SIGNATURE
  --function kSIGNATURE_REGISTERRec return XReg2_t; -- Register Record function commented out due to programmable attributes

  -- REVISION_REGISTER Register (from ps_cpld_regs.v)
  constant kREVISION_REGISTER : integer := 16#4#; -- Register Offset
  constant kREVISION_REGISTERSize: integer := 32;  -- register width in bits
  constant kREVISION_REGISTERMask : std_logic_vector(31 downto 0) := X"ffffffff";
  constant kREVISION_HHSize       : integer := 8;  --REVISION_REGISTER:REVISION_HH
  constant kREVISION_HHMsb        : integer := 7;  --REVISION_REGISTER:REVISION_HH
  constant kREVISION_HH           : integer := 0;  --REVISION_REGISTER:REVISION_HH
  constant kREVISION_DDSize       : integer :=  8;  --REVISION_REGISTER:REVISION_DD
  constant kREVISION_DDMsb        : integer := 15;  --REVISION_REGISTER:REVISION_DD
  constant kREVISION_DD           : integer :=  8;  --REVISION_REGISTER:REVISION_DD
  constant kREVISION_MMSize       : integer :=  8;  --REVISION_REGISTER:REVISION_MM
  constant kREVISION_MMMsb        : integer := 23;  --REVISION_REGISTER:REVISION_MM
  constant kREVISION_MM           : integer := 16;  --REVISION_REGISTER:REVISION_MM
  constant kREVISION_YYSize       : integer :=  8;  --REVISION_REGISTER:REVISION_YY
  constant kREVISION_YYMsb        : integer := 31;  --REVISION_REGISTER:REVISION_YY
  constant kREVISION_YY           : integer := 24;  --REVISION_REGISTER:REVISION_YY
  --function kREVISION_REGISTERRec return XReg2_t; -- Register Record function commented out due to programmable attributes

  -- OLDEST_COMPATIBLE_REVISION_REGISTER Register (from ps_cpld_regs.v)
  constant kOLDEST_COMPATIBLE_REVISION_REGISTER : integer := 16#8#; -- Register Offset
  constant kOLDEST_COMPATIBLE_REVISION_REGISTERSize: integer := 32;  -- register width in bits
  constant kOLDEST_COMPATIBLE_REVISION_REGISTERMask : std_logic_vector(31 downto 0) := X"ffffffff";
  constant kOLD_REVISION_HHSize       : integer := 8;  --OLDEST_COMPATIBLE_REVISION_REGISTER:OLD_REVISION_HH
  constant kOLD_REVISION_HHMsb        : integer := 7;  --OLDEST_COMPATIBLE_REVISION_REGISTER:OLD_REVISION_HH
  constant kOLD_REVISION_HH           : integer := 0;  --OLDEST_COMPATIBLE_REVISION_REGISTER:OLD_REVISION_HH
  constant kOLD_REVISION_DDSize       : integer :=  8;  --OLDEST_COMPATIBLE_REVISION_REGISTER:OLD_REVISION_DD
  constant kOLD_REVISION_DDMsb        : integer := 15;  --OLDEST_COMPATIBLE_REVISION_REGISTER:OLD_REVISION_DD
  constant kOLD_REVISION_DD           : integer :=  8;  --OLDEST_COMPATIBLE_REVISION_REGISTER:OLD_REVISION_DD
  constant kOLD_REVISION_MMSize       : integer :=  8;  --OLDEST_COMPATIBLE_REVISION_REGISTER:OLD_REVISION_MM
  constant kOLD_REVISION_MMMsb        : integer := 23;  --OLDEST_COMPATIBLE_REVISION_REGISTER:OLD_REVISION_MM
  constant kOLD_REVISION_MM           : integer := 16;  --OLDEST_COMPATIBLE_REVISION_REGISTER:OLD_REVISION_MM
  constant kOLD_REVISION_YYSize       : integer :=  8;  --OLDEST_COMPATIBLE_REVISION_REGISTER:OLD_REVISION_YY
  constant kOLD_REVISION_YYMsb        : integer := 31;  --OLDEST_COMPATIBLE_REVISION_REGISTER:OLD_REVISION_YY
  constant kOLD_REVISION_YY           : integer := 24;  --OLDEST_COMPATIBLE_REVISION_REGISTER:OLD_REVISION_YY
  --function kOLDEST_COMPATIBLE_REVISION_REGISTERRec return XReg2_t; -- Register Record function commented out due to programmable attributes

  -- SCRATCH_REGISTER Register (from ps_cpld_regs.v)
  constant kSCRATCH_REGISTER : integer := 16#C#; -- Register Offset
  constant kSCRATCH_REGISTERSize: integer := 32;  -- register width in bits
  constant kSCRATCH_REGISTERMask : std_logic_vector(31 downto 0) := X"00000000";
  --function kSCRATCH_REGISTERRec return XReg2_t; -- Register Record function commented out due to programmable attributes

  -- GIT_HASH_REGISTER Register (from ps_cpld_regs.v)
  constant kGIT_HASH_REGISTER : integer := 16#10#; -- Register Offset
  constant kGIT_HASH_REGISTERSize: integer := 32;  -- register width in bits
  constant kGIT_HASH_REGISTERMask : std_logic_vector(31 downto 0) := X"ffffffff";
  constant kGIT_HASHSize       : integer := 28;  --GIT_HASH_REGISTER:GIT_HASH
  constant kGIT_HASHMsb        : integer := 27;  --GIT_HASH_REGISTER:GIT_HASH
  constant kGIT_HASH           : integer :=  0;  --GIT_HASH_REGISTER:GIT_HASH
  constant kGIT_CLEANSize       : integer :=  4;  --GIT_HASH_REGISTER:GIT_CLEAN
  constant kGIT_CLEANMsb        : integer := 31;  --GIT_HASH_REGISTER:GIT_CLEAN
  constant kGIT_CLEAN           : integer := 28;  --GIT_HASH_REGISTER:GIT_CLEAN
  --function kGIT_HASH_REGISTERRec return XReg2_t; -- Register Record function commented out due to programmable attributes

end package;

package body PkgPS_CPLD_BASE_REGMAP is

  -- function kDIO_DIRECTION_REGISTERRec not implemented because DIO_DIRECTION_REGISTER has programmable attributes
  ---- Return the record of register kDIO_DIRECTION_REGISTER
  --function kDIO_DIRECTION_REGISTERRec return XReg2_t is
  --  variable Rec : XReg2_t;
  --begin
  --  Rec := kXRegDefault;
  --  Rec.version := 1;
  --  Rec.offset := XAddrResize(X"30");
  --  Rec.size := 32;
  --  Rec.readable := true;
  --  Rec.writable := true;
  --  Rec.wmask := XRegResize(X"0fff0fff");
  --  Rec.rmask := XRegResize(X"0fff0fff");
  --  Rec.strobemask := XRegResize(X"00000000");
  --  Rec.clearablemask := XRegResize(X"00000000");
  --  Rec.initialvalue := XRegResize(X"00000000");
  --  -- Single-bit bitfields are not listed here because the default for msblookup* is msb=lsb.
  --  Rec.msblookupw(kDIO_DIRECTION_A) := kDIO_DIRECTION_AMsb;
  --  Rec.msblookupw(kDIO_DIRECTION_B) := kDIO_DIRECTION_BMsb;
  --  Rec.msblookupr(kDIO_DIRECTION_A) := kDIO_DIRECTION_AMsb;
  --  Rec.msblookupr(kDIO_DIRECTION_B) := kDIO_DIRECTION_BMsb;
  --  Rec.isreg := true;
  --  --synopsys translate_off
  --  Rec.name := rs("DIO_DIRECTION_REGISTER");
  --  --synopsys translate_on
  --  return Rec;
  --end function kDIO_DIRECTION_REGISTERRec;

  -- function kSERIAL_NUM_LOW_REGRec not implemented because SERIAL_NUM_LOW_REG has programmable attributes
  ---- Return the record of register kSERIAL_NUM_LOW_REG
  --function kSERIAL_NUM_LOW_REGRec return XReg2_t is
  --  variable Rec : XReg2_t;
  --begin
  --  Rec := kXRegDefault;
  --  Rec.version := 1;
  --  Rec.offset := XAddrResize(X"34");
  --  Rec.size := 32;
  --  Rec.readable := true;
  --  Rec.writable := true;
  --  Rec.wmask := XRegResize(X"ffffffff");
  --  Rec.rmask := XRegResize(X"ffffffff");
  --  Rec.strobemask := XRegResize(X"00000000");
  --  Rec.clearablemask := XRegResize(X"00000000");
  --  -- no initial values specified
  --  -- no bitfields specified
  --  Rec.isreg := true;
  --  --synopsys translate_off
  --  Rec.name := rs("SERIAL_NUM_LOW_REG");
  --  --synopsys translate_on
  --  return Rec;
  --end function kSERIAL_NUM_LOW_REGRec;

  -- function kSERIAL_NUM_HIGH_REGRec not implemented because SERIAL_NUM_HIGH_REG has programmable attributes
  ---- Return the record of register kSERIAL_NUM_HIGH_REG
  --function kSERIAL_NUM_HIGH_REGRec return XReg2_t is
  --  variable Rec : XReg2_t;
  --begin
  --  Rec := kXRegDefault;
  --  Rec.version := 1;
  --  Rec.offset := XAddrResize(X"38");
  --  Rec.size := 8;
  --  Rec.readable := true;
  --  Rec.writable := true;
  --  Rec.wmask := XRegResize(X"ff");
  --  Rec.rmask := XRegResize(X"ff");
  --  Rec.strobemask := XRegResize(X"00");
  --  Rec.clearablemask := XRegResize(X"00");
  --  -- no initial values specified
  --  -- no bitfields specified
  --  Rec.isreg := true;
  --  --synopsys translate_off
  --  Rec.name := rs("SERIAL_NUM_HIGH_REG");
  --  --synopsys translate_on
  --  return Rec;
  --end function kSERIAL_NUM_HIGH_REGRec;

  -- function kCMI_CONTROL_STATUSRec not implemented because CMI_CONTROL_STATUS has programmable attributes
  ---- Return the record of register kCMI_CONTROL_STATUS
  --function kCMI_CONTROL_STATUSRec return XReg2_t is
  --  variable Rec : XReg2_t;
  --begin
  --  Rec := kXRegDefault;
  --  Rec.version := 1;
  --  Rec.offset := XAddrResize(X"3C");
  --  Rec.size := 32;
  --  Rec.readable := true;
  --  Rec.writable := true;
  --  Rec.wmask := XRegResize(X"00000001");
  --  Rec.rmask := XRegResize(X"80000001");
  --  Rec.strobemask := XRegResize(X"00000000");
  --  Rec.clearablemask := XRegResize(X"00000000");
  --  -- no initial values specified
  --  -- Single-bit bitfields are not listed here because the default for msblookup* is msb=lsb.
  --  Rec.isreg := true;
  --  --synopsys translate_off
  --  Rec.name := rs("CMI_CONTROL_STATUS");
  --  --synopsys translate_on
  --  return Rec;
  --end function kCMI_CONTROL_STATUSRec;

  -- function kPL_DB_REGISTERRec not implemented because PL_DB_REGISTER has programmable attributes
  ---- Return the record of register kPL_DB_REGISTER
  --function kPL_DB_REGISTERRec return XReg2_t is
  --  variable Rec : XReg2_t;
  --begin
  --  Rec := kXRegDefault;
  --  Rec.version := 1;
  --  Rec.offset := XAddrResize(X"20");
  --  Rec.size := 32;
  --  Rec.readable := true;
  --  Rec.writable := true;
  --  Rec.wmask := XRegResize(X"00337700");
  --  Rec.rmask := XRegResize(X"00000037");
  --  Rec.strobemask := XRegResize(X"00000000");
  --  Rec.clearablemask := XRegResize(X"00000000");
  --  -- no initial values specified
  --  -- Single-bit bitfields are not listed here because the default for msblookup* is msb=lsb.
  --  Rec.isreg := true;
  --  --synopsys translate_off
  --  Rec.name := rs("PL_DB_REGISTER");
  --  --synopsys translate_on
  --  return Rec;
  --end function kPL_DB_REGISTERRec;

  -- function kSIGNATURE_REGISTERRec not implemented because SIGNATURE_REGISTER has programmable attributes
  ---- Return the record of register kSIGNATURE_REGISTER
  --function kSIGNATURE_REGISTERRec return XReg2_t is
  --  variable Rec : XReg2_t;
  --begin
  --  Rec := kXRegDefault;
  --  Rec.version := 1;
  --  Rec.offset := XAddrResize(X"0");
  --  Rec.size := 32;
  --  Rec.readable := true;
  --  Rec.writable := false;
  --  Rec.wmask := XRegResize(X"ffffffff");
  --  Rec.rmask := XRegResize(X"ffffffff");
  --  Rec.strobemask := XRegResize(X"00000000");
  --  Rec.clearablemask := XRegResize(X"00000000");
  --  -- no initial values specified
  --  -- Single-bit bitfields are not listed here because the default for msblookup* is msb=lsb.
  --  Rec.msblookupw(kPRODUCT_SIGNATURE) := kPRODUCT_SIGNATUREMsb;
  --  Rec.msblookupr(kPRODUCT_SIGNATURE) := kPRODUCT_SIGNATUREMsb;
  --  Rec.isreg := true;
  --  --synopsys translate_off
  --  Rec.name := rs("SIGNATURE_REGISTER");
  --  --synopsys translate_on
  --  return Rec;
  --end function kSIGNATURE_REGISTERRec;

  -- function kREVISION_REGISTERRec not implemented because REVISION_REGISTER has programmable attributes
  ---- Return the record of register kREVISION_REGISTER
  --function kREVISION_REGISTERRec return XReg2_t is
  --  variable Rec : XReg2_t;
  --begin
  --  Rec := kXRegDefault;
  --  Rec.version := 1;
  --  Rec.offset := XAddrResize(X"4");
  --  Rec.size := 32;
  --  Rec.readable := true;
  --  Rec.writable := false;
  --  Rec.wmask := XRegResize(X"ffffffff");
  --  Rec.rmask := XRegResize(X"ffffffff");
  --  Rec.strobemask := XRegResize(X"00000000");
  --  Rec.clearablemask := XRegResize(X"00000000");
  --  -- no initial values specified
  --  -- Single-bit bitfields are not listed here because the default for msblookup* is msb=lsb.
  --  Rec.msblookupw(kREVISION_HH) := kREVISION_HHMsb;
  --  Rec.msblookupw(kREVISION_DD) := kREVISION_DDMsb;
  --  Rec.msblookupw(kREVISION_MM) := kREVISION_MMMsb;
  --  Rec.msblookupw(kREVISION_YY) := kREVISION_YYMsb;
  --  Rec.msblookupr(kREVISION_HH) := kREVISION_HHMsb;
  --  Rec.msblookupr(kREVISION_DD) := kREVISION_DDMsb;
  --  Rec.msblookupr(kREVISION_MM) := kREVISION_MMMsb;
  --  Rec.msblookupr(kREVISION_YY) := kREVISION_YYMsb;
  --  Rec.isreg := true;
  --  --synopsys translate_off
  --  Rec.name := rs("REVISION_REGISTER");
  --  --synopsys translate_on
  --  return Rec;
  --end function kREVISION_REGISTERRec;

  -- function kOLDEST_COMPATIBLE_REVISION_REGISTERRec not implemented because OLDEST_COMPATIBLE_REVISION_REGISTER has programmable attributes
  ---- Return the record of register kOLDEST_COMPATIBLE_REVISION_REGISTER
  --function kOLDEST_COMPATIBLE_REVISION_REGISTERRec return XReg2_t is
  --  variable Rec : XReg2_t;
  --begin
  --  Rec := kXRegDefault;
  --  Rec.version := 1;
  --  Rec.offset := XAddrResize(X"8");
  --  Rec.size := 32;
  --  Rec.readable := true;
  --  Rec.writable := false;
  --  Rec.wmask := XRegResize(X"ffffffff");
  --  Rec.rmask := XRegResize(X"ffffffff");
  --  Rec.strobemask := XRegResize(X"00000000");
  --  Rec.clearablemask := XRegResize(X"00000000");
  --  -- no initial values specified
  --  -- Single-bit bitfields are not listed here because the default for msblookup* is msb=lsb.
  --  Rec.msblookupw(kOLD_REVISION_HH) := kOLD_REVISION_HHMsb;
  --  Rec.msblookupw(kOLD_REVISION_DD) := kOLD_REVISION_DDMsb;
  --  Rec.msblookupw(kOLD_REVISION_MM) := kOLD_REVISION_MMMsb;
  --  Rec.msblookupw(kOLD_REVISION_YY) := kOLD_REVISION_YYMsb;
  --  Rec.msblookupr(kOLD_REVISION_HH) := kOLD_REVISION_HHMsb;
  --  Rec.msblookupr(kOLD_REVISION_DD) := kOLD_REVISION_DDMsb;
  --  Rec.msblookupr(kOLD_REVISION_MM) := kOLD_REVISION_MMMsb;
  --  Rec.msblookupr(kOLD_REVISION_YY) := kOLD_REVISION_YYMsb;
  --  Rec.isreg := true;
  --  --synopsys translate_off
  --  Rec.name := rs("OLDEST_COMPATIBLE_REVISION_REGISTER");
  --  --synopsys translate_on
  --  return Rec;
  --end function kOLDEST_COMPATIBLE_REVISION_REGISTERRec;

  -- function kSCRATCH_REGISTERRec not implemented because SCRATCH_REGISTER has programmable attributes
  ---- Return the record of register kSCRATCH_REGISTER
  --function kSCRATCH_REGISTERRec return XReg2_t is
  --  variable Rec : XReg2_t;
  --begin
  --  Rec := kXRegDefault;
  --  Rec.version := 1;
  --  Rec.offset := XAddrResize(X"C");
  --  Rec.size := 32;
  --  Rec.readable := true;
  --  Rec.writable := true;
  --  Rec.wmask := XRegResize(X"ffffffff");
  --  Rec.rmask := XRegResize(X"ffffffff");
  --  Rec.strobemask := XRegResize(X"00000000");
  --  Rec.clearablemask := XRegResize(X"00000000");
  --  -- no initial values specified
  --  -- no bitfields specified
  --  Rec.isreg := true;
  --  --synopsys translate_off
  --  Rec.name := rs("SCRATCH_REGISTER");
  --  --synopsys translate_on
  --  return Rec;
  --end function kSCRATCH_REGISTERRec;

  -- function kGIT_HASH_REGISTERRec not implemented because GIT_HASH_REGISTER has programmable attributes
  ---- Return the record of register kGIT_HASH_REGISTER
  --function kGIT_HASH_REGISTERRec return XReg2_t is
  --  variable Rec : XReg2_t;
  --begin
  --  Rec := kXRegDefault;
  --  Rec.version := 1;
  --  Rec.offset := XAddrResize(X"10");
  --  Rec.size := 32;
  --  Rec.readable := true;
  --  Rec.writable := false;
  --  Rec.wmask := XRegResize(X"ffffffff");
  --  Rec.rmask := XRegResize(X"ffffffff");
  --  Rec.strobemask := XRegResize(X"00000000");
  --  Rec.clearablemask := XRegResize(X"00000000");
  --  -- no initial values specified
  --  -- Single-bit bitfields are not listed here because the default for msblookup* is msb=lsb.
  --  Rec.msblookupw(kGIT_HASH) := kGIT_HASHMsb;
  --  Rec.msblookupw(kGIT_CLEAN) := kGIT_CLEANMsb;
  --  Rec.msblookupr(kGIT_HASH) := kGIT_HASHMsb;
  --  Rec.msblookupr(kGIT_CLEAN) := kGIT_CLEANMsb;
  --  Rec.isreg := true;
  --  --synopsys translate_off
  --  Rec.name := rs("GIT_HASH_REGISTER");
  --  --synopsys translate_on
  --  return Rec;
  --end function kGIT_HASH_REGISTERRec;

end package body;
