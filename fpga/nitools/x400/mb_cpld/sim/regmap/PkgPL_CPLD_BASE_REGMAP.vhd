---------------------------------------------------------------------
--
-- Copyright 2021 Ettus Research, A National Instruments Brand
-- SPDX-License-Identifier: LGPL-3.0-or-later
--
-- Module: PkgPL_CPLD_BASE_REGMAP.vhd
--
-- Purpose:
--   The constants in this file are autogenerated by XmlParse.
--
----------------------------------------------------------------------
library ieee;
  use ieee.std_logic_1164.all;
  use ieee.numeric_std.all;

package PkgPL_CPLD_BASE_REGMAP is

--===============================================================================
-- A numerically ordered list of registers and their HDL source files
--===============================================================================

  -- SIGNATURE_REGISTER                  : 0x0 (pl_cpld_regs.v)
  -- REVISION_REGISTER                   : 0x4 (pl_cpld_regs.v)
  -- OLDEST_COMPATIBLE_REVISION_REGISTER : 0x8 (pl_cpld_regs.v)
  -- SCRATCH_REGISTER                    : 0xC (pl_cpld_regs.v)
  -- GIT_HASH_REGISTER                   : 0x10 (pl_cpld_regs.v)
  -- LED_REGISTER                        : 0x20 (pl_cpld_regs.v)
  -- CABLE_PRESENT_REG                   : 0x30 (pl_cpld_regs.v)

--===============================================================================
-- RegTypes
--===============================================================================

--===============================================================================
-- Register Group MB_CPLD_LED_REGS
--===============================================================================

  -- LED_REGISTER Register (from pl_cpld_regs.v)
  constant kLED_REGISTER : integer := 16#20#; -- Register Offset
  constant kLED_REGISTERSize: integer := 16;  -- register width in bits
  constant kLED_REGISTERMask : std_logic_vector(15 downto 0) := X"ffff";
  constant kQSFP0_LED_LINKSize       : integer := 4;  --LED_REGISTER:QSFP0_LED_LINK
  constant kQSFP0_LED_LINKMsb        : integer := 3;  --LED_REGISTER:QSFP0_LED_LINK
  constant kQSFP0_LED_LINK           : integer := 0;  --LED_REGISTER:QSFP0_LED_LINK
  constant kQSFP0_LED_ACTIVESize       : integer := 4;  --LED_REGISTER:QSFP0_LED_ACTIVE
  constant kQSFP0_LED_ACTIVEMsb        : integer := 7;  --LED_REGISTER:QSFP0_LED_ACTIVE
  constant kQSFP0_LED_ACTIVE           : integer := 4;  --LED_REGISTER:QSFP0_LED_ACTIVE
  constant kQSFP1_LED_LINKSize       : integer :=  4;  --LED_REGISTER:QSFP1_LED_LINK
  constant kQSFP1_LED_LINKMsb        : integer := 11;  --LED_REGISTER:QSFP1_LED_LINK
  constant kQSFP1_LED_LINK           : integer :=  8;  --LED_REGISTER:QSFP1_LED_LINK
  constant kQSFP1_LED_ACTIVESize       : integer :=  4;  --LED_REGISTER:QSFP1_LED_ACTIVE
  constant kQSFP1_LED_ACTIVEMsb        : integer := 15;  --LED_REGISTER:QSFP1_LED_ACTIVE
  constant kQSFP1_LED_ACTIVE           : integer := 12;  --LED_REGISTER:QSFP1_LED_ACTIVE
  --function kLED_REGISTERRec return XReg2_t; -- Register Record function commented out due to programmable attributes

--===============================================================================
-- Register Group PL_CMI_REGS
--===============================================================================

  -- CABLE_PRESENT_REG Register (from pl_cpld_regs.v)
  constant kCABLE_PRESENT_REG : integer := 16#30#; -- Register Offset
  constant kCABLE_PRESENT_REGSize: integer := 2;  -- register width in bits
  constant kCABLE_PRESENT_REGMask : std_logic_vector(1 downto 0) := "11" & X"";
  constant kIPASS0_CABLE_PRESENTSize       : integer := 1;  --CABLE_PRESENT_REG:IPASS0_CABLE_PRESENT
  constant kIPASS0_CABLE_PRESENTMsb        : integer := 0;  --CABLE_PRESENT_REG:IPASS0_CABLE_PRESENT
  constant kIPASS0_CABLE_PRESENT           : integer := 0;  --CABLE_PRESENT_REG:IPASS0_CABLE_PRESENT
  constant kIPASS1_CABLE_PRESENTSize       : integer := 1;  --CABLE_PRESENT_REG:IPASS1_CABLE_PRESENT
  constant kIPASS1_CABLE_PRESENTMsb        : integer := 1;  --CABLE_PRESENT_REG:IPASS1_CABLE_PRESENT
  constant kIPASS1_CABLE_PRESENT           : integer := 1;  --CABLE_PRESENT_REG:IPASS1_CABLE_PRESENT
  --function kCABLE_PRESENT_REGRec return XReg2_t; -- Register Record function commented out due to programmable attributes

--===============================================================================
-- Register Group PL_CPLD_BASE_REGS
--===============================================================================

  -- SIGNATURE_REGISTER Register (from pl_cpld_regs.v)
  constant kSIGNATURE_REGISTER : integer := 16#0#; -- Register Offset
  constant kSIGNATURE_REGISTERSize: integer := 32;  -- register width in bits
  constant kSIGNATURE_REGISTERMask : std_logic_vector(31 downto 0) := X"ffffffff";
  constant kPRODUCT_SIGNATURESize       : integer := 32;  --SIGNATURE_REGISTER:PRODUCT_SIGNATURE
  constant kPRODUCT_SIGNATUREMsb        : integer := 31;  --SIGNATURE_REGISTER:PRODUCT_SIGNATURE
  constant kPRODUCT_SIGNATURE           : integer :=  0;  --SIGNATURE_REGISTER:PRODUCT_SIGNATURE
  --function kSIGNATURE_REGISTERRec return XReg2_t; -- Register Record function commented out due to programmable attributes

  -- REVISION_REGISTER Register (from pl_cpld_regs.v)
  constant kREVISION_REGISTER : integer := 16#4#; -- Register Offset
  constant kREVISION_REGISTERSize: integer := 32;  -- register width in bits
  constant kREVISION_REGISTERMask : std_logic_vector(31 downto 0) := X"ffffffff";
  constant kREVISION_HHSize       : integer := 8;  --REVISION_REGISTER:REVISION_HH
  constant kREVISION_HHMsb        : integer := 7;  --REVISION_REGISTER:REVISION_HH
  constant kREVISION_HH           : integer := 0;  --REVISION_REGISTER:REVISION_HH
  constant kREVISION_DDSize       : integer :=  8;  --REVISION_REGISTER:REVISION_DD
  constant kREVISION_DDMsb        : integer := 15;  --REVISION_REGISTER:REVISION_DD
  constant kREVISION_DD           : integer :=  8;  --REVISION_REGISTER:REVISION_DD
  constant kREVISION_MMSize       : integer :=  8;  --REVISION_REGISTER:REVISION_MM
  constant kREVISION_MMMsb        : integer := 23;  --REVISION_REGISTER:REVISION_MM
  constant kREVISION_MM           : integer := 16;  --REVISION_REGISTER:REVISION_MM
  constant kREVISION_YYSize       : integer :=  8;  --REVISION_REGISTER:REVISION_YY
  constant kREVISION_YYMsb        : integer := 31;  --REVISION_REGISTER:REVISION_YY
  constant kREVISION_YY           : integer := 24;  --REVISION_REGISTER:REVISION_YY
  --function kREVISION_REGISTERRec return XReg2_t; -- Register Record function commented out due to programmable attributes

  -- OLDEST_COMPATIBLE_REVISION_REGISTER Register (from pl_cpld_regs.v)
  constant kOLDEST_COMPATIBLE_REVISION_REGISTER : integer := 16#8#; -- Register Offset
  constant kOLDEST_COMPATIBLE_REVISION_REGISTERSize: integer := 32;  -- register width in bits
  constant kOLDEST_COMPATIBLE_REVISION_REGISTERMask : std_logic_vector(31 downto 0) := X"ffffffff";
  constant kOLD_REVISION_HHSize       : integer := 8;  --OLDEST_COMPATIBLE_REVISION_REGISTER:OLD_REVISION_HH
  constant kOLD_REVISION_HHMsb        : integer := 7;  --OLDEST_COMPATIBLE_REVISION_REGISTER:OLD_REVISION_HH
  constant kOLD_REVISION_HH           : integer := 0;  --OLDEST_COMPATIBLE_REVISION_REGISTER:OLD_REVISION_HH
  constant kOLD_REVISION_DDSize       : integer :=  8;  --OLDEST_COMPATIBLE_REVISION_REGISTER:OLD_REVISION_DD
  constant kOLD_REVISION_DDMsb        : integer := 15;  --OLDEST_COMPATIBLE_REVISION_REGISTER:OLD_REVISION_DD
  constant kOLD_REVISION_DD           : integer :=  8;  --OLDEST_COMPATIBLE_REVISION_REGISTER:OLD_REVISION_DD
  constant kOLD_REVISION_MMSize       : integer :=  8;  --OLDEST_COMPATIBLE_REVISION_REGISTER:OLD_REVISION_MM
  constant kOLD_REVISION_MMMsb        : integer := 23;  --OLDEST_COMPATIBLE_REVISION_REGISTER:OLD_REVISION_MM
  constant kOLD_REVISION_MM           : integer := 16;  --OLDEST_COMPATIBLE_REVISION_REGISTER:OLD_REVISION_MM
  constant kOLD_REVISION_YYSize       : integer :=  8;  --OLDEST_COMPATIBLE_REVISION_REGISTER:OLD_REVISION_YY
  constant kOLD_REVISION_YYMsb        : integer := 31;  --OLDEST_COMPATIBLE_REVISION_REGISTER:OLD_REVISION_YY
  constant kOLD_REVISION_YY           : integer := 24;  --OLDEST_COMPATIBLE_REVISION_REGISTER:OLD_REVISION_YY
  --function kOLDEST_COMPATIBLE_REVISION_REGISTERRec return XReg2_t; -- Register Record function commented out due to programmable attributes

  -- SCRATCH_REGISTER Register (from pl_cpld_regs.v)
  constant kSCRATCH_REGISTER : integer := 16#C#; -- Register Offset
  constant kSCRATCH_REGISTERSize: integer := 32;  -- register width in bits
  constant kSCRATCH_REGISTERMask : std_logic_vector(31 downto 0) := X"00000000";
  --function kSCRATCH_REGISTERRec return XReg2_t; -- Register Record function commented out due to programmable attributes

  -- GIT_HASH_REGISTER Register (from pl_cpld_regs.v)
  constant kGIT_HASH_REGISTER : integer := 16#10#; -- Register Offset
  constant kGIT_HASH_REGISTERSize: integer := 32;  -- register width in bits
  constant kGIT_HASH_REGISTERMask : std_logic_vector(31 downto 0) := X"ffffffff";
  constant kGIT_HASHSize       : integer := 28;  --GIT_HASH_REGISTER:GIT_HASH
  constant kGIT_HASHMsb        : integer := 27;  --GIT_HASH_REGISTER:GIT_HASH
  constant kGIT_HASH           : integer :=  0;  --GIT_HASH_REGISTER:GIT_HASH
  constant kGIT_CLEANSize       : integer :=  4;  --GIT_HASH_REGISTER:GIT_CLEAN
  constant kGIT_CLEANMsb        : integer := 31;  --GIT_HASH_REGISTER:GIT_CLEAN
  constant kGIT_CLEAN           : integer := 28;  --GIT_HASH_REGISTER:GIT_CLEAN
  --function kGIT_HASH_REGISTERRec return XReg2_t; -- Register Record function commented out due to programmable attributes

end package;

package body PkgPL_CPLD_BASE_REGMAP is

  -- function kLED_REGISTERRec not implemented because LED_REGISTER has programmable attributes
  ---- Return the record of register kLED_REGISTER
  --function kLED_REGISTERRec return XReg2_t is
  --  variable Rec : XReg2_t;
  --begin
  --  Rec := kXRegDefault;
  --  Rec.version := 1;
  --  Rec.offset := XAddrResize(X"20");
  --  Rec.size := 16;
  --  Rec.readable := true;
  --  Rec.writable := true;
  --  Rec.wmask := XRegResize(X"ffff");
  --  Rec.rmask := XRegResize(X"ffff");
  --  Rec.strobemask := XRegResize(X"0000");
  --  Rec.clearablemask := XRegResize(X"0000");
  --  -- no initial values specified
  --  -- Single-bit bitfields are not listed here because the default for msblookup* is msb=lsb.
  --  Rec.msblookupw(kQSFP0_LED_LINK) := kQSFP0_LED_LINKMsb;
  --  Rec.msblookupw(kQSFP0_LED_ACTIVE) := kQSFP0_LED_ACTIVEMsb;
  --  Rec.msblookupw(kQSFP1_LED_LINK) := kQSFP1_LED_LINKMsb;
  --  Rec.msblookupw(kQSFP1_LED_ACTIVE) := kQSFP1_LED_ACTIVEMsb;
  --  Rec.msblookupr(kQSFP0_LED_LINK) := kQSFP0_LED_LINKMsb;
  --  Rec.msblookupr(kQSFP0_LED_ACTIVE) := kQSFP0_LED_ACTIVEMsb;
  --  Rec.msblookupr(kQSFP1_LED_LINK) := kQSFP1_LED_LINKMsb;
  --  Rec.msblookupr(kQSFP1_LED_ACTIVE) := kQSFP1_LED_ACTIVEMsb;
  --  Rec.isreg := true;
  --  --synopsys translate_off
  --  Rec.name := rs("LED_REGISTER");
  --  --synopsys translate_on
  --  return Rec;
  --end function kLED_REGISTERRec;

  -- function kCABLE_PRESENT_REGRec not implemented because CABLE_PRESENT_REG has programmable attributes
  ---- Return the record of register kCABLE_PRESENT_REG
  --function kCABLE_PRESENT_REGRec return XReg2_t is
  --  variable Rec : XReg2_t;
  --begin
  --  Rec := kXRegDefault;
  --  Rec.version := 1;
  --  Rec.offset := XAddrResize(X"30");
  --  Rec.size := 2;
  --  Rec.readable := true;
  --  Rec.writable := true;
  --  Rec.wmask := XRegResize("11" & X"");
  --  Rec.rmask := XRegResize("11" & X"");
  --  Rec.strobemask := XRegResize("00" & X"");
  --  Rec.clearablemask := XRegResize("00" & X"");
  --  -- no initial values specified
  --  -- Single-bit bitfields are not listed here because the default for msblookup* is msb=lsb.
  --  Rec.isreg := true;
  --  --synopsys translate_off
  --  Rec.name := rs("CABLE_PRESENT_REG");
  --  --synopsys translate_on
  --  return Rec;
  --end function kCABLE_PRESENT_REGRec;

  -- function kSIGNATURE_REGISTERRec not implemented because SIGNATURE_REGISTER has programmable attributes
  ---- Return the record of register kSIGNATURE_REGISTER
  --function kSIGNATURE_REGISTERRec return XReg2_t is
  --  variable Rec : XReg2_t;
  --begin
  --  Rec := kXRegDefault;
  --  Rec.version := 1;
  --  Rec.offset := XAddrResize(X"0");
  --  Rec.size := 32;
  --  Rec.readable := true;
  --  Rec.writable := false;
  --  Rec.wmask := XRegResize(X"ffffffff");
  --  Rec.rmask := XRegResize(X"ffffffff");
  --  Rec.strobemask := XRegResize(X"00000000");
  --  Rec.clearablemask := XRegResize(X"00000000");
  --  -- no initial values specified
  --  -- Single-bit bitfields are not listed here because the default for msblookup* is msb=lsb.
  --  Rec.msblookupw(kPRODUCT_SIGNATURE) := kPRODUCT_SIGNATUREMsb;
  --  Rec.msblookupr(kPRODUCT_SIGNATURE) := kPRODUCT_SIGNATUREMsb;
  --  Rec.isreg := true;
  --  --synopsys translate_off
  --  Rec.name := rs("SIGNATURE_REGISTER");
  --  --synopsys translate_on
  --  return Rec;
  --end function kSIGNATURE_REGISTERRec;

  -- function kREVISION_REGISTERRec not implemented because REVISION_REGISTER has programmable attributes
  ---- Return the record of register kREVISION_REGISTER
  --function kREVISION_REGISTERRec return XReg2_t is
  --  variable Rec : XReg2_t;
  --begin
  --  Rec := kXRegDefault;
  --  Rec.version := 1;
  --  Rec.offset := XAddrResize(X"4");
  --  Rec.size := 32;
  --  Rec.readable := true;
  --  Rec.writable := false;
  --  Rec.wmask := XRegResize(X"ffffffff");
  --  Rec.rmask := XRegResize(X"ffffffff");
  --  Rec.strobemask := XRegResize(X"00000000");
  --  Rec.clearablemask := XRegResize(X"00000000");
  --  -- no initial values specified
  --  -- Single-bit bitfields are not listed here because the default for msblookup* is msb=lsb.
  --  Rec.msblookupw(kREVISION_HH) := kREVISION_HHMsb;
  --  Rec.msblookupw(kREVISION_DD) := kREVISION_DDMsb;
  --  Rec.msblookupw(kREVISION_MM) := kREVISION_MMMsb;
  --  Rec.msblookupw(kREVISION_YY) := kREVISION_YYMsb;
  --  Rec.msblookupr(kREVISION_HH) := kREVISION_HHMsb;
  --  Rec.msblookupr(kREVISION_DD) := kREVISION_DDMsb;
  --  Rec.msblookupr(kREVISION_MM) := kREVISION_MMMsb;
  --  Rec.msblookupr(kREVISION_YY) := kREVISION_YYMsb;
  --  Rec.isreg := true;
  --  --synopsys translate_off
  --  Rec.name := rs("REVISION_REGISTER");
  --  --synopsys translate_on
  --  return Rec;
  --end function kREVISION_REGISTERRec;

  -- function kOLDEST_COMPATIBLE_REVISION_REGISTERRec not implemented because OLDEST_COMPATIBLE_REVISION_REGISTER has programmable attributes
  ---- Return the record of register kOLDEST_COMPATIBLE_REVISION_REGISTER
  --function kOLDEST_COMPATIBLE_REVISION_REGISTERRec return XReg2_t is
  --  variable Rec : XReg2_t;
  --begin
  --  Rec := kXRegDefault;
  --  Rec.version := 1;
  --  Rec.offset := XAddrResize(X"8");
  --  Rec.size := 32;
  --  Rec.readable := true;
  --  Rec.writable := false;
  --  Rec.wmask := XRegResize(X"ffffffff");
  --  Rec.rmask := XRegResize(X"ffffffff");
  --  Rec.strobemask := XRegResize(X"00000000");
  --  Rec.clearablemask := XRegResize(X"00000000");
  --  -- no initial values specified
  --  -- Single-bit bitfields are not listed here because the default for msblookup* is msb=lsb.
  --  Rec.msblookupw(kOLD_REVISION_HH) := kOLD_REVISION_HHMsb;
  --  Rec.msblookupw(kOLD_REVISION_DD) := kOLD_REVISION_DDMsb;
  --  Rec.msblookupw(kOLD_REVISION_MM) := kOLD_REVISION_MMMsb;
  --  Rec.msblookupw(kOLD_REVISION_YY) := kOLD_REVISION_YYMsb;
  --  Rec.msblookupr(kOLD_REVISION_HH) := kOLD_REVISION_HHMsb;
  --  Rec.msblookupr(kOLD_REVISION_DD) := kOLD_REVISION_DDMsb;
  --  Rec.msblookupr(kOLD_REVISION_MM) := kOLD_REVISION_MMMsb;
  --  Rec.msblookupr(kOLD_REVISION_YY) := kOLD_REVISION_YYMsb;
  --  Rec.isreg := true;
  --  --synopsys translate_off
  --  Rec.name := rs("OLDEST_COMPATIBLE_REVISION_REGISTER");
  --  --synopsys translate_on
  --  return Rec;
  --end function kOLDEST_COMPATIBLE_REVISION_REGISTERRec;

  -- function kSCRATCH_REGISTERRec not implemented because SCRATCH_REGISTER has programmable attributes
  ---- Return the record of register kSCRATCH_REGISTER
  --function kSCRATCH_REGISTERRec return XReg2_t is
  --  variable Rec : XReg2_t;
  --begin
  --  Rec := kXRegDefault;
  --  Rec.version := 1;
  --  Rec.offset := XAddrResize(X"C");
  --  Rec.size := 32;
  --  Rec.readable := true;
  --  Rec.writable := true;
  --  Rec.wmask := XRegResize(X"ffffffff");
  --  Rec.rmask := XRegResize(X"ffffffff");
  --  Rec.strobemask := XRegResize(X"00000000");
  --  Rec.clearablemask := XRegResize(X"00000000");
  --  -- no initial values specified
  --  -- no bitfields specified
  --  Rec.isreg := true;
  --  --synopsys translate_off
  --  Rec.name := rs("SCRATCH_REGISTER");
  --  --synopsys translate_on
  --  return Rec;
  --end function kSCRATCH_REGISTERRec;

  -- function kGIT_HASH_REGISTERRec not implemented because GIT_HASH_REGISTER has programmable attributes
  ---- Return the record of register kGIT_HASH_REGISTER
  --function kGIT_HASH_REGISTERRec return XReg2_t is
  --  variable Rec : XReg2_t;
  --begin
  --  Rec := kXRegDefault;
  --  Rec.version := 1;
  --  Rec.offset := XAddrResize(X"10");
  --  Rec.size := 32;
  --  Rec.readable := true;
  --  Rec.writable := false;
  --  Rec.wmask := XRegResize(X"ffffffff");
  --  Rec.rmask := XRegResize(X"ffffffff");
  --  Rec.strobemask := XRegResize(X"00000000");
  --  Rec.clearablemask := XRegResize(X"00000000");
  --  -- no initial values specified
  --  -- Single-bit bitfields are not listed here because the default for msblookup* is msb=lsb.
  --  Rec.msblookupw(kGIT_HASH) := kGIT_HASHMsb;
  --  Rec.msblookupw(kGIT_CLEAN) := kGIT_CLEANMsb;
  --  Rec.msblookupr(kGIT_HASH) := kGIT_HASHMsb;
  --  Rec.msblookupr(kGIT_CLEAN) := kGIT_CLEANMsb;
  --  Rec.isreg := true;
  --  --synopsys translate_off
  --  Rec.name := rs("GIT_HASH_REGISTER");
  --  --synopsys translate_on
  --  return Rec;
  --end function kGIT_HASH_REGISTERRec;

end package body;
