---------------------------------------------------------------------
--
-- Copyright 2021 Ettus Research, A National Instruments Brand
-- SPDX-License-Identifier: LGPL-3.0-or-later
--
-- Module: PkgCPLD_INTERFACE_REGMAP.vhd
--
-- Purpose:
--   The constants in this file are autogenerated by XmlParse.
--
----------------------------------------------------------------------
library ieee;
  use ieee.std_logic_1164.all;
  use ieee.numeric_std.all;

package PkgCPLD_INTERFACE_REGMAP is

--===============================================================================
-- A numerically ordered list of registers and their HDL source files
--===============================================================================

  -- SIGNATURE_REGISTER         : 0x0 (cpld_interface_regs.v)
  -- SCRATCH_REGISTER           : 0xC (cpld_interface_regs.v)
  -- IPASS_CONTROL              : 0x10 (cpld_interface_regs.v)
  -- MOTHERBOARD_CPLD_DIVIDER   : 0x20 (cpld_interface_regs.v)
  -- DAUGHTERBOARD_CPLD_DIVIDER : 0x24 (cpld_interface_regs.v)

--===============================================================================
-- RegTypes
--===============================================================================

--===============================================================================
-- Register Group CPLD_INTERFACE_REGS
--===============================================================================

  -- SIGNATURE_REGISTER Register (from cpld_interface_regs.v)
  constant kSIGNATURE_REGISTER : integer := 16#0#; -- Register Offset
  constant kSIGNATURE_REGISTERSize: integer := 32;  -- register width in bits
  constant kSIGNATURE_REGISTERMask : std_logic_vector(31 downto 0) := X"ffffffff";
  constant kPRODUCT_SIGNATURESize       : integer := 32;  --SIGNATURE_REGISTER:PRODUCT_SIGNATURE
  constant kPRODUCT_SIGNATUREMsb        : integer := 31;  --SIGNATURE_REGISTER:PRODUCT_SIGNATURE
  constant kPRODUCT_SIGNATURE           : integer :=  0;  --SIGNATURE_REGISTER:PRODUCT_SIGNATURE
  --function kSIGNATURE_REGISTERRec return XReg2_t; -- Register Record function commented out due to programmable attributes

  -- SCRATCH_REGISTER Register (from cpld_interface_regs.v)
  constant kSCRATCH_REGISTER : integer := 16#C#; -- Register Offset
  constant kSCRATCH_REGISTERSize: integer := 32;  -- register width in bits
  constant kSCRATCH_REGISTERMask : std_logic_vector(31 downto 0) := X"00000000";
  --function kSCRATCH_REGISTERRec return XReg2_t; -- Register Record function commented out due to programmable attributes

--===============================================================================
-- Register Group CPLD_SPI_CONTROL_REGS
--===============================================================================

  -- MOTHERBOARD_CPLD_DIVIDER Register (from cpld_interface_regs.v)
  constant kMOTHERBOARD_CPLD_DIVIDER : integer := 16#20#; -- Register Offset
  constant kMOTHERBOARD_CPLD_DIVIDERSize: integer := 32;  -- register width in bits
  constant kMOTHERBOARD_CPLD_DIVIDERMask : std_logic_vector(31 downto 0) := X"0000ffff";
  constant kMB_DIVIDERSize       : integer := 16;  --MOTHERBOARD_CPLD_DIVIDER:MB_DIVIDER
  constant kMB_DIVIDERMsb        : integer := 15;  --MOTHERBOARD_CPLD_DIVIDER:MB_DIVIDER
  constant kMB_DIVIDER           : integer :=  0;  --MOTHERBOARD_CPLD_DIVIDER:MB_DIVIDER
  --function kMOTHERBOARD_CPLD_DIVIDERRec return XReg2_t; -- Register Record function commented out due to programmable attributes

  -- DAUGHTERBOARD_CPLD_DIVIDER Register (from cpld_interface_regs.v)
  constant kDAUGHTERBOARD_CPLD_DIVIDER : integer := 16#24#; -- Register Offset
  constant kDAUGHTERBOARD_CPLD_DIVIDERSize: integer := 32;  -- register width in bits
  constant kDAUGHTERBOARD_CPLD_DIVIDERMask : std_logic_vector(31 downto 0) := X"0000ffff";
  constant kDB_DIVIDERSize       : integer := 16;  --DAUGHTERBOARD_CPLD_DIVIDER:DB_DIVIDER
  constant kDB_DIVIDERMsb        : integer := 15;  --DAUGHTERBOARD_CPLD_DIVIDER:DB_DIVIDER
  constant kDB_DIVIDER           : integer :=  0;  --DAUGHTERBOARD_CPLD_DIVIDER:DB_DIVIDER
  --function kDAUGHTERBOARD_CPLD_DIVIDERRec return XReg2_t; -- Register Record function commented out due to programmable attributes

--===============================================================================
-- Register Group IPASS_REGS
--===============================================================================

  -- IPASS_CONTROL Register (from cpld_interface_regs.v)
  constant kIPASS_CONTROL : integer := 16#10#; -- Register Offset
  constant kIPASS_CONTROLSize: integer := 32;  -- register width in bits
  constant kIPASS_CONTROLMask : std_logic_vector(31 downto 0) := X"00000001";
  constant kIPASS_ENABLE_TRANSFERSize       : integer := 1;  --IPASS_CONTROL:IPASS_ENABLE_TRANSFER
  constant kIPASS_ENABLE_TRANSFERMsb        : integer := 0;  --IPASS_CONTROL:IPASS_ENABLE_TRANSFER
  constant kIPASS_ENABLE_TRANSFER           : integer := 0;  --IPASS_CONTROL:IPASS_ENABLE_TRANSFER
  --function kIPASS_CONTROLRec return XReg2_t; -- Register Record function commented out due to programmable attributes

end package;

package body PkgCPLD_INTERFACE_REGMAP is

  -- function kSIGNATURE_REGISTERRec not implemented because SIGNATURE_REGISTER has programmable attributes
  ---- Return the record of register kSIGNATURE_REGISTER
  --function kSIGNATURE_REGISTERRec return XReg2_t is
  --  variable Rec : XReg2_t;
  --begin
  --  Rec := kXRegDefault;
  --  Rec.version := 1;
  --  Rec.offset := XAddrResize(X"0");
  --  Rec.size := 32;
  --  Rec.readable := true;
  --  Rec.writable := false;
  --  Rec.wmask := XRegResize(X"ffffffff");
  --  Rec.rmask := XRegResize(X"ffffffff");
  --  Rec.strobemask := XRegResize(X"00000000");
  --  Rec.clearablemask := XRegResize(X"00000000");
  --  -- no initial values specified
  --  -- Single-bit bitfields are not listed here because the default for msblookup* is msb=lsb.
  --  Rec.msblookupw(kPRODUCT_SIGNATURE) := kPRODUCT_SIGNATUREMsb;
  --  Rec.msblookupr(kPRODUCT_SIGNATURE) := kPRODUCT_SIGNATUREMsb;
  --  Rec.isreg := true;
  --  --synopsys translate_off
  --  Rec.name := rs("SIGNATURE_REGISTER");
  --  --synopsys translate_on
  --  return Rec;
  --end function kSIGNATURE_REGISTERRec;

  -- function kSCRATCH_REGISTERRec not implemented because SCRATCH_REGISTER has programmable attributes
  ---- Return the record of register kSCRATCH_REGISTER
  --function kSCRATCH_REGISTERRec return XReg2_t is
  --  variable Rec : XReg2_t;
  --begin
  --  Rec := kXRegDefault;
  --  Rec.version := 1;
  --  Rec.offset := XAddrResize(X"C");
  --  Rec.size := 32;
  --  Rec.readable := true;
  --  Rec.writable := true;
  --  Rec.wmask := XRegResize(X"ffffffff");
  --  Rec.rmask := XRegResize(X"ffffffff");
  --  Rec.strobemask := XRegResize(X"00000000");
  --  Rec.clearablemask := XRegResize(X"00000000");
  --  -- no initial values specified
  --  -- no bitfields specified
  --  Rec.isreg := true;
  --  --synopsys translate_off
  --  Rec.name := rs("SCRATCH_REGISTER");
  --  --synopsys translate_on
  --  return Rec;
  --end function kSCRATCH_REGISTERRec;

  -- function kMOTHERBOARD_CPLD_DIVIDERRec not implemented because MOTHERBOARD_CPLD_DIVIDER has programmable attributes
  ---- Return the record of register kMOTHERBOARD_CPLD_DIVIDER
  --function kMOTHERBOARD_CPLD_DIVIDERRec return XReg2_t is
  --  variable Rec : XReg2_t;
  --begin
  --  Rec := kXRegDefault;
  --  Rec.version := 1;
  --  Rec.offset := XAddrResize(X"20");
  --  Rec.size := 32;
  --  Rec.readable := true;
  --  Rec.writable := true;
  --  Rec.wmask := XRegResize(X"0000ffff");
  --  Rec.rmask := XRegResize(X"0000ffff");
  --  Rec.strobemask := XRegResize(X"00000000");
  --  Rec.clearablemask := XRegResize(X"00000000");
  --  Rec.initialvalue := XRegResize(X"00000002");
  --  -- Single-bit bitfields are not listed here because the default for msblookup* is msb=lsb.
  --  Rec.msblookupw(kMB_DIVIDER) := kMB_DIVIDERMsb;
  --  Rec.msblookupr(kMB_DIVIDER) := kMB_DIVIDERMsb;
  --  Rec.isreg := true;
  --  --synopsys translate_off
  --  Rec.name := rs("MOTHERBOARD_CPLD_DIVIDER");
  --  --synopsys translate_on
  --  return Rec;
  --end function kMOTHERBOARD_CPLD_DIVIDERRec;

  -- function kDAUGHTERBOARD_CPLD_DIVIDERRec not implemented because DAUGHTERBOARD_CPLD_DIVIDER has programmable attributes
  ---- Return the record of register kDAUGHTERBOARD_CPLD_DIVIDER
  --function kDAUGHTERBOARD_CPLD_DIVIDERRec return XReg2_t is
  --  variable Rec : XReg2_t;
  --begin
  --  Rec := kXRegDefault;
  --  Rec.version := 1;
  --  Rec.offset := XAddrResize(X"24");
  --  Rec.size := 32;
  --  Rec.readable := true;
  --  Rec.writable := true;
  --  Rec.wmask := XRegResize(X"0000ffff");
  --  Rec.rmask := XRegResize(X"0000ffff");
  --  Rec.strobemask := XRegResize(X"00000000");
  --  Rec.clearablemask := XRegResize(X"00000000");
  --  Rec.initialvalue := XRegResize(X"00000005");
  --  -- Single-bit bitfields are not listed here because the default for msblookup* is msb=lsb.
  --  Rec.msblookupw(kDB_DIVIDER) := kDB_DIVIDERMsb;
  --  Rec.msblookupr(kDB_DIVIDER) := kDB_DIVIDERMsb;
  --  Rec.isreg := true;
  --  --synopsys translate_off
  --  Rec.name := rs("DAUGHTERBOARD_CPLD_DIVIDER");
  --  --synopsys translate_on
  --  return Rec;
  --end function kDAUGHTERBOARD_CPLD_DIVIDERRec;

  -- function kIPASS_CONTROLRec not implemented because IPASS_CONTROL has programmable attributes
  ---- Return the record of register kIPASS_CONTROL
  --function kIPASS_CONTROLRec return XReg2_t is
  --  variable Rec : XReg2_t;
  --begin
  --  Rec := kXRegDefault;
  --  Rec.version := 1;
  --  Rec.offset := XAddrResize(X"10");
  --  Rec.size := 32;
  --  Rec.readable := true;
  --  Rec.writable := true;
  --  Rec.wmask := XRegResize(X"00000001");
  --  Rec.rmask := XRegResize(X"00000001");
  --  Rec.strobemask := XRegResize(X"00000000");
  --  Rec.clearablemask := XRegResize(X"00000000");
  --  -- no initial values specified
  --  -- Single-bit bitfields are not listed here because the default for msblookup* is msb=lsb.
  --  Rec.isreg := true;
  --  --synopsys translate_off
  --  Rec.name := rs("IPASS_CONTROL");
  --  --synopsys translate_on
  --  return Rec;
  --end function kIPASS_CONTROLRec;

end package body;
