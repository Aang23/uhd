-------------------------------------------------------------------------------
--
-- File: PkgDIO_REGMAP.vhd
-- Author: Autogenerated by XmlParse
-- Original Project: --
-- Date: --
--
-------------------------------------------------------------------------------
-- (c) 2019 Copyright National Instruments Corporation
-- All Rights Reserved
-- National Instruments Internal Information
-------------------------------------------------------------------------------
--
-- Purpose:
--   The constants in this file are autogenerated by XmlParse.
--
-------------------------------------------------------------------------------

library ieee;
  use ieee.std_logic_1164.all;
  use ieee.numeric_std.all;
library work;
  use work.PkgXReg.all;
  --synopsys translate_off
  use work.PkgNiSim.all;
  --synopsys translate_on

package PkgDIO_REGMAP is

--===============================================================================
-- A numerically ordered list of registers and their HDL source files
--===============================================================================

  -- DIO_MASTER_REGISTER    : 0x0 (x4xx_dio.v)
  -- DIO_DIRECTION_REGISTER : 0x4 (x4xx_dio.v)
  -- DIO_INPUT_REGISTER     : 0x8 (x4xx_dio.v)
  -- DIO_OUTPUT_REGISTER    : 0xC (x4xx_dio.v)

--===============================================================================
-- RegTypes
--===============================================================================

--===============================================================================
-- Register Group DIO_REGS
--===============================================================================

  -- DIO_MASTER_REGISTER Register (from x4xx_dio.v)
  constant kDIO_MASTER_REGISTER : integer := 16#0#; -- Register Offset
  constant kDIO_MASTER_REGISTERSize: integer := 32;  -- register width in bits
  constant kDIO_MASTER_REGISTERMask : std_logic_vector(31 downto 0) := X"0fff0fff";
  constant kDIO_MASTER_ASize       : integer := 12;  --DIO_MASTER_REGISTER:DIO_MASTER_A
  constant kDIO_MASTER_AMsb        : integer := 11;  --DIO_MASTER_REGISTER:DIO_MASTER_A
  constant kDIO_MASTER_A           : integer :=  0;  --DIO_MASTER_REGISTER:DIO_MASTER_A
  constant kDIO_MASTER_BSize       : integer := 12;  --DIO_MASTER_REGISTER:DIO_MASTER_B
  constant kDIO_MASTER_BMsb        : integer := 27;  --DIO_MASTER_REGISTER:DIO_MASTER_B
  constant kDIO_MASTER_B           : integer := 16;  --DIO_MASTER_REGISTER:DIO_MASTER_B
  function kDIO_MASTER_REGISTERRec return XReg2_t; -- Register Record function

  -- DIO_DIRECTION_REGISTER Register (from x4xx_dio.v)
  constant kDIO_DIRECTION_REGISTER : integer := 16#4#; -- Register Offset
  constant kDIO_DIRECTION_REGISTERSize: integer := 32;  -- register width in bits
  constant kDIO_DIRECTION_REGISTERMask : std_logic_vector(31 downto 0) := X"0fff0fff";
  constant kDIO_DIRECTION_ASize       : integer := 12;  --DIO_DIRECTION_REGISTER:DIO_DIRECTION_A
  constant kDIO_DIRECTION_AMsb        : integer := 11;  --DIO_DIRECTION_REGISTER:DIO_DIRECTION_A
  constant kDIO_DIRECTION_A           : integer :=  0;  --DIO_DIRECTION_REGISTER:DIO_DIRECTION_A
  constant kDIO_DIRECTION_BSize       : integer := 12;  --DIO_DIRECTION_REGISTER:DIO_DIRECTION_B
  constant kDIO_DIRECTION_BMsb        : integer := 27;  --DIO_DIRECTION_REGISTER:DIO_DIRECTION_B
  constant kDIO_DIRECTION_B           : integer := 16;  --DIO_DIRECTION_REGISTER:DIO_DIRECTION_B
  function kDIO_DIRECTION_REGISTERRec return XReg2_t; -- Register Record function

  -- DIO_INPUT_REGISTER Register (from x4xx_dio.v)
  constant kDIO_INPUT_REGISTER : integer := 16#8#; -- Register Offset
  constant kDIO_INPUT_REGISTERSize: integer := 32;  -- register width in bits
  constant kDIO_INPUT_REGISTERMask : std_logic_vector(31 downto 0) := X"0fff0fff";
  constant kDIO_INPUT_ASize       : integer := 12;  --DIO_INPUT_REGISTER:DIO_INPUT_A
  constant kDIO_INPUT_AMsb        : integer := 11;  --DIO_INPUT_REGISTER:DIO_INPUT_A
  constant kDIO_INPUT_A           : integer :=  0;  --DIO_INPUT_REGISTER:DIO_INPUT_A
  constant kDIO_INPUT_BSize       : integer := 12;  --DIO_INPUT_REGISTER:DIO_INPUT_B
  constant kDIO_INPUT_BMsb        : integer := 27;  --DIO_INPUT_REGISTER:DIO_INPUT_B
  constant kDIO_INPUT_B           : integer := 16;  --DIO_INPUT_REGISTER:DIO_INPUT_B
  function kDIO_INPUT_REGISTERRec return XReg2_t; -- Register Record function

  -- DIO_OUTPUT_REGISTER Register (from x4xx_dio.v)
  constant kDIO_OUTPUT_REGISTER : integer := 16#C#; -- Register Offset
  constant kDIO_OUTPUT_REGISTERSize: integer := 32;  -- register width in bits
  constant kDIO_OUTPUT_REGISTERMask : std_logic_vector(31 downto 0) := X"0fff0fff";
  constant kDIO_OUTPUT_ASize       : integer := 12;  --DIO_OUTPUT_REGISTER:DIO_OUTPUT_A
  constant kDIO_OUTPUT_AMsb        : integer := 11;  --DIO_OUTPUT_REGISTER:DIO_OUTPUT_A
  constant kDIO_OUTPUT_A           : integer :=  0;  --DIO_OUTPUT_REGISTER:DIO_OUTPUT_A
  constant kDIO_OUTPUT_BSize       : integer := 12;  --DIO_OUTPUT_REGISTER:DIO_OUTPUT_B
  constant kDIO_OUTPUT_BMsb        : integer := 27;  --DIO_OUTPUT_REGISTER:DIO_OUTPUT_B
  constant kDIO_OUTPUT_B           : integer := 16;  --DIO_OUTPUT_REGISTER:DIO_OUTPUT_B
  function kDIO_OUTPUT_REGISTERRec return XReg2_t; -- Register Record function

end package;

package body PkgDIO_REGMAP is

  -- Return the record of register kDIO_MASTER_REGISTER
  function kDIO_MASTER_REGISTERRec return XReg2_t is
    variable Rec : XReg2_t;
  begin
    Rec := kXRegDefault;
    Rec.version := 1;
    Rec.offset := XAddrResize(X"0");
    Rec.size := 32;
    Rec.readable := true;
    Rec.writable := true;
    Rec.wmask := XRegResize(X"0fff0fff");
    Rec.rmask := XRegResize(X"0fff0fff");
    Rec.strobemask := XRegResize(X"00000000");
    Rec.clearablemask := XRegResize(X"00000000");
    Rec.initialvalue := XRegResize(X"00000000");
    -- Single-bit bitfields are not listed here because the default for msblookup* is msb=lsb.
    Rec.msblookupw(kDIO_MASTER_A) := kDIO_MASTER_AMsb;
    Rec.msblookupw(kDIO_MASTER_B) := kDIO_MASTER_BMsb;
    Rec.msblookupr(kDIO_MASTER_A) := kDIO_MASTER_AMsb;
    Rec.msblookupr(kDIO_MASTER_B) := kDIO_MASTER_BMsb;
    Rec.isreg := true;
    --synopsys translate_off
    Rec.name := rs("DIO_MASTER_REGISTER");
    --synopsys translate_on
    return Rec;
  end function kDIO_MASTER_REGISTERRec;

  -- Return the record of register kDIO_DIRECTION_REGISTER
  function kDIO_DIRECTION_REGISTERRec return XReg2_t is
    variable Rec : XReg2_t;
  begin
    Rec := kXRegDefault;
    Rec.version := 1;
    Rec.offset := XAddrResize(X"4");
    Rec.size := 32;
    Rec.readable := true;
    Rec.writable := true;
    Rec.wmask := XRegResize(X"0fff0fff");
    Rec.rmask := XRegResize(X"0fff0fff");
    Rec.strobemask := XRegResize(X"00000000");
    Rec.clearablemask := XRegResize(X"00000000");
    Rec.initialvalue := XRegResize(X"00000000");
    -- Single-bit bitfields are not listed here because the default for msblookup* is msb=lsb.
    Rec.msblookupw(kDIO_DIRECTION_A) := kDIO_DIRECTION_AMsb;
    Rec.msblookupw(kDIO_DIRECTION_B) := kDIO_DIRECTION_BMsb;
    Rec.msblookupr(kDIO_DIRECTION_A) := kDIO_DIRECTION_AMsb;
    Rec.msblookupr(kDIO_DIRECTION_B) := kDIO_DIRECTION_BMsb;
    Rec.isreg := true;
    --synopsys translate_off
    Rec.name := rs("DIO_DIRECTION_REGISTER");
    --synopsys translate_on
    return Rec;
  end function kDIO_DIRECTION_REGISTERRec;

  -- Return the record of register kDIO_INPUT_REGISTER
  function kDIO_INPUT_REGISTERRec return XReg2_t is
    variable Rec : XReg2_t;
  begin
    Rec := kXRegDefault;
    Rec.version := 1;
    Rec.offset := XAddrResize(X"8");
    Rec.size := 32;
    Rec.readable := true;
    Rec.writable := false;
    Rec.wmask := XRegResize(X"0fff0fff");
    Rec.rmask := XRegResize(X"0fff0fff");
    Rec.strobemask := XRegResize(X"00000000");
    Rec.clearablemask := XRegResize(X"00000000");
    -- no initial values specified
    -- Single-bit bitfields are not listed here because the default for msblookup* is msb=lsb.
    Rec.msblookupw(kDIO_INPUT_A) := kDIO_INPUT_AMsb;
    Rec.msblookupw(kDIO_INPUT_B) := kDIO_INPUT_BMsb;
    Rec.msblookupr(kDIO_INPUT_A) := kDIO_INPUT_AMsb;
    Rec.msblookupr(kDIO_INPUT_B) := kDIO_INPUT_BMsb;
    Rec.isreg := true;
    --synopsys translate_off
    Rec.name := rs("DIO_INPUT_REGISTER");
    --synopsys translate_on
    return Rec;
  end function kDIO_INPUT_REGISTERRec;

  -- Return the record of register kDIO_OUTPUT_REGISTER
  function kDIO_OUTPUT_REGISTERRec return XReg2_t is
    variable Rec : XReg2_t;
  begin
    Rec := kXRegDefault;
    Rec.version := 1;
    Rec.offset := XAddrResize(X"C");
    Rec.size := 32;
    Rec.readable := true;
    Rec.writable := true;
    Rec.wmask := XRegResize(X"0fff0fff");
    Rec.rmask := XRegResize(X"0fff0fff");
    Rec.strobemask := XRegResize(X"00000000");
    Rec.clearablemask := XRegResize(X"00000000");
    Rec.initialvalue := XRegResize(X"00000000");
    -- Single-bit bitfields are not listed here because the default for msblookup* is msb=lsb.
    Rec.msblookupw(kDIO_OUTPUT_A) := kDIO_OUTPUT_AMsb;
    Rec.msblookupw(kDIO_OUTPUT_B) := kDIO_OUTPUT_BMsb;
    Rec.msblookupr(kDIO_OUTPUT_A) := kDIO_OUTPUT_AMsb;
    Rec.msblookupr(kDIO_OUTPUT_B) := kDIO_OUTPUT_BMsb;
    Rec.isreg := true;
    --synopsys translate_off
    Rec.name := rs("DIO_OUTPUT_REGISTER");
    --synopsys translate_on
    return Rec;
  end function kDIO_OUTPUT_REGISTERRec;

end package body;
