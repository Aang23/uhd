---------------------------------------------------------------------
--
-- Copyright 2021 Ettus Research, A National Instruments Brand
-- SPDX-License-Identifier: LGPL-3.0-or-later
--
-- Module: PkgGLOBAL_REGS_REGMAP.vhd
--
-- Purpose:
--   The constants in this file are autogenerated by XmlParse.
--
----------------------------------------------------------------------
library ieee;
  use ieee.std_logic_1164.all;
  use ieee.numeric_std.all;

package PkgGLOBAL_REGS_REGMAP is

--===============================================================================
-- A numerically ordered list of registers and their HDL source files
--===============================================================================

  -- COMPAT_NUM_REG         : 0x0 (x4xx_global_regs.v)
  -- DATESTAMP_REG          : 0x4 (x4xx_global_regs.v)
  -- GIT_HASH_REG           : 0x8 (x4xx_global_regs.v)
  -- SCRATCH_REG            : 0xC (x4xx_global_regs.v)
  -- DEVICE_ID_REG          : 0x10 (x4xx_global_regs.v)
  -- RFNOC_INFO_REG         : 0x14 (x4xx_global_regs.v)
  -- CLOCK_CTRL_REG         : 0x18 (x4xx_global_regs.v)
  -- PPS_CTRL_REG           : 0x1C (x4xx_global_regs.v)
  -- CHDR_CLK_RATE_REG      : 0x20 (x4xx_global_regs.v)
  -- CHDR_CLK_COUNT_REG     : 0x24 (x4xx_global_regs.v)
  -- GPS_CTRL_REG           : 0x38 (x4xx_global_regs.v)
  -- GPS_STATUS_REG         : 0x3C (x4xx_global_regs.v)
  -- DBOARD_CTRL_REG        : 0x40 (x4xx_global_regs.v)
  -- DBOARD_STATUS_REG      : 0x44 (x4xx_global_regs.v)
  -- NUM_TIMEKEEPERS_REG    : 0x48 (x4xx_global_regs.v)
  -- SERIAL_NUM_LOW_REG     : 0x4C (x4xx_global_regs.v)
  -- SERIAL_NUM_HIGH_REG    : 0x50 (x4xx_global_regs.v)
  -- MFG_TEST_CTRL_REG      : 0x54 (x4xx_global_regs.v)
  -- MFG_TEST_STATUS_REG    : 0x58 (x4xx_global_regs.v)
  -- QSFP_PORT_0_0_INFO_REG : 0x60 (x4xx_global_regs.v)
  -- QSFP_PORT_0_1_INFO_REG : 0x64 (x4xx_global_regs.v)
  -- QSFP_PORT_0_2_INFO_REG : 0x68 (x4xx_global_regs.v)
  -- QSFP_PORT_0_3_INFO_REG : 0x6C (x4xx_global_regs.v)
  -- QSFP_PORT_1_0_INFO_REG : 0x70 (x4xx_global_regs.v)
  -- QSFP_PORT_1_1_INFO_REG : 0x74 (x4xx_global_regs.v)
  -- QSFP_PORT_1_2_INFO_REG : 0x78 (x4xx_global_regs.v)
  -- QSFP_PORT_1_3_INFO_REG : 0x7C (x4xx_global_regs.v)

--===============================================================================
-- RegTypes
--===============================================================================

--===============================================================================
-- Register Group GLOBAL_REGS
--===============================================================================

  -- COMPAT_NUM_REG Register (from x4xx_global_regs.v)
  constant kCOMPAT_NUM_REG : integer := 16#0#; -- Register Offset
  constant kCOMPAT_NUM_REGSize: integer := 32;  -- register width in bits
  constant kCOMPAT_NUM_REGMask : std_logic_vector(31 downto 0) := X"ffffffff";
  constant kCOMPAT_MINORSize       : integer := 16;  --COMPAT_NUM_REG:COMPAT_MINOR
  constant kCOMPAT_MINORMsb        : integer := 15;  --COMPAT_NUM_REG:COMPAT_MINOR
  constant kCOMPAT_MINOR           : integer :=  0;  --COMPAT_NUM_REG:COMPAT_MINOR
  constant kCOMPAT_MAJORSize       : integer := 16;  --COMPAT_NUM_REG:COMPAT_MAJOR
  constant kCOMPAT_MAJORMsb        : integer := 31;  --COMPAT_NUM_REG:COMPAT_MAJOR
  constant kCOMPAT_MAJOR           : integer := 16;  --COMPAT_NUM_REG:COMPAT_MAJOR
  --function kCOMPAT_NUM_REGRec return XReg2_t; -- Register Record function commented out due to programmable attributes

  -- DATESTAMP_REG Register (from x4xx_global_regs.v)
  constant kDATESTAMP_REG : integer := 16#4#; -- Register Offset
  constant kDATESTAMP_REGSize: integer := 32;  -- register width in bits
  constant kDATESTAMP_REGMask : std_logic_vector(31 downto 0) := X"ffffffff";
  constant kSECONDSSize       : integer := 6;  --DATESTAMP_REG:SECONDS
  constant kSECONDSMsb        : integer := 5;  --DATESTAMP_REG:SECONDS
  constant kSECONDS           : integer := 0;  --DATESTAMP_REG:SECONDS
  constant kMINUTESSize       : integer :=  6;  --DATESTAMP_REG:MINUTES
  constant kMINUTESMsb        : integer := 11;  --DATESTAMP_REG:MINUTES
  constant kMINUTES           : integer :=  6;  --DATESTAMP_REG:MINUTES
  constant kHOURSize       : integer :=  5;  --DATESTAMP_REG:HOUR
  constant kHOURMsb        : integer := 16;  --DATESTAMP_REG:HOUR
  constant kHOUR           : integer := 12;  --DATESTAMP_REG:HOUR
  constant kYEARSize       : integer :=  6;  --DATESTAMP_REG:YEAR
  constant kYEARMsb        : integer := 22;  --DATESTAMP_REG:YEAR
  constant kYEAR           : integer := 17;  --DATESTAMP_REG:YEAR
  constant kMONTHSize       : integer :=  4;  --DATESTAMP_REG:MONTH
  constant kMONTHMsb        : integer := 26;  --DATESTAMP_REG:MONTH
  constant kMONTH           : integer := 23;  --DATESTAMP_REG:MONTH
  constant kDAYSize       : integer :=  5;  --DATESTAMP_REG:DAY
  constant kDAYMsb        : integer := 31;  --DATESTAMP_REG:DAY
  constant kDAY           : integer := 27;  --DATESTAMP_REG:DAY
  --function kDATESTAMP_REGRec return XReg2_t; -- Register Record function commented out due to programmable attributes

  -- GIT_HASH_REG Register (from x4xx_global_regs.v)
  constant kGIT_HASH_REG : integer := 16#8#; -- Register Offset
  constant kGIT_HASH_REGSize: integer := 32;  -- register width in bits
  constant kGIT_HASH_REGMask : std_logic_vector(31 downto 0) := X"00000000";
  --function kGIT_HASH_REGRec return XReg2_t; -- Register Record function commented out due to programmable attributes

  -- SCRATCH_REG Register (from x4xx_global_regs.v)
  constant kSCRATCH_REG : integer := 16#C#; -- Register Offset
  constant kSCRATCH_REGSize: integer := 32;  -- register width in bits
  constant kSCRATCH_REGMask : std_logic_vector(31 downto 0) := X"00000000";
  --function kSCRATCH_REGRec return XReg2_t; -- Register Record function commented out due to programmable attributes

  -- DEVICE_ID_REG Register (from x4xx_global_regs.v)
  constant kDEVICE_ID_REG : integer := 16#10#; -- Register Offset
  constant kDEVICE_ID_REGSize: integer := 32;  -- register width in bits
  constant kDEVICE_ID_REGMask : std_logic_vector(31 downto 0) := X"8000ffff";
  constant kDEVICE_IDSize       : integer := 16;  --DEVICE_ID_REG:DEVICE_ID
  constant kDEVICE_IDMsb        : integer := 15;  --DEVICE_ID_REG:DEVICE_ID
  constant kDEVICE_ID           : integer :=  0;  --DEVICE_ID_REG:DEVICE_ID
  constant kPCIE_PRESENT_BITSize       : integer :=  1;  --DEVICE_ID_REG:PCIE_PRESENT_BIT
  constant kPCIE_PRESENT_BITMsb        : integer := 31;  --DEVICE_ID_REG:PCIE_PRESENT_BIT
  constant kPCIE_PRESENT_BIT           : integer := 31;  --DEVICE_ID_REG:PCIE_PRESENT_BIT
  --function kDEVICE_ID_REGRec return XReg2_t; -- Register Record function commented out due to programmable attributes

  -- RFNOC_INFO_REG Register (from x4xx_global_regs.v)
  constant kRFNOC_INFO_REG : integer := 16#14#; -- Register Offset
  constant kRFNOC_INFO_REGSize: integer := 32;  -- register width in bits
  constant kRFNOC_INFO_REGMask : std_logic_vector(31 downto 0) := X"ffffffff";
  constant kRFNOC_PROTO_MINORSize       : integer := 8;  --RFNOC_INFO_REG:RFNOC_PROTO_MINOR
  constant kRFNOC_PROTO_MINORMsb        : integer := 7;  --RFNOC_INFO_REG:RFNOC_PROTO_MINOR
  constant kRFNOC_PROTO_MINOR           : integer := 0;  --RFNOC_INFO_REG:RFNOC_PROTO_MINOR
  constant kRFNOC_PROTO_MAJORSize       : integer :=  8;  --RFNOC_INFO_REG:RFNOC_PROTO_MAJOR
  constant kRFNOC_PROTO_MAJORMsb        : integer := 15;  --RFNOC_INFO_REG:RFNOC_PROTO_MAJOR
  constant kRFNOC_PROTO_MAJOR           : integer :=  8;  --RFNOC_INFO_REG:RFNOC_PROTO_MAJOR
  constant kCHDR_WIDTHSize       : integer := 16;  --RFNOC_INFO_REG:CHDR_WIDTH
  constant kCHDR_WIDTHMsb        : integer := 31;  --RFNOC_INFO_REG:CHDR_WIDTH
  constant kCHDR_WIDTH           : integer := 16;  --RFNOC_INFO_REG:CHDR_WIDTH
  --function kRFNOC_INFO_REGRec return XReg2_t; -- Register Record function commented out due to programmable attributes

  -- CLOCK_CTRL_REG Register (from x4xx_global_regs.v)
  constant kCLOCK_CTRL_REG : integer := 16#18#; -- Register Offset
  constant kCLOCK_CTRL_REGSize: integer := 32;  -- register width in bits
  constant kCLOCK_CTRL_REGMask : std_logic_vector(31 downto 0) := X"ffff033f";
  constant kPPS_SELECTSize       : integer := 2;  --CLOCK_CTRL_REG:PPS_SELECT
  constant kPPS_SELECTMsb        : integer := 1;  --CLOCK_CTRL_REG:PPS_SELECT
  constant kPPS_SELECT           : integer := 0;  --CLOCK_CTRL_REG:PPS_SELECT
    constant kPPS_ENUMSize : integer := 3;
    constant kPPS_INT_25MHZ : integer := 0;  -- enum value
    constant kPPS_INT_10MHZ : integer := 1;  -- enum value
    constant kPPS_EXT       : integer := 2;  -- enum value
  constant kREF_SELECTSize       : integer := 1;  --CLOCK_CTRL_REG:REF_SELECT
  constant kREF_SELECTMsb        : integer := 2;  --CLOCK_CTRL_REG:REF_SELECT
  constant kREF_SELECT           : integer := 2;  --CLOCK_CTRL_REG:REF_SELECT
  constant kREFCLK_LOCKEDSize       : integer := 1;  --CLOCK_CTRL_REG:REFCLK_LOCKED
  constant kREFCLK_LOCKEDMsb        : integer := 3;  --CLOCK_CTRL_REG:REFCLK_LOCKED
  constant kREFCLK_LOCKED           : integer := 3;  --CLOCK_CTRL_REG:REFCLK_LOCKED
  constant kTRIGGER_IO_SELECTSize       : integer := 2;  --CLOCK_CTRL_REG:TRIGGER_IO_SELECT
  constant kTRIGGER_IO_SELECTMsb        : integer := 5;  --CLOCK_CTRL_REG:TRIGGER_IO_SELECT
  constant kTRIGGER_IO_SELECT           : integer := 4;  --CLOCK_CTRL_REG:TRIGGER_IO_SELECT
    constant kTRIG_IO_ENUMSize : integer := 2;
    constant kTRIG_IO_INPUT      : integer := 0;  -- enum value
    constant kTRIG_IO_PPS_OUTPUT : integer := 1;  -- enum value
  constant kPLL_SYNC_TRIGGERSize       : integer := 1;  --CLOCK_CTRL_REG:PLL_SYNC_TRIGGER
  constant kPLL_SYNC_TRIGGERMsb        : integer := 8;  --CLOCK_CTRL_REG:PLL_SYNC_TRIGGER
  constant kPLL_SYNC_TRIGGER           : integer := 8;  --CLOCK_CTRL_REG:PLL_SYNC_TRIGGER
  constant kPLL_SYNC_DONESize       : integer := 1;  --CLOCK_CTRL_REG:PLL_SYNC_DONE
  constant kPLL_SYNC_DONEMsb        : integer := 9;  --CLOCK_CTRL_REG:PLL_SYNC_DONE
  constant kPLL_SYNC_DONE           : integer := 9;  --CLOCK_CTRL_REG:PLL_SYNC_DONE
  constant kPLL_SYNC_DELAYSize       : integer :=  8;  --CLOCK_CTRL_REG:PLL_SYNC_DELAY
  constant kPLL_SYNC_DELAYMsb        : integer := 23;  --CLOCK_CTRL_REG:PLL_SYNC_DELAY
  constant kPLL_SYNC_DELAY           : integer := 16;  --CLOCK_CTRL_REG:PLL_SYNC_DELAY
  constant kPPS_BRC_DELAYSize       : integer :=  8;  --CLOCK_CTRL_REG:PPS_BRC_DELAY
  constant kPPS_BRC_DELAYMsb        : integer := 31;  --CLOCK_CTRL_REG:PPS_BRC_DELAY
  constant kPPS_BRC_DELAY           : integer := 24;  --CLOCK_CTRL_REG:PPS_BRC_DELAY
  --function kCLOCK_CTRL_REGRec return XReg2_t; -- Register Record function commented out due to programmable attributes

  -- PPS_CTRL_REG Register (from x4xx_global_regs.v)
  constant kPPS_CTRL_REG : integer := 16#1C#; -- Register Offset
  constant kPPS_CTRL_REGSize: integer := 32;  -- register width in bits
  constant kPPS_CTRL_REGMask : std_logic_vector(31 downto 0) := X"b3ffffff";
  constant kPPS_PRC_DELAYSize       : integer := 26;  --PPS_CTRL_REG:PPS_PRC_DELAY
  constant kPPS_PRC_DELAYMsb        : integer := 25;  --PPS_CTRL_REG:PPS_PRC_DELAY
  constant kPPS_PRC_DELAY           : integer :=  0;  --PPS_CTRL_REG:PPS_PRC_DELAY
  constant kPRC_RC_DIVIDERSize       : integer :=  2;  --PPS_CTRL_REG:PRC_RC_DIVIDER
  constant kPRC_RC_DIVIDERMsb        : integer := 29;  --PPS_CTRL_REG:PRC_RC_DIVIDER
  constant kPRC_RC_DIVIDER           : integer := 28;  --PPS_CTRL_REG:PRC_RC_DIVIDER
  constant kPPS_RC_ENABLEDSize       : integer :=  1;  --PPS_CTRL_REG:PPS_RC_ENABLED
  constant kPPS_RC_ENABLEDMsb        : integer := 31;  --PPS_CTRL_REG:PPS_RC_ENABLED
  constant kPPS_RC_ENABLED           : integer := 31;  --PPS_CTRL_REG:PPS_RC_ENABLED
  --function kPPS_CTRL_REGRec return XReg2_t; -- Register Record function commented out due to programmable attributes

  -- CHDR_CLK_RATE_REG Register (from x4xx_global_regs.v)
  constant kCHDR_CLK_RATE_REG : integer := 16#20#; -- Register Offset
  constant kCHDR_CLK_RATE_REGSize: integer := 32;  -- register width in bits
  constant kCHDR_CLK_RATE_REGMask : std_logic_vector(31 downto 0) := X"ffffffff";
  constant kCHDR_CLKSize       : integer := 32;  --CHDR_CLK_RATE_REG:CHDR_CLK
  constant kCHDR_CLKMsb        : integer := 31;  --CHDR_CLK_RATE_REG:CHDR_CLK
  constant kCHDR_CLK           : integer :=  0;  --CHDR_CLK_RATE_REG:CHDR_CLK
    constant kCHDR_CLK_ENUMSize : integer := 1;
    constant kCHDR_CLK_VALUE : integer := 200000000;  -- enum value
  --function kCHDR_CLK_RATE_REGRec return XReg2_t; -- Register Record function commented out due to programmable attributes

  -- CHDR_CLK_COUNT_REG Register (from x4xx_global_regs.v)
  constant kCHDR_CLK_COUNT_REG : integer := 16#24#; -- Register Offset
  constant kCHDR_CLK_COUNT_REGSize: integer := 32;  -- register width in bits
  constant kCHDR_CLK_COUNT_REGMask : std_logic_vector(31 downto 0) := X"00000000";
  --function kCHDR_CLK_COUNT_REGRec return XReg2_t; -- Register Record function commented out due to programmable attributes

  -- GPS_CTRL_REG Register (from x4xx_global_regs.v)
  constant kGPS_CTRL_REG : integer := 16#38#; -- Register Offset
  constant kGPS_CTRL_REGSize: integer := 32;  -- register width in bits
  constant kGPS_CTRL_REGMask : std_logic_vector(31 downto 0) := X"00000000";
  --function kGPS_CTRL_REGRec return XReg2_t; -- Register Record function commented out due to programmable attributes

  -- GPS_STATUS_REG Register (from x4xx_global_regs.v)
  constant kGPS_STATUS_REG : integer := 16#3C#; -- Register Offset
  constant kGPS_STATUS_REGSize: integer := 32;  -- register width in bits
  constant kGPS_STATUS_REGMask : std_logic_vector(31 downto 0) := X"00000000";
  --function kGPS_STATUS_REGRec return XReg2_t; -- Register Record function commented out due to programmable attributes

  -- DBOARD_CTRL_REG Register (from x4xx_global_regs.v)
  constant kDBOARD_CTRL_REG : integer := 16#40#; -- Register Offset
  constant kDBOARD_CTRL_REGSize: integer := 32;  -- register width in bits
  constant kDBOARD_CTRL_REGMask : std_logic_vector(31 downto 0) := X"00000000";
  --function kDBOARD_CTRL_REGRec return XReg2_t; -- Register Record function commented out due to programmable attributes

  -- DBOARD_STATUS_REG Register (from x4xx_global_regs.v)
  constant kDBOARD_STATUS_REG : integer := 16#44#; -- Register Offset
  constant kDBOARD_STATUS_REGSize: integer := 32;  -- register width in bits
  constant kDBOARD_STATUS_REGMask : std_logic_vector(31 downto 0) := X"00000000";
  --function kDBOARD_STATUS_REGRec return XReg2_t; -- Register Record function commented out due to programmable attributes

  -- NUM_TIMEKEEPERS_REG Register (from x4xx_global_regs.v)
  constant kNUM_TIMEKEEPERS_REG : integer := 16#48#; -- Register Offset
  constant kNUM_TIMEKEEPERS_REGSize: integer := 32;  -- register width in bits
  constant kNUM_TIMEKEEPERS_REGMask : std_logic_vector(31 downto 0) := X"00000000";
  --function kNUM_TIMEKEEPERS_REGRec return XReg2_t; -- Register Record function commented out due to programmable attributes

  -- SERIAL_NUM_LOW_REG Register (from x4xx_global_regs.v)
  constant kSERIAL_NUM_LOW_REG : integer := 16#4C#; -- Register Offset
  constant kSERIAL_NUM_LOW_REGSize: integer := 32;  -- register width in bits
  constant kSERIAL_NUM_LOW_REGMask : std_logic_vector(31 downto 0) := X"00000000";
  --function kSERIAL_NUM_LOW_REGRec return XReg2_t; -- Register Record function commented out due to programmable attributes

  -- SERIAL_NUM_HIGH_REG Register (from x4xx_global_regs.v)
  constant kSERIAL_NUM_HIGH_REG : integer := 16#50#; -- Register Offset
  constant kSERIAL_NUM_HIGH_REGSize: integer := 32;  -- register width in bits
  constant kSERIAL_NUM_HIGH_REGMask : std_logic_vector(31 downto 0) := X"00000000";
  --function kSERIAL_NUM_HIGH_REGRec return XReg2_t; -- Register Record function commented out due to programmable attributes

  -- MFG_TEST_CTRL_REG Register (from x4xx_global_regs.v)
  constant kMFG_TEST_CTRL_REG : integer := 16#54#; -- Register Offset
  constant kMFG_TEST_CTRL_REGSize: integer := 32;  -- register width in bits
  constant kMFG_TEST_CTRL_REGMask : std_logic_vector(31 downto 0) := X"00000003";
  constant kMFG_TEST_EN_GTY_RCV_CLKSize       : integer := 1;  --MFG_TEST_CTRL_REG:MFG_TEST_EN_GTY_RCV_CLK
  constant kMFG_TEST_EN_GTY_RCV_CLKMsb        : integer := 0;  --MFG_TEST_CTRL_REG:MFG_TEST_EN_GTY_RCV_CLK
  constant kMFG_TEST_EN_GTY_RCV_CLK           : integer := 0;  --MFG_TEST_CTRL_REG:MFG_TEST_EN_GTY_RCV_CLK
  constant kMFG_TEST_EN_FABRIC_CLKSize       : integer := 1;  --MFG_TEST_CTRL_REG:MFG_TEST_EN_FABRIC_CLK
  constant kMFG_TEST_EN_FABRIC_CLKMsb        : integer := 1;  --MFG_TEST_CTRL_REG:MFG_TEST_EN_FABRIC_CLK
  constant kMFG_TEST_EN_FABRIC_CLK           : integer := 1;  --MFG_TEST_CTRL_REG:MFG_TEST_EN_FABRIC_CLK
  --function kMFG_TEST_CTRL_REGRec return XReg2_t; -- Register Record function commented out due to programmable attributes

  -- MFG_TEST_STATUS_REG Register (from x4xx_global_regs.v)
  constant kMFG_TEST_STATUS_REG : integer := 16#58#; -- Register Offset
  constant kMFG_TEST_STATUS_REGSize: integer := 32;  -- register width in bits
  constant kMFG_TEST_STATUS_REGMask : std_logic_vector(31 downto 0) := X"03ffffff";
  constant kMFG_TEST_FPGA_AUX_REF_FREQSize       : integer := 26;  --MFG_TEST_STATUS_REG:MFG_TEST_FPGA_AUX_REF_FREQ
  constant kMFG_TEST_FPGA_AUX_REF_FREQMsb        : integer := 25;  --MFG_TEST_STATUS_REG:MFG_TEST_FPGA_AUX_REF_FREQ
  constant kMFG_TEST_FPGA_AUX_REF_FREQ           : integer :=  0;  --MFG_TEST_STATUS_REG:MFG_TEST_FPGA_AUX_REF_FREQ
  --function kMFG_TEST_STATUS_REGRec return XReg2_t; -- Register Record function commented out due to programmable attributes

  -- QSFP_PORT_0_0_INFO_REG Register (from x4xx_global_regs.v)
  constant kQSFP_PORT_0_0_INFO_REG : integer := 16#60#; -- Register Offset
  constant kQSFP_PORT_0_0_INFO_REGSize: integer := 32;  -- register width in bits
  constant kQSFP_PORT_0_0_INFO_REGMask : std_logic_vector(31 downto 0) := X"00000000";
  --function kQSFP_PORT_0_0_INFO_REGRec return XReg2_t; -- Register Record function commented out due to programmable attributes

  -- QSFP_PORT_0_1_INFO_REG Register (from x4xx_global_regs.v)
  constant kQSFP_PORT_0_1_INFO_REG : integer := 16#64#; -- Register Offset
  constant kQSFP_PORT_0_1_INFO_REGSize: integer := 32;  -- register width in bits
  constant kQSFP_PORT_0_1_INFO_REGMask : std_logic_vector(31 downto 0) := X"00000000";
  --function kQSFP_PORT_0_1_INFO_REGRec return XReg2_t; -- Register Record function commented out due to programmable attributes

  -- QSFP_PORT_0_2_INFO_REG Register (from x4xx_global_regs.v)
  constant kQSFP_PORT_0_2_INFO_REG : integer := 16#68#; -- Register Offset
  constant kQSFP_PORT_0_2_INFO_REGSize: integer := 32;  -- register width in bits
  constant kQSFP_PORT_0_2_INFO_REGMask : std_logic_vector(31 downto 0) := X"00000000";
  --function kQSFP_PORT_0_2_INFO_REGRec return XReg2_t; -- Register Record function commented out due to programmable attributes

  -- QSFP_PORT_0_3_INFO_REG Register (from x4xx_global_regs.v)
  constant kQSFP_PORT_0_3_INFO_REG : integer := 16#6C#; -- Register Offset
  constant kQSFP_PORT_0_3_INFO_REGSize: integer := 32;  -- register width in bits
  constant kQSFP_PORT_0_3_INFO_REGMask : std_logic_vector(31 downto 0) := X"00000000";
  --function kQSFP_PORT_0_3_INFO_REGRec return XReg2_t; -- Register Record function commented out due to programmable attributes

  -- QSFP_PORT_1_0_INFO_REG Register (from x4xx_global_regs.v)
  constant kQSFP_PORT_1_0_INFO_REG : integer := 16#70#; -- Register Offset
  constant kQSFP_PORT_1_0_INFO_REGSize: integer := 32;  -- register width in bits
  constant kQSFP_PORT_1_0_INFO_REGMask : std_logic_vector(31 downto 0) := X"00000000";
  --function kQSFP_PORT_1_0_INFO_REGRec return XReg2_t; -- Register Record function commented out due to programmable attributes

  -- QSFP_PORT_1_1_INFO_REG Register (from x4xx_global_regs.v)
  constant kQSFP_PORT_1_1_INFO_REG : integer := 16#74#; -- Register Offset
  constant kQSFP_PORT_1_1_INFO_REGSize: integer := 32;  -- register width in bits
  constant kQSFP_PORT_1_1_INFO_REGMask : std_logic_vector(31 downto 0) := X"00000000";
  --function kQSFP_PORT_1_1_INFO_REGRec return XReg2_t; -- Register Record function commented out due to programmable attributes

  -- QSFP_PORT_1_2_INFO_REG Register (from x4xx_global_regs.v)
  constant kQSFP_PORT_1_2_INFO_REG : integer := 16#78#; -- Register Offset
  constant kQSFP_PORT_1_2_INFO_REGSize: integer := 32;  -- register width in bits
  constant kQSFP_PORT_1_2_INFO_REGMask : std_logic_vector(31 downto 0) := X"00000000";
  --function kQSFP_PORT_1_2_INFO_REGRec return XReg2_t; -- Register Record function commented out due to programmable attributes

  -- QSFP_PORT_1_3_INFO_REG Register (from x4xx_global_regs.v)
  constant kQSFP_PORT_1_3_INFO_REG : integer := 16#7C#; -- Register Offset
  constant kQSFP_PORT_1_3_INFO_REGSize: integer := 32;  -- register width in bits
  constant kQSFP_PORT_1_3_INFO_REGMask : std_logic_vector(31 downto 0) := X"00000000";
  --function kQSFP_PORT_1_3_INFO_REGRec return XReg2_t; -- Register Record function commented out due to programmable attributes

end package;

package body PkgGLOBAL_REGS_REGMAP is

  -- function kCOMPAT_NUM_REGRec not implemented because COMPAT_NUM_REG has programmable attributes
  ---- Return the record of register kCOMPAT_NUM_REG
  --function kCOMPAT_NUM_REGRec return XReg2_t is
  --  variable Rec : XReg2_t;
  --begin
  --  Rec := kXRegDefault;
  --  Rec.version := 1;
  --  Rec.offset := XAddrResize(X"0");
  --  Rec.size := 32;
  --  Rec.readable := true;
  --  Rec.writable := false;
  --  Rec.wmask := XRegResize(X"ffffffff");
  --  Rec.rmask := XRegResize(X"ffffffff");
  --  Rec.strobemask := XRegResize(X"00000000");
  --  Rec.clearablemask := XRegResize(X"00000000");
  --  -- no initial values specified
  --  -- Single-bit bitfields are not listed here because the default for msblookup* is msb=lsb.
  --  Rec.msblookupw(kCOMPAT_MINOR) := kCOMPAT_MINORMsb;
  --  Rec.msblookupw(kCOMPAT_MAJOR) := kCOMPAT_MAJORMsb;
  --  Rec.msblookupr(kCOMPAT_MINOR) := kCOMPAT_MINORMsb;
  --  Rec.msblookupr(kCOMPAT_MAJOR) := kCOMPAT_MAJORMsb;
  --  Rec.isreg := true;
  --  --synopsys translate_off
  --  Rec.name := rs("COMPAT_NUM_REG");
  --  --synopsys translate_on
  --  return Rec;
  --end function kCOMPAT_NUM_REGRec;

  -- function kDATESTAMP_REGRec not implemented because DATESTAMP_REG has programmable attributes
  ---- Return the record of register kDATESTAMP_REG
  --function kDATESTAMP_REGRec return XReg2_t is
  --  variable Rec : XReg2_t;
  --begin
  --  Rec := kXRegDefault;
  --  Rec.version := 1;
  --  Rec.offset := XAddrResize(X"4");
  --  Rec.size := 32;
  --  Rec.readable := true;
  --  Rec.writable := false;
  --  Rec.wmask := XRegResize(X"ffffffff");
  --  Rec.rmask := XRegResize(X"ffffffff");
  --  Rec.strobemask := XRegResize(X"00000000");
  --  Rec.clearablemask := XRegResize(X"00000000");
  --  -- no initial values specified
  --  -- Single-bit bitfields are not listed here because the default for msblookup* is msb=lsb.
  --  Rec.msblookupw(kSECONDS) := kSECONDSMsb;
  --  Rec.msblookupw(kMINUTES) := kMINUTESMsb;
  --  Rec.msblookupw(kHOUR) := kHOURMsb;
  --  Rec.msblookupw(kYEAR) := kYEARMsb;
  --  Rec.msblookupw(kMONTH) := kMONTHMsb;
  --  Rec.msblookupw(kDAY) := kDAYMsb;
  --  Rec.msblookupr(kSECONDS) := kSECONDSMsb;
  --  Rec.msblookupr(kMINUTES) := kMINUTESMsb;
  --  Rec.msblookupr(kHOUR) := kHOURMsb;
  --  Rec.msblookupr(kYEAR) := kYEARMsb;
  --  Rec.msblookupr(kMONTH) := kMONTHMsb;
  --  Rec.msblookupr(kDAY) := kDAYMsb;
  --  Rec.isreg := true;
  --  --synopsys translate_off
  --  Rec.name := rs("DATESTAMP_REG");
  --  --synopsys translate_on
  --  return Rec;
  --end function kDATESTAMP_REGRec;

  -- function kGIT_HASH_REGRec not implemented because GIT_HASH_REG has programmable attributes
  ---- Return the record of register kGIT_HASH_REG
  --function kGIT_HASH_REGRec return XReg2_t is
  --  variable Rec : XReg2_t;
  --begin
  --  Rec := kXRegDefault;
  --  Rec.version := 1;
  --  Rec.offset := XAddrResize(X"8");
  --  Rec.size := 32;
  --  Rec.readable := true;
  --  Rec.writable := false;
  --  Rec.wmask := XRegResize(X"00000000");
  --  Rec.rmask := XRegResize(X"ffffffff");
  --  Rec.strobemask := XRegResize(X"00000000");
  --  Rec.clearablemask := XRegResize(X"00000000");
  --  -- no initial values specified
  --  -- no bitfields specified
  --  Rec.isreg := true;
  --  --synopsys translate_off
  --  Rec.name := rs("GIT_HASH_REG");
  --  --synopsys translate_on
  --  return Rec;
  --end function kGIT_HASH_REGRec;

  -- function kSCRATCH_REGRec not implemented because SCRATCH_REG has programmable attributes
  ---- Return the record of register kSCRATCH_REG
  --function kSCRATCH_REGRec return XReg2_t is
  --  variable Rec : XReg2_t;
  --begin
  --  Rec := kXRegDefault;
  --  Rec.version := 1;
  --  Rec.offset := XAddrResize(X"C");
  --  Rec.size := 32;
  --  Rec.readable := true;
  --  Rec.writable := true;
  --  Rec.wmask := XRegResize(X"ffffffff");
  --  Rec.rmask := XRegResize(X"ffffffff");
  --  Rec.strobemask := XRegResize(X"00000000");
  --  Rec.clearablemask := XRegResize(X"00000000");
  --  -- no initial values specified
  --  -- no bitfields specified
  --  Rec.isreg := true;
  --  --synopsys translate_off
  --  Rec.name := rs("SCRATCH_REG");
  --  --synopsys translate_on
  --  return Rec;
  --end function kSCRATCH_REGRec;

  -- function kDEVICE_ID_REGRec not implemented because DEVICE_ID_REG has programmable attributes
  ---- Return the record of register kDEVICE_ID_REG
  --function kDEVICE_ID_REGRec return XReg2_t is
  --  variable Rec : XReg2_t;
  --begin
  --  Rec := kXRegDefault;
  --  Rec.version := 1;
  --  Rec.offset := XAddrResize(X"10");
  --  Rec.size := 32;
  --  Rec.readable := true;
  --  Rec.writable := true;
  --  Rec.wmask := XRegResize(X"8000ffff");
  --  Rec.rmask := XRegResize(X"8000ffff");
  --  Rec.strobemask := XRegResize(X"00000000");
  --  Rec.clearablemask := XRegResize(X"00000000");
  --  -- no initial values specified
  --  -- Single-bit bitfields are not listed here because the default for msblookup* is msb=lsb.
  --  Rec.msblookupw(kDEVICE_ID) := kDEVICE_IDMsb;
  --  Rec.msblookupr(kDEVICE_ID) := kDEVICE_IDMsb;
  --  Rec.isreg := true;
  --  --synopsys translate_off
  --  Rec.name := rs("DEVICE_ID_REG");
  --  --synopsys translate_on
  --  return Rec;
  --end function kDEVICE_ID_REGRec;

  -- function kRFNOC_INFO_REGRec not implemented because RFNOC_INFO_REG has programmable attributes
  ---- Return the record of register kRFNOC_INFO_REG
  --function kRFNOC_INFO_REGRec return XReg2_t is
  --  variable Rec : XReg2_t;
  --begin
  --  Rec := kXRegDefault;
  --  Rec.version := 1;
  --  Rec.offset := XAddrResize(X"14");
  --  Rec.size := 32;
  --  Rec.readable := true;
  --  Rec.writable := false;
  --  Rec.wmask := XRegResize(X"ffffffff");
  --  Rec.rmask := XRegResize(X"ffffffff");
  --  Rec.strobemask := XRegResize(X"00000000");
  --  Rec.clearablemask := XRegResize(X"00000000");
  --  -- no initial values specified
  --  -- Single-bit bitfields are not listed here because the default for msblookup* is msb=lsb.
  --  Rec.msblookupw(kRFNOC_PROTO_MINOR) := kRFNOC_PROTO_MINORMsb;
  --  Rec.msblookupw(kRFNOC_PROTO_MAJOR) := kRFNOC_PROTO_MAJORMsb;
  --  Rec.msblookupw(kCHDR_WIDTH) := kCHDR_WIDTHMsb;
  --  Rec.msblookupr(kRFNOC_PROTO_MINOR) := kRFNOC_PROTO_MINORMsb;
  --  Rec.msblookupr(kRFNOC_PROTO_MAJOR) := kRFNOC_PROTO_MAJORMsb;
  --  Rec.msblookupr(kCHDR_WIDTH) := kCHDR_WIDTHMsb;
  --  Rec.isreg := true;
  --  --synopsys translate_off
  --  Rec.name := rs("RFNOC_INFO_REG");
  --  --synopsys translate_on
  --  return Rec;
  --end function kRFNOC_INFO_REGRec;

  -- function kCLOCK_CTRL_REGRec not implemented because CLOCK_CTRL_REG has programmable attributes
  ---- Return the record of register kCLOCK_CTRL_REG
  --function kCLOCK_CTRL_REGRec return XReg2_t is
  --  variable Rec : XReg2_t;
  --begin
  --  Rec := kXRegDefault;
  --  Rec.version := 1;
  --  Rec.offset := XAddrResize(X"18");
  --  Rec.size := 32;
  --  Rec.readable := true;
  --  Rec.writable := true;
  --  Rec.wmask := XRegResize(X"ffff0137");
  --  Rec.rmask := XRegResize(X"ffff023f");
  --  Rec.strobemask := XRegResize(X"00000000");
  --  Rec.clearablemask := XRegResize(X"00000000");
  --  Rec.initialvalue := XRegResize(X"00000000");
  --  -- Single-bit bitfields are not listed here because the default for msblookup* is msb=lsb.
  --  Rec.msblookupw(kPPS_SELECT) := kPPS_SELECTMsb;
  --  Rec.msblookupw(kTRIGGER_IO_SELECT) := kTRIGGER_IO_SELECTMsb;
  --  Rec.msblookupw(kPLL_SYNC_DELAY) := kPLL_SYNC_DELAYMsb;
  --  Rec.msblookupw(kPPS_BRC_DELAY) := kPPS_BRC_DELAYMsb;
  --  Rec.msblookupr(kPPS_SELECT) := kPPS_SELECTMsb;
  --  Rec.msblookupr(kTRIGGER_IO_SELECT) := kTRIGGER_IO_SELECTMsb;
  --  Rec.msblookupr(kPLL_SYNC_DELAY) := kPLL_SYNC_DELAYMsb;
  --  Rec.msblookupr(kPPS_BRC_DELAY) := kPPS_BRC_DELAYMsb;
  --  Rec.isreg := true;
  --  --synopsys translate_off
  --  Rec.name := rs("CLOCK_CTRL_REG");
  --  --synopsys translate_on
  --  return Rec;
  --end function kCLOCK_CTRL_REGRec;

  -- function kPPS_CTRL_REGRec not implemented because PPS_CTRL_REG has programmable attributes
  ---- Return the record of register kPPS_CTRL_REG
  --function kPPS_CTRL_REGRec return XReg2_t is
  --  variable Rec : XReg2_t;
  --begin
  --  Rec := kXRegDefault;
  --  Rec.version := 1;
  --  Rec.offset := XAddrResize(X"1C");
  --  Rec.size := 32;
  --  Rec.readable := true;
  --  Rec.writable := true;
  --  Rec.wmask := XRegResize(X"b3ffffff");
  --  Rec.rmask := XRegResize(X"b3ffffff");
  --  Rec.strobemask := XRegResize(X"00000000");
  --  Rec.clearablemask := XRegResize(X"00000000");
  --  -- no initial values specified
  --  -- Single-bit bitfields are not listed here because the default for msblookup* is msb=lsb.
  --  Rec.msblookupw(kPPS_PRC_DELAY) := kPPS_PRC_DELAYMsb;
  --  Rec.msblookupw(kPRC_RC_DIVIDER) := kPRC_RC_DIVIDERMsb;
  --  Rec.msblookupr(kPPS_PRC_DELAY) := kPPS_PRC_DELAYMsb;
  --  Rec.msblookupr(kPRC_RC_DIVIDER) := kPRC_RC_DIVIDERMsb;
  --  Rec.isreg := true;
  --  --synopsys translate_off
  --  Rec.name := rs("PPS_CTRL_REG");
  --  --synopsys translate_on
  --  return Rec;
  --end function kPPS_CTRL_REGRec;

  -- function kCHDR_CLK_RATE_REGRec not implemented because CHDR_CLK_RATE_REG has programmable attributes
  ---- Return the record of register kCHDR_CLK_RATE_REG
  --function kCHDR_CLK_RATE_REGRec return XReg2_t is
  --  variable Rec : XReg2_t;
  --begin
  --  Rec := kXRegDefault;
  --  Rec.version := 1;
  --  Rec.offset := XAddrResize(X"20");
  --  Rec.size := 32;
  --  Rec.readable := true;
  --  Rec.writable := false;
  --  Rec.wmask := XRegResize(X"ffffffff");
  --  Rec.rmask := XRegResize(X"ffffffff");
  --  Rec.strobemask := XRegResize(X"00000000");
  --  Rec.clearablemask := XRegResize(X"00000000");
  --  Rec.initialvalue := XRegResize(X"0BEBC200");
  --  -- Single-bit bitfields are not listed here because the default for msblookup* is msb=lsb.
  --  Rec.msblookupw(kCHDR_CLK) := kCHDR_CLKMsb;
  --  Rec.msblookupr(kCHDR_CLK) := kCHDR_CLKMsb;
  --  Rec.isreg := true;
  --  --synopsys translate_off
  --  Rec.name := rs("CHDR_CLK_RATE_REG");
  --  --synopsys translate_on
  --  return Rec;
  --end function kCHDR_CLK_RATE_REGRec;

  -- function kCHDR_CLK_COUNT_REGRec not implemented because CHDR_CLK_COUNT_REG has programmable attributes
  ---- Return the record of register kCHDR_CLK_COUNT_REG
  --function kCHDR_CLK_COUNT_REGRec return XReg2_t is
  --  variable Rec : XReg2_t;
  --begin
  --  Rec := kXRegDefault;
  --  Rec.version := 1;
  --  Rec.offset := XAddrResize(X"24");
  --  Rec.size := 32;
  --  Rec.readable := true;
  --  Rec.writable := false;
  --  Rec.wmask := XRegResize(X"00000000");
  --  Rec.rmask := XRegResize(X"ffffffff");
  --  Rec.strobemask := XRegResize(X"00000000");
  --  Rec.clearablemask := XRegResize(X"00000000");
  --  -- no initial values specified
  --  -- no bitfields specified
  --  Rec.isreg := true;
  --  --synopsys translate_off
  --  Rec.name := rs("CHDR_CLK_COUNT_REG");
  --  --synopsys translate_on
  --  return Rec;
  --end function kCHDR_CLK_COUNT_REGRec;

  -- function kGPS_CTRL_REGRec not implemented because GPS_CTRL_REG has programmable attributes
  ---- Return the record of register kGPS_CTRL_REG
  --function kGPS_CTRL_REGRec return XReg2_t is
  --  variable Rec : XReg2_t;
  --begin
  --  Rec := kXRegDefault;
  --  Rec.version := 1;
  --  Rec.offset := XAddrResize(X"38");
  --  Rec.size := 32;
  --  Rec.readable := true;
  --  Rec.writable := true;
  --  Rec.wmask := XRegResize(X"ffffffff");
  --  Rec.rmask := XRegResize(X"ffffffff");
  --  Rec.strobemask := XRegResize(X"00000000");
  --  Rec.clearablemask := XRegResize(X"00000000");
  --  -- no initial values specified
  --  -- no bitfields specified
  --  Rec.isreg := true;
  --  --synopsys translate_off
  --  Rec.name := rs("GPS_CTRL_REG");
  --  --synopsys translate_on
  --  return Rec;
  --end function kGPS_CTRL_REGRec;

  -- function kGPS_STATUS_REGRec not implemented because GPS_STATUS_REG has programmable attributes
  ---- Return the record of register kGPS_STATUS_REG
  --function kGPS_STATUS_REGRec return XReg2_t is
  --  variable Rec : XReg2_t;
  --begin
  --  Rec := kXRegDefault;
  --  Rec.version := 1;
  --  Rec.offset := XAddrResize(X"3C");
  --  Rec.size := 32;
  --  Rec.readable := true;
  --  Rec.writable := false;
  --  Rec.wmask := XRegResize(X"00000000");
  --  Rec.rmask := XRegResize(X"ffffffff");
  --  Rec.strobemask := XRegResize(X"00000000");
  --  Rec.clearablemask := XRegResize(X"00000000");
  --  -- no initial values specified
  --  -- no bitfields specified
  --  Rec.isreg := true;
  --  --synopsys translate_off
  --  Rec.name := rs("GPS_STATUS_REG");
  --  --synopsys translate_on
  --  return Rec;
  --end function kGPS_STATUS_REGRec;

  -- function kDBOARD_CTRL_REGRec not implemented because DBOARD_CTRL_REG has programmable attributes
  ---- Return the record of register kDBOARD_CTRL_REG
  --function kDBOARD_CTRL_REGRec return XReg2_t is
  --  variable Rec : XReg2_t;
  --begin
  --  Rec := kXRegDefault;
  --  Rec.version := 1;
  --  Rec.offset := XAddrResize(X"40");
  --  Rec.size := 32;
  --  Rec.readable := true;
  --  Rec.writable := true;
  --  Rec.wmask := XRegResize(X"ffffffff");
  --  Rec.rmask := XRegResize(X"ffffffff");
  --  Rec.strobemask := XRegResize(X"00000000");
  --  Rec.clearablemask := XRegResize(X"00000000");
  --  -- no initial values specified
  --  -- no bitfields specified
  --  Rec.isreg := true;
  --  --synopsys translate_off
  --  Rec.name := rs("DBOARD_CTRL_REG");
  --  --synopsys translate_on
  --  return Rec;
  --end function kDBOARD_CTRL_REGRec;

  -- function kDBOARD_STATUS_REGRec not implemented because DBOARD_STATUS_REG has programmable attributes
  ---- Return the record of register kDBOARD_STATUS_REG
  --function kDBOARD_STATUS_REGRec return XReg2_t is
  --  variable Rec : XReg2_t;
  --begin
  --  Rec := kXRegDefault;
  --  Rec.version := 1;
  --  Rec.offset := XAddrResize(X"44");
  --  Rec.size := 32;
  --  Rec.readable := true;
  --  Rec.writable := false;
  --  Rec.wmask := XRegResize(X"00000000");
  --  Rec.rmask := XRegResize(X"ffffffff");
  --  Rec.strobemask := XRegResize(X"00000000");
  --  Rec.clearablemask := XRegResize(X"00000000");
  --  -- no initial values specified
  --  -- no bitfields specified
  --  Rec.isreg := true;
  --  --synopsys translate_off
  --  Rec.name := rs("DBOARD_STATUS_REG");
  --  --synopsys translate_on
  --  return Rec;
  --end function kDBOARD_STATUS_REGRec;

  -- function kNUM_TIMEKEEPERS_REGRec not implemented because NUM_TIMEKEEPERS_REG has programmable attributes
  ---- Return the record of register kNUM_TIMEKEEPERS_REG
  --function kNUM_TIMEKEEPERS_REGRec return XReg2_t is
  --  variable Rec : XReg2_t;
  --begin
  --  Rec := kXRegDefault;
  --  Rec.version := 1;
  --  Rec.offset := XAddrResize(X"48");
  --  Rec.size := 32;
  --  Rec.readable := true;
  --  Rec.writable := false;
  --  Rec.wmask := XRegResize(X"00000000");
  --  Rec.rmask := XRegResize(X"ffffffff");
  --  Rec.strobemask := XRegResize(X"00000000");
  --  Rec.clearablemask := XRegResize(X"00000000");
  --  -- no initial values specified
  --  -- no bitfields specified
  --  Rec.isreg := true;
  --  --synopsys translate_off
  --  Rec.name := rs("NUM_TIMEKEEPERS_REG");
  --  --synopsys translate_on
  --  return Rec;
  --end function kNUM_TIMEKEEPERS_REGRec;

  -- function kSERIAL_NUM_LOW_REGRec not implemented because SERIAL_NUM_LOW_REG has programmable attributes
  ---- Return the record of register kSERIAL_NUM_LOW_REG
  --function kSERIAL_NUM_LOW_REGRec return XReg2_t is
  --  variable Rec : XReg2_t;
  --begin
  --  Rec := kXRegDefault;
  --  Rec.version := 1;
  --  Rec.offset := XAddrResize(X"4C");
  --  Rec.size := 32;
  --  Rec.readable := true;
  --  Rec.writable := true;
  --  Rec.wmask := XRegResize(X"ffffffff");
  --  Rec.rmask := XRegResize(X"ffffffff");
  --  Rec.strobemask := XRegResize(X"00000000");
  --  Rec.clearablemask := XRegResize(X"00000000");
  --  -- no initial values specified
  --  -- no bitfields specified
  --  Rec.isreg := true;
  --  --synopsys translate_off
  --  Rec.name := rs("SERIAL_NUM_LOW_REG");
  --  --synopsys translate_on
  --  return Rec;
  --end function kSERIAL_NUM_LOW_REGRec;

  -- function kSERIAL_NUM_HIGH_REGRec not implemented because SERIAL_NUM_HIGH_REG has programmable attributes
  ---- Return the record of register kSERIAL_NUM_HIGH_REG
  --function kSERIAL_NUM_HIGH_REGRec return XReg2_t is
  --  variable Rec : XReg2_t;
  --begin
  --  Rec := kXRegDefault;
  --  Rec.version := 1;
  --  Rec.offset := XAddrResize(X"50");
  --  Rec.size := 32;
  --  Rec.readable := true;
  --  Rec.writable := true;
  --  Rec.wmask := XRegResize(X"ffffffff");
  --  Rec.rmask := XRegResize(X"ffffffff");
  --  Rec.strobemask := XRegResize(X"00000000");
  --  Rec.clearablemask := XRegResize(X"00000000");
  --  -- no initial values specified
  --  -- no bitfields specified
  --  Rec.isreg := true;
  --  --synopsys translate_off
  --  Rec.name := rs("SERIAL_NUM_HIGH_REG");
  --  --synopsys translate_on
  --  return Rec;
  --end function kSERIAL_NUM_HIGH_REGRec;

  -- function kMFG_TEST_CTRL_REGRec not implemented because MFG_TEST_CTRL_REG has programmable attributes
  ---- Return the record of register kMFG_TEST_CTRL_REG
  --function kMFG_TEST_CTRL_REGRec return XReg2_t is
  --  variable Rec : XReg2_t;
  --begin
  --  Rec := kXRegDefault;
  --  Rec.version := 1;
  --  Rec.offset := XAddrResize(X"54");
  --  Rec.size := 32;
  --  Rec.readable := true;
  --  Rec.writable := true;
  --  Rec.wmask := XRegResize(X"00000003");
  --  Rec.rmask := XRegResize(X"00000003");
  --  Rec.strobemask := XRegResize(X"00000000");
  --  Rec.clearablemask := XRegResize(X"00000000");
  --  -- no initial values specified
  --  -- Single-bit bitfields are not listed here because the default for msblookup* is msb=lsb.
  --  Rec.isreg := true;
  --  --synopsys translate_off
  --  Rec.name := rs("MFG_TEST_CTRL_REG");
  --  --synopsys translate_on
  --  return Rec;
  --end function kMFG_TEST_CTRL_REGRec;

  -- function kMFG_TEST_STATUS_REGRec not implemented because MFG_TEST_STATUS_REG has programmable attributes
  ---- Return the record of register kMFG_TEST_STATUS_REG
  --function kMFG_TEST_STATUS_REGRec return XReg2_t is
  --  variable Rec : XReg2_t;
  --begin
  --  Rec := kXRegDefault;
  --  Rec.version := 1;
  --  Rec.offset := XAddrResize(X"58");
  --  Rec.size := 32;
  --  Rec.readable := true;
  --  Rec.writable := true;
  --  Rec.wmask := XRegResize(X"03ffffff");
  --  Rec.rmask := XRegResize(X"03ffffff");
  --  Rec.strobemask := XRegResize(X"00000000");
  --  Rec.clearablemask := XRegResize(X"00000000");
  --  -- no initial values specified
  --  -- Single-bit bitfields are not listed here because the default for msblookup* is msb=lsb.
  --  Rec.msblookupw(kMFG_TEST_FPGA_AUX_REF_FREQ) := kMFG_TEST_FPGA_AUX_REF_FREQMsb;
  --  Rec.msblookupr(kMFG_TEST_FPGA_AUX_REF_FREQ) := kMFG_TEST_FPGA_AUX_REF_FREQMsb;
  --  Rec.isreg := true;
  --  --synopsys translate_off
  --  Rec.name := rs("MFG_TEST_STATUS_REG");
  --  --synopsys translate_on
  --  return Rec;
  --end function kMFG_TEST_STATUS_REGRec;

  -- function kQSFP_PORT_0_0_INFO_REGRec not implemented because QSFP_PORT_0_0_INFO_REG has programmable attributes
  ---- Return the record of register kQSFP_PORT_0_0_INFO_REG
  --function kQSFP_PORT_0_0_INFO_REGRec return XReg2_t is
  --  variable Rec : XReg2_t;
  --begin
  --  Rec := kXRegDefault;
  --  Rec.version := 1;
  --  Rec.offset := XAddrResize(X"60");
  --  Rec.size := 32;
  --  Rec.readable := true;
  --  Rec.writable := false;
  --  Rec.wmask := XRegResize(X"00000000");
  --  Rec.rmask := XRegResize(X"ffffffff");
  --  Rec.strobemask := XRegResize(X"00000000");
  --  Rec.clearablemask := XRegResize(X"00000000");
  --  -- no initial values specified
  --  -- no bitfields specified
  --  Rec.isreg := true;
  --  --synopsys translate_off
  --  Rec.name := rs("QSFP_PORT_0_0_INFO_REG");
  --  --synopsys translate_on
  --  return Rec;
  --end function kQSFP_PORT_0_0_INFO_REGRec;

  -- function kQSFP_PORT_0_1_INFO_REGRec not implemented because QSFP_PORT_0_1_INFO_REG has programmable attributes
  ---- Return the record of register kQSFP_PORT_0_1_INFO_REG
  --function kQSFP_PORT_0_1_INFO_REGRec return XReg2_t is
  --  variable Rec : XReg2_t;
  --begin
  --  Rec := kXRegDefault;
  --  Rec.version := 1;
  --  Rec.offset := XAddrResize(X"64");
  --  Rec.size := 32;
  --  Rec.readable := true;
  --  Rec.writable := false;
  --  Rec.wmask := XRegResize(X"00000000");
  --  Rec.rmask := XRegResize(X"ffffffff");
  --  Rec.strobemask := XRegResize(X"00000000");
  --  Rec.clearablemask := XRegResize(X"00000000");
  --  -- no initial values specified
  --  -- no bitfields specified
  --  Rec.isreg := true;
  --  --synopsys translate_off
  --  Rec.name := rs("QSFP_PORT_0_1_INFO_REG");
  --  --synopsys translate_on
  --  return Rec;
  --end function kQSFP_PORT_0_1_INFO_REGRec;

  -- function kQSFP_PORT_0_2_INFO_REGRec not implemented because QSFP_PORT_0_2_INFO_REG has programmable attributes
  ---- Return the record of register kQSFP_PORT_0_2_INFO_REG
  --function kQSFP_PORT_0_2_INFO_REGRec return XReg2_t is
  --  variable Rec : XReg2_t;
  --begin
  --  Rec := kXRegDefault;
  --  Rec.version := 1;
  --  Rec.offset := XAddrResize(X"68");
  --  Rec.size := 32;
  --  Rec.readable := true;
  --  Rec.writable := false;
  --  Rec.wmask := XRegResize(X"00000000");
  --  Rec.rmask := XRegResize(X"ffffffff");
  --  Rec.strobemask := XRegResize(X"00000000");
  --  Rec.clearablemask := XRegResize(X"00000000");
  --  -- no initial values specified
  --  -- no bitfields specified
  --  Rec.isreg := true;
  --  --synopsys translate_off
  --  Rec.name := rs("QSFP_PORT_0_2_INFO_REG");
  --  --synopsys translate_on
  --  return Rec;
  --end function kQSFP_PORT_0_2_INFO_REGRec;

  -- function kQSFP_PORT_0_3_INFO_REGRec not implemented because QSFP_PORT_0_3_INFO_REG has programmable attributes
  ---- Return the record of register kQSFP_PORT_0_3_INFO_REG
  --function kQSFP_PORT_0_3_INFO_REGRec return XReg2_t is
  --  variable Rec : XReg2_t;
  --begin
  --  Rec := kXRegDefault;
  --  Rec.version := 1;
  --  Rec.offset := XAddrResize(X"6C");
  --  Rec.size := 32;
  --  Rec.readable := true;
  --  Rec.writable := false;
  --  Rec.wmask := XRegResize(X"00000000");
  --  Rec.rmask := XRegResize(X"ffffffff");
  --  Rec.strobemask := XRegResize(X"00000000");
  --  Rec.clearablemask := XRegResize(X"00000000");
  --  -- no initial values specified
  --  -- no bitfields specified
  --  Rec.isreg := true;
  --  --synopsys translate_off
  --  Rec.name := rs("QSFP_PORT_0_3_INFO_REG");
  --  --synopsys translate_on
  --  return Rec;
  --end function kQSFP_PORT_0_3_INFO_REGRec;

  -- function kQSFP_PORT_1_0_INFO_REGRec not implemented because QSFP_PORT_1_0_INFO_REG has programmable attributes
  ---- Return the record of register kQSFP_PORT_1_0_INFO_REG
  --function kQSFP_PORT_1_0_INFO_REGRec return XReg2_t is
  --  variable Rec : XReg2_t;
  --begin
  --  Rec := kXRegDefault;
  --  Rec.version := 1;
  --  Rec.offset := XAddrResize(X"70");
  --  Rec.size := 32;
  --  Rec.readable := true;
  --  Rec.writable := false;
  --  Rec.wmask := XRegResize(X"00000000");
  --  Rec.rmask := XRegResize(X"ffffffff");
  --  Rec.strobemask := XRegResize(X"00000000");
  --  Rec.clearablemask := XRegResize(X"00000000");
  --  -- no initial values specified
  --  -- no bitfields specified
  --  Rec.isreg := true;
  --  --synopsys translate_off
  --  Rec.name := rs("QSFP_PORT_1_0_INFO_REG");
  --  --synopsys translate_on
  --  return Rec;
  --end function kQSFP_PORT_1_0_INFO_REGRec;

  -- function kQSFP_PORT_1_1_INFO_REGRec not implemented because QSFP_PORT_1_1_INFO_REG has programmable attributes
  ---- Return the record of register kQSFP_PORT_1_1_INFO_REG
  --function kQSFP_PORT_1_1_INFO_REGRec return XReg2_t is
  --  variable Rec : XReg2_t;
  --begin
  --  Rec := kXRegDefault;
  --  Rec.version := 1;
  --  Rec.offset := XAddrResize(X"74");
  --  Rec.size := 32;
  --  Rec.readable := true;
  --  Rec.writable := false;
  --  Rec.wmask := XRegResize(X"00000000");
  --  Rec.rmask := XRegResize(X"ffffffff");
  --  Rec.strobemask := XRegResize(X"00000000");
  --  Rec.clearablemask := XRegResize(X"00000000");
  --  -- no initial values specified
  --  -- no bitfields specified
  --  Rec.isreg := true;
  --  --synopsys translate_off
  --  Rec.name := rs("QSFP_PORT_1_1_INFO_REG");
  --  --synopsys translate_on
  --  return Rec;
  --end function kQSFP_PORT_1_1_INFO_REGRec;

  -- function kQSFP_PORT_1_2_INFO_REGRec not implemented because QSFP_PORT_1_2_INFO_REG has programmable attributes
  ---- Return the record of register kQSFP_PORT_1_2_INFO_REG
  --function kQSFP_PORT_1_2_INFO_REGRec return XReg2_t is
  --  variable Rec : XReg2_t;
  --begin
  --  Rec := kXRegDefault;
  --  Rec.version := 1;
  --  Rec.offset := XAddrResize(X"78");
  --  Rec.size := 32;
  --  Rec.readable := true;
  --  Rec.writable := false;
  --  Rec.wmask := XRegResize(X"00000000");
  --  Rec.rmask := XRegResize(X"ffffffff");
  --  Rec.strobemask := XRegResize(X"00000000");
  --  Rec.clearablemask := XRegResize(X"00000000");
  --  -- no initial values specified
  --  -- no bitfields specified
  --  Rec.isreg := true;
  --  --synopsys translate_off
  --  Rec.name := rs("QSFP_PORT_1_2_INFO_REG");
  --  --synopsys translate_on
  --  return Rec;
  --end function kQSFP_PORT_1_2_INFO_REGRec;

  -- function kQSFP_PORT_1_3_INFO_REGRec not implemented because QSFP_PORT_1_3_INFO_REG has programmable attributes
  ---- Return the record of register kQSFP_PORT_1_3_INFO_REG
  --function kQSFP_PORT_1_3_INFO_REGRec return XReg2_t is
  --  variable Rec : XReg2_t;
  --begin
  --  Rec := kXRegDefault;
  --  Rec.version := 1;
  --  Rec.offset := XAddrResize(X"7C");
  --  Rec.size := 32;
  --  Rec.readable := true;
  --  Rec.writable := false;
  --  Rec.wmask := XRegResize(X"00000000");
  --  Rec.rmask := XRegResize(X"ffffffff");
  --  Rec.strobemask := XRegResize(X"00000000");
  --  Rec.clearablemask := XRegResize(X"00000000");
  --  -- no initial values specified
  --  -- no bitfields specified
  --  Rec.isreg := true;
  --  --synopsys translate_off
  --  Rec.name := rs("QSFP_PORT_1_3_INFO_REG");
  --  --synopsys translate_on
  --  return Rec;
  --end function kQSFP_PORT_1_3_INFO_REGRec;

end package body;
