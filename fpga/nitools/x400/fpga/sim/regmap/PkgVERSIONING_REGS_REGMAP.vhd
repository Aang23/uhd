---------------------------------------------------------------------
--
-- Copyright 2021 Ettus Research, A National Instruments Brand
-- SPDX-License-Identifier: LGPL-3.0-or-later
--
-- Module: PkgVERSIONING_REGS_REGMAP.vhd
--
-- Purpose:
--   The constants in this file are autogenerated by XmlParse.
--
----------------------------------------------------------------------
library ieee;
  use ieee.std_logic_1164.all;
  use ieee.numeric_std.all;

package PkgVERSIONING_REGS_REGMAP is

--===============================================================================
-- A numerically ordered list of registers and their HDL source files
--===============================================================================

  -- CURRENT_VERSION           : 0x0 (x4xx_versioning_regs.v)
  -- OLDEST_COMPATIBLE_VERSION : 0x4 (x4xx_versioning_regs.v)
  -- VERSION_LAST_MODIFIED     : 0x8 (x4xx_versioning_regs.v)
  -- RESERVED                  : 0xC (x4xx_versioning_regs.v)

--===============================================================================
-- RegTypes
--===============================================================================

  -- RESERVED_TYPE Type (from x4xx_versioning_regs.v)
  constant kRESERVED_TYPESize: integer := 32;
  constant kRESERVED_TYPEMask : std_logic_vector(31 downto 0) := X"00000000";

  -- TIMESTAMP_TYPE Type (from x4xx_versioning_regs.v)
  constant kTIMESTAMP_TYPESize: integer := 32;
  constant kTIMESTAMP_TYPEMask : std_logic_vector(31 downto 0) := X"ffffffff";
  constant kHHSize       : integer := 8;  --TIMESTAMP_TYPE:HH
  constant kHHMsb        : integer := 7;  --TIMESTAMP_TYPE:HH
  constant kHH           : integer := 0;  --TIMESTAMP_TYPE:HH
  constant kDDSize       : integer :=  8;  --TIMESTAMP_TYPE:DD
  constant kDDMsb        : integer := 15;  --TIMESTAMP_TYPE:DD
  constant kDD           : integer :=  8;  --TIMESTAMP_TYPE:DD
  constant kMMSize       : integer :=  8;  --TIMESTAMP_TYPE:MM
  constant kMMMsb        : integer := 23;  --TIMESTAMP_TYPE:MM
  constant kMM           : integer := 16;  --TIMESTAMP_TYPE:MM
  constant kYYSize       : integer :=  8;  --TIMESTAMP_TYPE:YY
  constant kYYMsb        : integer := 31;  --TIMESTAMP_TYPE:YY
  constant kYY           : integer := 24;  --TIMESTAMP_TYPE:YY

  -- VERSION_TYPE Type (from x4xx_versioning_regs.v)
  constant kVERSION_TYPESize: integer := 32;
  constant kVERSION_TYPEMask : std_logic_vector(31 downto 0) := X"ffffffff";
  constant kBUILDSize       : integer := 12;  --VERSION_TYPE:BUILD
  constant kBUILDMsb        : integer := 11;  --VERSION_TYPE:BUILD
  constant kBUILD           : integer :=  0;  --VERSION_TYPE:BUILD
  constant kMINORSize       : integer := 11;  --VERSION_TYPE:MINOR
  constant kMINORMsb        : integer := 22;  --VERSION_TYPE:MINOR
  constant kMINOR           : integer := 12;  --VERSION_TYPE:MINOR
  constant kMAJORSize       : integer :=  9;  --VERSION_TYPE:MAJOR
  constant kMAJORMsb        : integer := 31;  --VERSION_TYPE:MAJOR
  constant kMAJOR           : integer := 23;  --VERSION_TYPE:MAJOR

--===============================================================================
-- Register Group VERSIONING_CONSTANTS
--===============================================================================

  -- Enumerated type CPLD_IFC_VERSION
  constant kCPLD_IFC_VERSIONSize : integer := 7;
  constant kCPLD_IFC_CURRENT_VERSION_MINOR           : integer := 0;  -- CPLD_IFC_VERSION:CPLD_IFC_CURRENT_VERSION_MINOR
  constant kCPLD_IFC_CURRENT_VERSION_BUILD           : integer := 0;  -- CPLD_IFC_VERSION:CPLD_IFC_CURRENT_VERSION_BUILD
  constant kCPLD_IFC_OLDEST_COMPATIBLE_VERSION_MINOR : integer := 0;  -- CPLD_IFC_VERSION:CPLD_IFC_OLDEST_COMPATIBLE_VERSION_MINOR
  constant kCPLD_IFC_OLDEST_COMPATIBLE_VERSION_BUILD : integer := 0;  -- CPLD_IFC_VERSION:CPLD_IFC_OLDEST_COMPATIBLE_VERSION_BUILD
  constant kCPLD_IFC_CURRENT_VERSION_MAJOR           : integer := 2;  -- CPLD_IFC_VERSION:CPLD_IFC_CURRENT_VERSION_MAJOR
  constant kCPLD_IFC_OLDEST_COMPATIBLE_VERSION_MAJOR : integer := 2;  -- CPLD_IFC_VERSION:CPLD_IFC_OLDEST_COMPATIBLE_VERSION_MAJOR
  constant kCPLD_IFC_VERSION_LAST_MODIFIED_TIME      : integer := 16#21011809#;  -- CPLD_IFC_VERSION:CPLD_IFC_VERSION_LAST_MODIFIED_TIME

  -- Enumerated type DB_GPIO_IFC_VERSION
  constant kDB_GPIO_IFC_VERSIONSize : integer := 7;
  constant kDB_GPIO_IFC_CURRENT_VERSION_MINOR           : integer := 0;  -- DB_GPIO_IFC_VERSION:DB_GPIO_IFC_CURRENT_VERSION_MINOR
  constant kDB_GPIO_IFC_CURRENT_VERSION_BUILD           : integer := 0;  -- DB_GPIO_IFC_VERSION:DB_GPIO_IFC_CURRENT_VERSION_BUILD
  constant kDB_GPIO_IFC_OLDEST_COMPATIBLE_VERSION_MINOR : integer := 0;  -- DB_GPIO_IFC_VERSION:DB_GPIO_IFC_OLDEST_COMPATIBLE_VERSION_MINOR
  constant kDB_GPIO_IFC_OLDEST_COMPATIBLE_VERSION_BUILD : integer := 0;  -- DB_GPIO_IFC_VERSION:DB_GPIO_IFC_OLDEST_COMPATIBLE_VERSION_BUILD
  constant kDB_GPIO_IFC_CURRENT_VERSION_MAJOR           : integer := 1;  -- DB_GPIO_IFC_VERSION:DB_GPIO_IFC_CURRENT_VERSION_MAJOR
  constant kDB_GPIO_IFC_OLDEST_COMPATIBLE_VERSION_MAJOR : integer := 1;  -- DB_GPIO_IFC_VERSION:DB_GPIO_IFC_OLDEST_COMPATIBLE_VERSION_MAJOR
  constant kDB_GPIO_IFC_VERSION_LAST_MODIFIED_TIME      : integer := 16#20110616#;  -- DB_GPIO_IFC_VERSION:DB_GPIO_IFC_VERSION_LAST_MODIFIED_TIME

  -- Enumerated type FPGA_VERSION
  constant kFPGA_VERSIONSize : integer := 7;
  constant kFPGA_CURRENT_VERSION_BUILD           : integer := 0;  -- FPGA_VERSION:FPGA_CURRENT_VERSION_BUILD
  constant kFPGA_OLDEST_COMPATIBLE_VERSION_MINOR : integer := 0;  -- FPGA_VERSION:FPGA_OLDEST_COMPATIBLE_VERSION_MINOR
  constant kFPGA_OLDEST_COMPATIBLE_VERSION_BUILD : integer := 0;  -- FPGA_VERSION:FPGA_OLDEST_COMPATIBLE_VERSION_BUILD
  constant kFPGA_CURRENT_VERSION_MINOR           : integer := 2;  -- FPGA_VERSION:FPGA_CURRENT_VERSION_MINOR
  constant kFPGA_CURRENT_VERSION_MAJOR           : integer := 7;  -- FPGA_VERSION:FPGA_CURRENT_VERSION_MAJOR
  constant kFPGA_OLDEST_COMPATIBLE_VERSION_MAJOR : integer := 7;  -- FPGA_VERSION:FPGA_OLDEST_COMPATIBLE_VERSION_MAJOR
  constant kFPGA_VERSION_LAST_MODIFIED_TIME      : integer := 16#21041616#;  -- FPGA_VERSION:FPGA_VERSION_LAST_MODIFIED_TIME

  -- Enumerated type RF_CORE_100M_VERSION
  constant kRF_CORE_100M_VERSIONSize : integer := 7;
  constant kRF_CORE_100M_CURRENT_VERSION_MINOR           : integer := 0;  -- RF_CORE_100M_VERSION:RF_CORE_100M_CURRENT_VERSION_MINOR
  constant kRF_CORE_100M_CURRENT_VERSION_BUILD           : integer := 0;  -- RF_CORE_100M_VERSION:RF_CORE_100M_CURRENT_VERSION_BUILD
  constant kRF_CORE_100M_OLDEST_COMPATIBLE_VERSION_MINOR : integer := 0;  -- RF_CORE_100M_VERSION:RF_CORE_100M_OLDEST_COMPATIBLE_VERSION_MINOR
  constant kRF_CORE_100M_OLDEST_COMPATIBLE_VERSION_BUILD : integer := 0;  -- RF_CORE_100M_VERSION:RF_CORE_100M_OLDEST_COMPATIBLE_VERSION_BUILD
  constant kRF_CORE_100M_CURRENT_VERSION_MAJOR           : integer := 1;  -- RF_CORE_100M_VERSION:RF_CORE_100M_CURRENT_VERSION_MAJOR
  constant kRF_CORE_100M_OLDEST_COMPATIBLE_VERSION_MAJOR : integer := 1;  -- RF_CORE_100M_VERSION:RF_CORE_100M_OLDEST_COMPATIBLE_VERSION_MAJOR
  constant kRF_CORE_100M_VERSION_LAST_MODIFIED_TIME      : integer := 16#20102617#;  -- RF_CORE_100M_VERSION:RF_CORE_100M_VERSION_LAST_MODIFIED_TIME

  -- Enumerated type RF_CORE_400M_VERSION
  constant kRF_CORE_400M_VERSIONSize : integer := 7;
  constant kRF_CORE_400M_CURRENT_VERSION_MINOR           : integer := 0;  -- RF_CORE_400M_VERSION:RF_CORE_400M_CURRENT_VERSION_MINOR
  constant kRF_CORE_400M_CURRENT_VERSION_BUILD           : integer := 0;  -- RF_CORE_400M_VERSION:RF_CORE_400M_CURRENT_VERSION_BUILD
  constant kRF_CORE_400M_OLDEST_COMPATIBLE_VERSION_MINOR : integer := 0;  -- RF_CORE_400M_VERSION:RF_CORE_400M_OLDEST_COMPATIBLE_VERSION_MINOR
  constant kRF_CORE_400M_OLDEST_COMPATIBLE_VERSION_BUILD : integer := 0;  -- RF_CORE_400M_VERSION:RF_CORE_400M_OLDEST_COMPATIBLE_VERSION_BUILD
  constant kRF_CORE_400M_CURRENT_VERSION_MAJOR           : integer := 1;  -- RF_CORE_400M_VERSION:RF_CORE_400M_CURRENT_VERSION_MAJOR
  constant kRF_CORE_400M_OLDEST_COMPATIBLE_VERSION_MAJOR : integer := 1;  -- RF_CORE_400M_VERSION:RF_CORE_400M_OLDEST_COMPATIBLE_VERSION_MAJOR
  constant kRF_CORE_400M_VERSION_LAST_MODIFIED_TIME      : integer := 16#20102617#;  -- RF_CORE_400M_VERSION:RF_CORE_400M_VERSION_LAST_MODIFIED_TIME

--===============================================================================
-- Register Group VERSIONING_REGS
--===============================================================================

  -- Enumerated type COMPONENTS_INDEXES
  constant kCOMPONENTS_INDEXESSize : integer := 6;
  constant kFPGA_VERSION_INDEX : integer := 0;  -- COMPONENTS_INDEXES:FPGA_VERSION_INDEX
  constant kCPLD_IFC_INDEX     : integer := 1;  -- COMPONENTS_INDEXES:CPLD_IFC_INDEX
  constant kDB0_RF_CORE_INDEX  : integer := 2;  -- COMPONENTS_INDEXES:DB0_RF_CORE_INDEX
  constant kDB1_RF_CORE_INDEX  : integer := 3;  -- COMPONENTS_INDEXES:DB1_RF_CORE_INDEX
  constant kDB0_GPIO_IFC_INDEX : integer := 4;  -- COMPONENTS_INDEXES:DB0_GPIO_IFC_INDEX
  constant kDB1_GPIO_IFC_INDEX : integer := 5;  -- COMPONENTS_INDEXES:DB1_GPIO_IFC_INDEX

  -- CURRENT_VERSION Register (from x4xx_versioning_regs.v)
  function kCURRENT_VERSION (i:integer) return integer; -- Register Offset function
  constant kCURRENT_VERSIONCount : integer := 64; -- Number of elements in array
  constant kCURRENT_VERSIONSize: integer := 32; -- Register bit width (not array size)
  --function kCURRENT_VERSIONRec (i:integer) return XReg2_t; -- Register Record function commented out due to programmable attributes

  -- OLDEST_COMPATIBLE_VERSION Register (from x4xx_versioning_regs.v)
  function kOLDEST_COMPATIBLE_VERSION (i:integer) return integer; -- Register Offset function
  constant kOLDEST_COMPATIBLE_VERSIONCount : integer := 64; -- Number of elements in array
  constant kOLDEST_COMPATIBLE_VERSIONSize: integer := 32; -- Register bit width (not array size)
  --function kOLDEST_COMPATIBLE_VERSIONRec (i:integer) return XReg2_t; -- Register Record function commented out due to programmable attributes

  -- VERSION_LAST_MODIFIED Register (from x4xx_versioning_regs.v)
  function kVERSION_LAST_MODIFIED (i:integer) return integer; -- Register Offset function
  constant kVERSION_LAST_MODIFIEDCount : integer := 64; -- Number of elements in array
  constant kVERSION_LAST_MODIFIEDSize: integer := 32; -- Register bit width (not array size)
  --function kVERSION_LAST_MODIFIEDRec (i:integer) return XReg2_t; -- Register Record function commented out due to programmable attributes

  -- RESERVED Register (from x4xx_versioning_regs.v)
  function kRESERVED (i:integer) return integer; -- Register Offset function
  constant kRESERVEDCount : integer := 64; -- Number of elements in array
  constant kRESERVEDSize: integer := 32; -- Register bit width (not array size)
  --function kRESERVEDRec (i:integer) return XReg2_t; -- Register Record function commented out due to programmable attributes

end package;

package body PkgVERSIONING_REGS_REGMAP is

  -- Return the offset of an element of register array kCURRENT_VERSION
  function kCURRENT_VERSION (i:integer) return integer is
  begin
    --synopsys translate_off
    assert i>=0 and i<=63 report "kCURRENT_VERSION i=" & integer'image(i) & " is out of range" severity error;
    --synopsys translate_on
    return (i * 16) + 16#0#;
  end function kCURRENT_VERSION;

  -- function kCURRENT_VERSIONRec not implemented because CURRENT_VERSION has programmable attributes
  ---- Return the record of an element of register array kCURRENT_VERSION
  --function kCURRENT_VERSIONRec (i:integer) return XReg2_t is
  --  variable Rec : XReg2_t;
  --begin
  --  --synopsys translate_off
  --  assert i>=0 and i<=63 report "kCURRENT_VERSIONRec i=" & integer'image(i) & " is out of range" severity error;
  --  --synopsys translate_on
  --  Rec := kXRegDefault;
  --  Rec.version := 1;
  --  Rec.offset := (i * 16) + XAddrResize(X"0");
  --  Rec.size := 32;
  --  Rec.readable := true;
  --  Rec.writable := false;
  --  Rec.wmask := XRegResize(X"ffffffff");
  --  Rec.rmask := XRegResize(X"ffffffff");
  --  Rec.strobemask := XRegResize(X"00000000");
  --  Rec.clearablemask := XRegResize(X"00000000");
  --  Rec.initialvalue := XRegResize(X"00000000");
  --  -- Single-bit bitfields are not listed here because the default for msblookup* is msb=lsb.
  --  Rec.msblookupw(kBUILD) := kBUILDMsb;
  --  Rec.msblookupw(kMINOR) := kMINORMsb;
  --  Rec.msblookupw(kMAJOR) := kMAJORMsb;
  --  Rec.msblookupr(kBUILD) := kBUILDMsb;
  --  Rec.msblookupr(kMINOR) := kMINORMsb;
  --  Rec.msblookupr(kMAJOR) := kMAJORMsb;
  --  Rec.isreg := true;
  --  --synopsys translate_off
  --  Rec.name := rs("CURRENT_VERSION");
  --  --synopsys translate_on
  --  return Rec;
  --end function kCURRENT_VERSIONRec;

  -- Return the offset of an element of register array kOLDEST_COMPATIBLE_VERSION
  function kOLDEST_COMPATIBLE_VERSION (i:integer) return integer is
  begin
    --synopsys translate_off
    assert i>=0 and i<=63 report "kOLDEST_COMPATIBLE_VERSION i=" & integer'image(i) & " is out of range" severity error;
    --synopsys translate_on
    return (i * 16) + 16#4#;
  end function kOLDEST_COMPATIBLE_VERSION;

  -- function kOLDEST_COMPATIBLE_VERSIONRec not implemented because OLDEST_COMPATIBLE_VERSION has programmable attributes
  ---- Return the record of an element of register array kOLDEST_COMPATIBLE_VERSION
  --function kOLDEST_COMPATIBLE_VERSIONRec (i:integer) return XReg2_t is
  --  variable Rec : XReg2_t;
  --begin
  --  --synopsys translate_off
  --  assert i>=0 and i<=63 report "kOLDEST_COMPATIBLE_VERSIONRec i=" & integer'image(i) & " is out of range" severity error;
  --  --synopsys translate_on
  --  Rec := kXRegDefault;
  --  Rec.version := 1;
  --  Rec.offset := (i * 16) + XAddrResize(X"4");
  --  Rec.size := 32;
  --  Rec.readable := true;
  --  Rec.writable := false;
  --  Rec.wmask := XRegResize(X"ffffffff");
  --  Rec.rmask := XRegResize(X"ffffffff");
  --  Rec.strobemask := XRegResize(X"00000000");
  --  Rec.clearablemask := XRegResize(X"00000000");
  --  Rec.initialvalue := XRegResize(X"00000000");
  --  -- Single-bit bitfields are not listed here because the default for msblookup* is msb=lsb.
  --  Rec.msblookupw(kBUILD) := kBUILDMsb;
  --  Rec.msblookupw(kMINOR) := kMINORMsb;
  --  Rec.msblookupw(kMAJOR) := kMAJORMsb;
  --  Rec.msblookupr(kBUILD) := kBUILDMsb;
  --  Rec.msblookupr(kMINOR) := kMINORMsb;
  --  Rec.msblookupr(kMAJOR) := kMAJORMsb;
  --  Rec.isreg := true;
  --  --synopsys translate_off
  --  Rec.name := rs("OLDEST_COMPATIBLE_VERSION");
  --  --synopsys translate_on
  --  return Rec;
  --end function kOLDEST_COMPATIBLE_VERSIONRec;

  -- Return the offset of an element of register array kVERSION_LAST_MODIFIED
  function kVERSION_LAST_MODIFIED (i:integer) return integer is
  begin
    --synopsys translate_off
    assert i>=0 and i<=63 report "kVERSION_LAST_MODIFIED i=" & integer'image(i) & " is out of range" severity error;
    --synopsys translate_on
    return (i * 16) + 16#8#;
  end function kVERSION_LAST_MODIFIED;

  -- function kVERSION_LAST_MODIFIEDRec not implemented because VERSION_LAST_MODIFIED has programmable attributes
  ---- Return the record of an element of register array kVERSION_LAST_MODIFIED
  --function kVERSION_LAST_MODIFIEDRec (i:integer) return XReg2_t is
  --  variable Rec : XReg2_t;
  --begin
  --  --synopsys translate_off
  --  assert i>=0 and i<=63 report "kVERSION_LAST_MODIFIEDRec i=" & integer'image(i) & " is out of range" severity error;
  --  --synopsys translate_on
  --  Rec := kXRegDefault;
  --  Rec.version := 1;
  --  Rec.offset := (i * 16) + XAddrResize(X"8");
  --  Rec.size := 32;
  --  Rec.readable := true;
  --  Rec.writable := false;
  --  Rec.wmask := XRegResize(X"ffffffff");
  --  Rec.rmask := XRegResize(X"ffffffff");
  --  Rec.strobemask := XRegResize(X"00000000");
  --  Rec.clearablemask := XRegResize(X"00000000");
  --  -- no initial values specified
  --  -- Single-bit bitfields are not listed here because the default for msblookup* is msb=lsb.
  --  Rec.msblookupw(kHH) := kHHMsb;
  --  Rec.msblookupw(kDD) := kDDMsb;
  --  Rec.msblookupw(kMM) := kMMMsb;
  --  Rec.msblookupw(kYY) := kYYMsb;
  --  Rec.msblookupr(kHH) := kHHMsb;
  --  Rec.msblookupr(kDD) := kDDMsb;
  --  Rec.msblookupr(kMM) := kMMMsb;
  --  Rec.msblookupr(kYY) := kYYMsb;
  --  Rec.isreg := true;
  --  --synopsys translate_off
  --  Rec.name := rs("VERSION_LAST_MODIFIED");
  --  --synopsys translate_on
  --  return Rec;
  --end function kVERSION_LAST_MODIFIEDRec;

  -- Return the offset of an element of register array kRESERVED
  function kRESERVED (i:integer) return integer is
  begin
    --synopsys translate_off
    assert i>=0 and i<=63 report "kRESERVED i=" & integer'image(i) & " is out of range" severity error;
    --synopsys translate_on
    return (i * 16) + 16#C#;
  end function kRESERVED;

  -- function kRESERVEDRec not implemented because RESERVED has programmable attributes
  ---- Return the record of an element of register array kRESERVED
  --function kRESERVEDRec (i:integer) return XReg2_t is
  --  variable Rec : XReg2_t;
  --begin
  --  --synopsys translate_off
  --  assert i>=0 and i<=63 report "kRESERVEDRec i=" & integer'image(i) & " is out of range" severity error;
  --  --synopsys translate_on
  --  Rec := kXRegDefault;
  --  Rec.version := 1;
  --  Rec.offset := (i * 16) + XAddrResize(X"C");
  --  Rec.size := 32;
  --  Rec.readable := true;
  --  Rec.writable := false;
  --  Rec.wmask := XRegResize(X"00000000");
  --  Rec.rmask := XRegResize(X"ffffffff");
  --  Rec.strobemask := XRegResize(X"00000000");
  --  Rec.clearablemask := XRegResize(X"00000000");
  --  -- no initial values specified
  --  -- no bitfields specified
  --  Rec.isreg := true;
  --  --synopsys translate_off
  --  Rec.name := rs("RESERVED");
  --  --synopsys translate_on
  --  return Rec;
  --end function kRESERVEDRec;

end package body;
