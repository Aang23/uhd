
# #### reset_rpll ####
# 1 = reset
# 0 = no reset
proc reset_rpll { val } {
  set dat [expr {!$val << 6}]; # active-low reset
  # Set bit to output (reg 0x3) bit 6 to 0x0
  mask_poke_i2c_gpio 0x03 0x40 0x0
  # Set bit high or low (reg 0x1, data $dat)
  mask_poke_i2c_gpio 0x01 0x40 $dat
}


proc rpll_config {} {
  # Reset LMK
  puts "\[RPLL\] Resetting..."
  set rd_val [peek_rpll 0x0C]
  poke_rpll 0x0C [expr {($rd_val & 0x7F)}]
  poke_rpll 0x0C [expr {($rd_val | 0x80)}]
  peek_rpll 0x0C "verbose"
  # Read chip ID
  # peek_rpll 0x02
  # Begin config() sequence
  # Config done for default values (white_rabbit = False, brc_select = 'bypass', usr_clk_rate = 161.1328125e6)
  puts "\[RPLL\] Running config sequence..."
  poke_rpll 0x0C 0xD9  
  poke_rpll 0x0D 0x00
  poke_rpll 0x0E 0x00
  poke_rpll 0x0F 0x00
  poke_rpll 0x10 0x00
  poke_rpll 0x11 0x00
  poke_rpll 0x12 0x00
  poke_rpll 0x13 0x00
  poke_rpll 0x14 0x00
  poke_rpll 0x15 0x00
  poke_rpll 0x16 0x00
  poke_rpll 0x17 0x00
  poke_rpll 0x18 0x00
  poke_rpll 0x19 0x55
  poke_rpll 0x1A 0x00
  poke_rpll 0x1B 0x28
  poke_rpll 0x1C 0x58
  poke_rpll 0x1D 0x89
  poke_rpll 0x1E 0x01
  poke_rpll 0x1F 0x00
  poke_rpll 0x20 0x00
  poke_rpll 0x21 0x00
  poke_rpll 0x22 0x00
  poke_rpll 0x23 0x20
  poke_rpll 0x24 0x03
  poke_rpll 0x25 0xD0
  poke_rpll 0x26 0x00
  poke_rpll 0x27 0xD0
  poke_rpll 0x28 0x07
  poke_rpll 0x29 0xD0
  poke_rpll 0x2A 0x09
  poke_rpll 0x2B 0x98
  poke_rpll 0x2C 0x09
  poke_rpll 0x2D 0x0A
  poke_rpll 0x2E 0x00
  poke_rpll 0x2F 0x00
  poke_rpll 0x30 0xFF
  poke_rpll 0x31 0x05
  poke_rpll 0x32 0x4F
  poke_rpll 0x33 0x03
  poke_rpll 0x34 0x00
  poke_rpll 0x35 0x0F
  poke_rpll 0x36 0x00
  poke_rpll 0x37 0x00
  poke_rpll 0x38 0x1E
  poke_rpll 0x39 0x08
  poke_rpll 0x3A 0x03
  poke_rpll 0x3B 0x39
  poke_rpll 0x3C 0x00
  poke_rpll 0x3D 0x00
  poke_rpll 0x3E 0x00
  poke_rpll 0x3F 0x00
  poke_rpll 0x40 0x00
  poke_rpll 0x41 0x04
  poke_rpll 0x42 0x0C
  poke_rpll 0x43 0x08
  poke_rpll 0x44 0x00
  poke_rpll 0x45 0x00
  poke_rpll 0x46 0x00
  poke_rpll 0x47 0x0E
  poke_rpll 0x48 0x08
  poke_rpll 0x49 0x00
  poke_rpll 0x4A 0x32
  poke_rpll 0x4B 0x00
  poke_rpll 0x4C 0x00
  poke_rpll 0x4D 0x00
  poke_rpll 0x4E 0x00
  poke_rpll 0x4F 0x00
  poke_rpll 0x50 0x01
  poke_rpll 0x51 0x0C
  poke_rpll 0x52 0x08
  poke_rpll 0x53 0x00
  poke_rpll 0x54 0x00
  poke_rpll 0x55 0x00
  poke_rpll 0x56 0x00
  poke_rpll 0x57 0x00
  poke_rpll 0x58 0x00
  poke_rpll 0x59 0xDE
  poke_rpll 0x5A 0x01
  poke_rpll 0x5B 0x18
  poke_rpll 0x5C 0x01
  poke_rpll 0x5D 0x4B
  poke_rpll 0x5E 0x01
  poke_rpll 0x5F 0x86
  poke_rpll 0x60 0x01
  poke_rpll 0x61 0xBE
  poke_rpll 0x62 0x01
  poke_rpll 0x63 0xFE
  poke_rpll 0x64 0x02
  poke_rpll 0x65 0x47
  poke_rpll 0x66 0x02
  poke_rpll 0x67 0x9E
  poke_rpll 0x68 0x00
  poke_rpll 0x69 0x00
  poke_rpll 0x6A 0x05
  poke_rpll 0x6B 0x0F
  poke_rpll 0x6C 0x0F
  poke_rpll 0x6D 0x0F
  poke_rpll 0x6E 0x0F
  poke_rpll 0x6F 0x00
  poke_rpll 0x70 0x00
  poke_rpll 0x71 0x00
  poke_rpll 0x72 0x00
  poke_rpll 0x73 0x08
  poke_rpll 0x74 0x19
  poke_rpll 0x75 0x00
  poke_rpll 0x76 0x03
  poke_rpll 0x77 0x01
  poke_rpll 0x78 0x00
  poke_rpll 0x79 0x0F
  poke_rpll 0x7A 0x0F
  poke_rpll 0x7B 0x0F
  poke_rpll 0x7C 0x0F
  poke_rpll 0x7D 0x00
  poke_rpll 0x7E 0x00
  poke_rpll 0x7F 0x00
  poke_rpll 0x80 0x00
  poke_rpll 0x81 0x08
  poke_rpll 0x82 0x19
  poke_rpll 0x83 0x00
  poke_rpll 0x84 0x03
  poke_rpll 0x85 0x01
  poke_rpll 0x86 0x00
  poke_rpll 0x87 0x00
  poke_rpll 0x88 0x00
  poke_rpll 0x89 0x10
  poke_rpll 0x8A 0x00
  poke_rpll 0x8B 0x00
  poke_rpll 0x8C 0x00
  poke_rpll 0x8D 0x00
  poke_rpll 0x8E 0x00
  poke_rpll 0x8F 0x00
  poke_rpll 0x90 0x00
  poke_rpll 0x91 0x00
  poke_rpll 0xA9 0x40
  poke_rpll 0xAC 0x24
  poke_rpll 0xAD 0x00
  # R12 0x0C Write bit 6 to '0' then back to '1'
  # set rd_val [peek_rpll 0x0C]
  # poke_rpll 0x0C [expr {($rd_val & 0xBF)}]
  # poke_rpll 0x0C [expr {($rd_val | 0x40)}]
  # Check for Lock for both PLLs
  puts "\[RPLL\] Checking for PLL Lock..."
  if {([peek_rpll 0x0D "verbose"] & 0xC0) == 0} { puts "\[RPLL\] PLL1 Locked"} else \
    {puts "\[WARNING\] \[RPLL\] PLL1 Unlocked!!!"}
  if {([peek_rpll 0x0D "verbose"] & 0x18) == 0} { puts "\[RPLL\] PLL2 Locked"} else \
    {puts "\[WARNING\] \[RPLL\] PLL2 Unlocked!!!"}

}